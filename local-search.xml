<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UE5 C++学习笔记</title>
    <link href="/wild/2022/11/25/log/P_UE_C++_2.0/"/>
    <url>/wild/2022/11/25/log/P_UE_C++_2.0/</url>
    
    <content type="html"><![CDATA[<h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><ul><li>Log类型ELogVerbosity<ul><li>Log</li><li>Warning</li><li>Error</li><li>All</li></ul></li><li>UE_LOG<ul><li><a href="https://blog.csdn.net/liulong1567/article/details/52449000">如何使用UE_LOG</a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//单个文件，定义自己的Log类型</span><br><span class="hljs-built_in">DEFINE_LOG_CATEGORY_STATIC</span>(CategoryName,Log,All);<br><br><span class="hljs-comment">//全局文件定义，需要include头文件</span><br><span class="hljs-comment">// xxx.h 头文件声明一个Category为extern，避免多个文件使用此头文件时重复声明</span><br><span class="hljs-built_in">DECLARE_LOG_CATEGORY_EXTERN</span>(CategoryName, Log, All)<br><span class="hljs-comment">// xxx.cpp 源文件定义该Category，全局仅需一份</span><br><span class="hljs-built_in">DEFINE_LOG_CATEGORY</span>(CategoryName)<br></code></pre></td></tr></table></figure></li></ul></li><li>UE_LOG格式化输出<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">UE_LOG</span>(LogTemp, Warning, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;init&quot;</span>));<br><span class="hljs-built_in">UE_LOG</span>(LogTemp, Log, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Key : %d Value: %s&quot;</span>), Test.key, Test.Value);<br>GEngine-&gt;<span class="hljs-built_in">AddOnScreenDebugMessage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2.0f</span>, FColor::Yellow, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;init&quot;</span>));<br></code></pre></td></tr></table></figure></li></ul><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/147648443">简述UnrealInsights</a></li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/137799980">UE4 C++基础 - 编码规范</a></li><li>T 表示模板类</li><li>U 表示类继承自 UObject</li><li>A 表示类继承自 AActor</li><li>S 表示类继承自 SWidget</li><li>I 表示抽象接口类</li><li>E 表示枚举</li><li>b 表示布尔值</li><li>F 表示其他不满足上述规则的类</li></ul><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><ul><li>GEngine-&gt;getXXX()</li><li>GEditor-&gt;getXXX()</li><li>GEditor-&gt;GetEditorWorldContext().World()</li></ul><h3 id="Spawn"><a href="#Spawn" class="headerlink" title="Spawn"></a>Spawn</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/99327373">【UE4基础】对象创建与资源获取</a></li><li><a href="https://zhuanlan.zhihu.com/p/357904199">UE4的资源管理</a></li></ul><h3 id="TArray-TMap"><a href="#TArray-TMap" class="headerlink" title="TArray TMap"></a>TArray TMap</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/426070060">UE4随笔：TArray容器</a></li><li><a href="https://zhuanlan.zhihu.com/p/386420743">UE4&#x2F;UE5的TSet和TMap</a></li></ul><h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><ul><li><a href="https://blog.ch-wind.com/ue4-reflection-note/">UE4属性反射小结</a><ul><li>FindField<UFloatProperty>(Target-&gt;GetClass(), VarName)</li><li>FloatProp-&gt;GetPropertyValue_InContainer(Target)</li></ul></li><li><a href="https://blog.csdn.net/qq_40026009/article/details/105121465">UE4 C++ 利用反射获取到类、类的成员</a></li><li>UCLASS</li><li>UPROPERTY<ul><li>EditAnywhere</li><li>VisibleAnywhere</li><li>BlueprintReadWrite</li><li>Category &#x3D; “Test”</li><li>Meta &#x3D; (key&#x3D;value, key&#x3D;value, …)</li><li><a href="https://docs.unrealengine.com/4.27/en-US/ProgrammingAndScripting/GameplayArchitecture/Properties/">API Doc</a></li></ul></li><li>UFUNCTION<ul><li>BlueprintCallable</li><li>CallInEditor</li><li><a href="https://docs.unrealengine.com/4.27/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/">API Doc</a></li></ul></li><li>UENUM</li><li><a href="https://zhuanlan.zhihu.com/p/380809095">一文搞懂StaticClass、GetClass和ClassDefaultObject</a></li><li><a href="https://zhuanlan.zhihu.com/p/438501014">一文搞懂NativeClass、GeneratedClass、BlueprintClass、ParentClass</a></li><li><a href="https://blog.csdn.net/qq_23030843/article/details/117248969">UE4 从UProperty到FProperty</a><ul><li>在UE4中，通过特殊的宏，将所需要反射的数据进行标记，从而自动的生成供运行时查询的信息<br>  <img src="/wild/2022/11/25/log/P_UE_C++_2.0/image-1656979811800.png"></li><li>FindObject(UClass)</li><li>NewObject(UClass)</li><li>从4.25开始，此UProperty已完全更改为FProperty。 前缀“F”说明其不再继承UObject<br>  <img src="/wild/2022/11/25/log/P_UE_C++_2.0/image-1656979928510.png"></li></ul></li></ul><h3 id="Module-Plugin"><a href="#Module-Plugin" class="headerlink" title="Module | Plugin"></a>Module | Plugin</h3><ul><li>ModuleManager</li><li><a href="https://imzlp.com/posts/16643/">UE Build System：Target and Module</a></li><li><a href="https://imzlp.com/posts/6362/">Build flow of the Unreal Engine4 project</a></li></ul><h3 id="Engine-Module"><a href="#Engine-Module" class="headerlink" title="Engine Module"></a>Engine Module</h3><p><a href="https://docs.unrealengine.com/5.0/en-US/API/QuickStart/">API</a></p><ul><li>Core<ul><li>基础数据类型：int32 FString float</li><li>数学函数，结构体：FMath FVector</li><li>容器：TArray TList TMap</li></ul></li><li>CoreUObject<ul><li>基础类：UObject UClass UProperty UPackage</li><li>对象内存分配函数：ConstuctObject FindObject Cast</li></ul></li><li>Engine<ul><li>场景对象、组件：AActor APawn UActorComponent</li><li>关卡、世界、玩家：UWorld ULevel UPlayer</li><li>模型、纹理、材质：UTexture UMaterial UStaticMesh</li></ul></li><li>Slate</li></ul><h3 id="UObject"><a href="#UObject" class="headerlink" title="UObject"></a>UObject</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/419769230">[UE4 UObject] 对象概念</a></li><li>UClass::GetDefaultObject() 获取到的为类的 CDO 对象</li><li>CDO 对象的主要作用就是用于为类提供默认值</li><li>UObject::GetOuter() 获取自己的 Outer 对象</li><li>一个对象的 Outer 称为这个对象的父对象，而自己就称为 Outer 对象的子对象</li><li>仅能在 UObject 的 Native 构造函数中，调用自己的 UObject::CreateDefaultSubobject() 为自己创建默认子对象</li><li>UPackage 对象对应于磁盘上的一个 .uasset 资源文件，或全局临时包</li><li><a href="https://zhuanlan.zhihu.com/p/22813908">《InsideUE4》目录</a></li><li><a href="https://zhuanlan.zhihu.com/p/24319968">《InsideUE4》UObject（一）开篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/22833151">《InsideUE4》GamePlay架构（一）Actor和Component</a></li><li><a href="https://zhuanlan.zhihu.com/p/65545884">使UObject能够进行Tick</a></li></ul><h3 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h3><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/163587790">UE4 C++基础 - 字符串和本地化</a></p></li><li><p>FString       属于可变字符串</p></li><li><p>FName FText   属于不可变字符串，创建后内容不能改变</p></li><li><p>FName 不区分大小写，主要用于标识资源路径，它的优点就是查找和访问速度快</p></li><li><p>FString转换至FName时会丢失原始字符串的大小写信息</p></li><li><p>FText 主要用于文本本地化<br><img src="/wild/2022/11/25/log/P_UE_C++_2.0/image-1656768471127.png"></p></li><li><p>格式化</p><ul><li>FString::Printf(TEXT(“FormatString:\n%s%s%s”), *A, *B, *Plus);</li></ul></li></ul><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/133921916">UE4 C++基础 - 多线程</a></li><li><a href="https://zhuanlan.zhihu.com/p/408012121">UE4&#x2F;UE5的TaskGraph</a></li></ul><h3 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/433605801">UE4随笔：UE4智能指针</a></li></ul><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/67055774">UE4 垃圾回收</a></li></ul><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ul><li><a href="https://forums.unrealengine.com/t/exporting-thumbnails-to-pngs/501891">Exporting Thumbnails to PNGs</a></li><li><a href="https://zhuanlan.zhihu.com/p/354658960">[UE4 源码观察] AssetThumbnail资源缩略图</a></li></ul><h3 id="Third-Party-C-Library"><a href="#Third-Party-C-Library" class="headerlink" title="Third Party C++ Library"></a>Third Party C++ Library</h3><ul><li><a href="https://github.com/gradientspace/UnrealMeshProcessingTools">UnrealMeshProcessingTools</a></li><li><a href="http://www.gradientspace.com/tutorials/2020/1/2/libigl-in-unreal-engine">Interactive Mesh Processing with libigl in Unreal Engine 4.24</a></li><li><a href="https://www.bilibili.com/video/BV1az4y1k73V">UE4链接第三方库的具体使用和演示</a></li><li><a href="https://zhuanlan.zhihu.com/p/69432852">UE4链接第三方库（lib和dll）</a></li><li><a href="https://blog.csdn.net/lunweiwangxi3/article/details/83187840">UE4中使用第三方库</a></li><li><a href="https://zhuanlan.zhihu.com/p/436727019">修改UE源码之配置第三方库</a><ul><li>Engine\Source\ThirdParty<ul><li>add<ul><li>PublicAdditionalLibraries.Add(XXX + “cublas.lib”)</li><li>PublicDelayLoadDLLs.Add(“cublas64_11.dll”)</li><li>RuntimeDependencies.Add(XXX + “bin&#x2F;“ + “cublas64_11.dll”)</li><li>PublicDefinitions.Add(“NV_CUDA&#x3D;1”)</li></ul></li><li>using<ul><li>AddEngineThirdPartyPrivateStaticDependencies(Target, “CUDA_V11”)</li></ul></li></ul></li></ul></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="/wild/2022/11/25/log/P_UE_C++_2.0/image-20220421162703622.png"></p><p>信息是一种能量，只有足够的信息，才能达到质变（Epic大钊）</p><h3 id="Build-Cmd"><a href="#Build-Cmd" class="headerlink" title="Build Cmd"></a>Build Cmd</h3><h4 id="UE项目工程"><a href="#UE项目工程" class="headerlink" title="UE项目工程"></a>UE项目工程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">set engine=D:\Software\UE_5.0<br>set project=D:\Work\Git\Library\PCG\PCG.uproject<br>set UBT=%engine%\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool<br>set Build=%engine%\Engine\Build\BatchFiles\Build.bat<br><br>cd /d %engine%<br><span class="hljs-meta prompt_"># </span><span class="language-bash">VisualStudio工程</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">UBT% -projectfiles -project=%project% -game -engine -progress -2019</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">VScode工程</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">UBT% -projectfiles -vscode -project=%project% -game engine -progress -2022</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Editor Development编译模式</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">Build% XXXEditor Win64 Development %project% -waitmutex</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://zhuanlan.zhihu.com/p/539289189">避免引擎编译时 “Waiting for ‘git status’ command” 的方法</a></li></ul><h4 id="UE源码工程"><a href="#UE源码工程" class="headerlink" title="UE源码工程"></a>UE源码工程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">@echo off<br><br>set UE5=%~dp0<br>set UBTProject=%UE5%Engine\Source\Programs\UnrealBuildTool\UnrealBuildTool.csproj<br>set UBT=%UE5%\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool<br><br>cd /d %UE5%<br>@REM compile UBT<br>dotnet build --configuration Development %UBTProject%<br>@REM generate projectfiles<br><span class="hljs-meta prompt_">%</span><span class="language-bash">UBT% -projectfiles -vscode -engine -dotnet</span><br></code></pre></td></tr></table></figure><h4 id="RunUAT编译"><a href="#RunUAT编译" class="headerlink" title="RunUAT编译"></a>RunUAT编译</h4><ul><li><a href="https://github.com/botman99/ue4-unreal-automation-tool">unreal-automation-tool</a><ul><li>RunUAT.bat -List</li><li>RunUAT.bat BuildGame -Help</li></ul></li><li><a href="https://blog.csdn.net/weixin_44215538/article/details/123967989">UE4中使用Cmd升级插件版本</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">RunUAT.bat BuildPlugin -plugin=&quot;D:\xxx.uplugin&quot; -package=&quot;D:\xxx&quot;<br></code></pre></td></tr></table></figure></li><li><a href="https://blog.csdn.net/qq_18345843/article/details/114169813">UE4 Slate独立引用程序</a><ul><li>应用程序依赖特定文件结构和Shader着色器</li><li>建议直接打包运行器，作为已经配置完成的一栏</li><li>RunUAT脚本工具打包</li><li>dotnet工具</li><li><a href="https://docs.unrealengine.com/4.27/zh-CN/ProductionPipelines/BuildTools/AutomationTool/HowTo/AddingAutomationProjects/">AutomationTool</a></li><li><a href="https://docs.unrealengine.com/4.27/zh-CN/ProductionPipelines/BuildTools/AutomationTool/BuildGraph">BuildGraph</a></li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><p><a href="https://zhuanlan.zhihu.com/p/22813908">《InsideUE4》目录</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1MF411z78h">UE_反射编程基础合集</a></p></li><li><p><a href="https://www.bilibili.com/video/BV19L411L7XA">UE_Slate编程合集</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1BM4y1A7di">在虚幻引擎UE中实现ECharts图表</a></p></li><li></li><li><p><a href="https://www.youtube.com/watch?v=DqqQ_wiWYOw">UE4 Modules</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1SV411a7hB">UE4 Modules</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1ZT4y1N7HM">UE4 Python C ++自动化提高生产力</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1NA411L7x4">UE4游戏框架：从int main()到BeginPlay</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1ea4y1Y7kK">UE4引擎初始化原理详细讲解</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1yP4y1H7mg">虚幻编译系统详解</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1C7411F7RF">虚幻C++进阶之路 Epic大钊</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1ED4y1D7Sf">虚幻引擎GamePlay框架理解与应用</a></p></li><li><p>VT</p><ul><li><a href="https://www.bilibili.com/video/BV1KK411L7Rg">Virtual Texture（虚拟纹理）的理解和应用</a></li><li><a href="https://zhuanlan.zhihu.com/p/147213120">Unreal Virtual Texture 源码导读</a></li></ul></li><li><p><a href="https://zhuanlan.zhihu.com/p/115658802">Eye Adaptation综述及Unreal实现解析</a></p></li></ul><h3 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h3><ul><li><a href="https://www.jianshu.com/p/50aa733c3c7f">UE4绘制简单三角形</a></li><li><a href="https://www.jianshu.com/p/48f81c91f477">UE4 创建Viewport</a></li><li><a href="https://www.jianshu.com/p/8146224269eb">UE4 自定义Shader 和 RHI</a></li></ul><h3 id="Landscape"><a href="#Landscape" class="headerlink" title="Landscape"></a>Landscape</h3><ul><li><p>FHoudiniLandscapeTranslator::ImportLandscapeData &#x3D;&gt; SetMaskLayer</p></li><li><p>FHoudiniLandscapeTranslator::BackupLandscapeToImageFiles  &#x3D;&gt; ExportHeightLayer</p></li><li><p>FHoudiniLandscapeTranslator::CreateOrUpdateLandscapeLayerData</p><ul><li>ULandscapeLayerInfoObject* LayerInfo &#x3D; GetLandscapeLayerInfoForLayer()</li><li>LayerInfo &#x3D; FindOrCreateLandscapeLayerInfoObject()</li></ul></li><li><p>FLandscapeLayer</p><ul><li>OnGetImportLayerCreateMenu    &#x2F;&#x2F;GUI Create<ul><li>OnImportLayerCreateClicked</li></ul></li></ul></li><li><p>Process</p><ul><li>ULandscapeLayerInfoObject &#x3D;&gt; create layerInfo package</li><li>Switch Material<ul><li>Import Layer from texture</li><li>Find or Create layerInfo</li><li>set layerInfo<ul><li>FHoudiniLandscapeTranslator::OutputLandscape_GenerateTile</li><li>TArray<FLandscapeImportLayerInfo> LayerInfos;</li><li>for (const auto&amp; ImportLayerInfo : LayerInfos)<ul><li>LandscapeActor-&gt;EditorLayerSettings.Add(FLandscapeEditorLayerSettings(ImportLayerInfo.LayerInfo))</li></ul></li></ul></li><li>create layerInfo<ul><li>FHoudiniLandscapeTranslator::CreateOrUpdateLandscapeLayerData</li><li>FHoudiniLandscapeTranslator::FindOrCreateLandscapeLayerInfoObject</li></ul></li></ul></li></ul></li><li><p>ALandscapeProxy</p><ul><li>ULandscapeInfo *LandscapeInfo &#x3D; Landscape-&gt;GetLandscapeInfo();</li></ul></li><li><p>ALandscape : public ALandscapeProxy</p><ul><li>Landscape &#x3D; World-&gt;SpawnActor<ALandscape>()</li><li>Landscape-&gt;Import()</li><li>ULandscapeInfo *LandscapeInfo &#x3D; Landscape-&gt;GetLandscapeInfo();</li><li>LandscapeInfo-&gt;UpdateLayerInfoMap(Landscape);</li><li>Landscape-&gt;RegisterAllComponents();</li></ul></li><li><p>Engine\Source\Editor\LandscapeEditor\Private\LandscapeEditorDetailCustomization_ImportLayers.cpp</p></li><li><p>Engine\Source\Editor\LandscapeEditor\Private\LandscapeEditorDetailCustomization_ImportExport.cpp</p></li><li><p>Engine\Source\Editor\LandscapeEditor\Private\LandscapeEditorDetailCustomization_TargetLayers.cpp</p><ul><li>OnTargetLayerDeleteClicked</li></ul></li><li><p>The import size (505×505) does not match the current Landscape extent (0×0), if you continue it will be padded&#x2F;clipped to fit</p></li><li><p>Engine\Source\Editor\LandscapeEditor\Private\LandscapeEdMode.cpp</p><ul><li>FEdModeLandscape::ChangeComponentSetting<ul><li>TMap&lt;FGuid, TArray<uint16>&gt; HeightDataPerLayers;</li><li>TMap&lt;FGuid, TArray<FLandscapeImportLayerInfo>&gt; ImportMaterialLayerInfosPerLayers;</li><li>auto ExtractHeightmapWeightmapContent &#x3D; [&amp;](TArray<uint16>&amp; OutHeightData, TArray<FLandscapeImportLayerInfo>&amp; OutImportMaterialLayerInfos)</li><li>if (HasLandscapeLayersContent())  &#x2F;&#x2F; edit layers<ul><li>ExtractHeightmapWeightmapContent(HeightData, ImportMaterialLayerInfos);</li><li>ImportMaterialLayerInfosPerLayers.Add(FGuid(), MoveTemp(ImportMaterialLayerInfos));   &#x2F;&#x2F; add data</li><li>NewLandscape-&gt;Import(FGuid::NewGuid(), NewMinX, NewMinY, NewMaxX, NewMaxY, NumSubsections, SubsectionSizeQuads, HeightDataPerLayers, *OldLandscape-&gt;ReimportHeightmapFilePath, ImportMaterialLayerInfosPerLayers, ELandscapeImportAlphamapType::Additive, LandscapeLayers);</li><li>Import    &#x2F;&#x2F; create new landscape components<ul><li>Import(const FGuid&amp; InGuid, int32 InMinX, int32 InMinY, int32 InMaxX, int32 InMaxY, int32 InNumSubsections, int32 InSubsectionSizeQuads, const TMap&lt;FGuid, TArray<uint16>&gt;&amp; InImportHeightData, const TCHAR* const InHeightmapFileName, const TMap&lt;FGuid, TArray<FLandscapeImportLayerInfo>&gt;&amp; InImportMaterialLayerInfos, ELandscapeImportAlphamapType InImportMaterialLayerType, const TArray<struct FLandscapeLayer>* InImportLayers &#x3D; nullptr);</li><li>const TMap&lt;FGuid, TArray<FLandscapeImportLayerInfo>&gt;&amp; InImportMaterialLayerInfos</li><li>ALandscapeProxy::Import<ul><li>Source\Runtime\Landscape\Private\LandscapeEdit.cpp</li></ul></li></ul></li><li>Import    &#x2F;&#x2F; Houdini Engine Import Method<ul><li>FHoudiniLandscapeTranslator::UpdateLandscapeMaterialLayers(ALandscape* InLandscape,const TArray<FLandscapeImportLayerInfo>&amp; LayerInfos)</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="Foliage-Landscape"><a href="#Foliage-Landscape" class="headerlink" title="Foliage || Landscape"></a>Foliage || Landscape</h3><ul><li>FoliageType<ul><li>LandscapeLayers</li></ul></li><li>Source\Editor\FoliageEdit\Private\FoliageEdMode.cpp<ul><li>GetMaxHitWeight()<ul><li>ULandscapeComponent* HitLandscape</li><li>float HitWeight &#x3D; HitLandscape-&gt;GetLayerWeightAtLocation(Location,LayerName,LayerCache)</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unreal</tag>
      
      <tag>C++</tag>
      
      <tag>UE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Slate C++ 笔记</title>
    <link href="/wild/2022/11/22/lab/S_Unreal_Slate/"/>
    <url>/wild/2022/11/22/lab/S_Unreal_Slate/</url>
    
    <content type="html"><![CDATA[<h3 id="Slate"><a href="#Slate" class="headerlink" title="Slate"></a>Slate</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/377745543">https://zhuanlan.zhihu.com/p/377745543</a><ul><li>SAssignNew和SNew都能创建SWidget</li><li>SNew返回TSharedRef</li><li>SAssignNew返回TSharedPtr<ul><li>AsShared()    &#x2F;&#x2F;TSharedPtr转TSharedRef</li><li>(TSharedPtr<SButton>)Button-&gt;AsShared()</li></ul></li><li>但是因为TSharedRef可以被隐式转换为TSharedPtr，所以对于TSharedPtr来说用哪个都一样</li><li>对于TSharedRef来说只能使用SNew。后面加点表示构造时要传入的参数。</li></ul></li><li><a href="https://blog.csdn.net/mrbaolong/article/details/121450331">SCompoundWidget</a></li><li>Construct || ChildSlot<ul><li>SCustomSlate : public SCompoundWidget<ul><li>SLATE_BEGIN_ARGS(SCSVtoSVG){}</li><li>SLATE_END_ARGS()</li><li>void Construct(const FArguments&amp; Args)<ul><li>this-&gt;ChildSlot[SNew(SVerticalBox)]</li></ul></li></ul></li></ul></li><li>SWindow : SCompoundWidget : SWidget<ul><li>window &#x3D; SNew(SWindow)<ul><li>[SNew(SButton),SNew(SWidget)…]</li></ul></li><li>FSlateApplication::Get().AddWindow(window.ToSharedRef())</li></ul></li><li>SButton : SBorder : SCompoundWidget<ul><li>SetOnClicked(FOnclicked)</li><li>OnClicked(FOnclicked::CreateLambda(Lambda-&gt;FReply))<ul><li>FOnclicked::CreateLambda(Lambda-&gt;FReply)</li><li>FOnclicked::CreateStatic(&amp;Func)</li><li>FOnclicked::CreateRaw()</li></ul></li></ul></li><li>STextBlock<ul><li>Font || Font Style<ul><li>Font(FCoreStyle::GetDefaultFontStyle(“Italic”,25))</li><li>FSlateFontInfo<ul><li>FCoreStyle::GetDefaultFontStyle(TypefaceFontName,InSize)</li><li>FAppStyle::Get().GetFontStyle(“LargeFont”)</li></ul></li><li>TypefaceFont<ul><li>Regular</li><li>Italic        &#x2F;&#x2F; 斜体</li><li>Bold          &#x2F;&#x2F; 粗体</li><li>Light</li><li>VeryLight</li><li>Black         &#x2F;&#x2F; 黑体</li></ul></li><li>FCompositeFont<ul><li>FCoreStyle::GetDefaultFont()</li><li>FLegacySlateFontInfoCache::Get().GetDefaultFont();-</li><li>FLegacySlateFontInfoCache::GetDefaultFont()</li></ul></li></ul></li><li>Runtime\AppFramework\Private\Framework\Testing\SStarshipGallery.cpp<ul><li>ConstructTextGallery()</li><li>Font(FAppStyle::Get().GetFontStyle(“LargeFont”))</li><li>ConstructIconsGallery()</li><li>ConstructColorsGallery()</li></ul></li></ul></li><li>SCustomWidget : SWidget<ul><li><a href="https://www.youtube.com/watch?v=je3Zid_OmGg">https://www.youtube.com/watch?v=je3Zid_OmGg</a></li><li>Construct(const FArguments&amp; InArgs)<ul><li>ChildSlot[]</li></ul></li></ul></li><li>SOverlay<ul><li>+SOverlay::Slot()<ul><li>SNew(SWidget)</li></ul></li></ul></li><li>SHorizontalBox<ul><li>+SHorizontalBox::Slot()<ul><li>SNew(SWidget)</li></ul></li></ul></li><li>IDetailsView<ul><li>SCSVtoSVG 参考Source\Editor\CSVtoSVG\Private\SCSVtoSVG.cpp<ul><li>FDetailsViewArgs DetailsViewArgs</li><li>TSharedPtr<IDetailsView> DetailsView &#x3D; PropertyEditorModule.CreateDetailView(DetailsViewArgs)</li><li>DetailsView-&gt;SetObject(Arguments.Get())</li></ul></li></ul></li><li>SDockTab<ul><li>SDockingTabStack<ul><li>Source\Runtime\Slate\Private\Framework\Docking\SDockingTabStack.cpp</li><li>OnExtendContextMenu   &#x2F;&#x2F; 自定义右键菜单</li><li>TabWellRightClicked()</li><li>MakeContextMenu() &#x2F;&#x2F; 右键菜单<ul><li>FMenuBuilder  &#x2F;&#x2F; 构建菜单</li></ul></li></ul></li></ul></li><li>Drag || Drop<ul><li>Source\Editor\UnrealEd\Public\DragAndDrop<ul><li>ActorDragDropOp</li><li>AssetDragDropOp</li></ul></li></ul></li><li>Style<ul><li>FSlateFontInfo<ul><li>FCoreStyle::GetDefaultFontStyle(FName(TEXT(“Regular”)), 8))</li></ul></li><li>FSlateBrush<ul><li>FCoreStyle::Get().GetDefaultBrush()</li><li>FCoreStyle::Get().GetBrush(“Border”)</li></ul></li><li>FSlateIcon<ul><li>FSlateIcon(FTaSlateStyle::GetStyleSetName(),IconName,NAME_None,IconName)</li></ul></li><li>FSlateStyleSet<ul><li>static const ISlateStyle&amp; Get()</li><li>TSharedRef<FSlateStyleSet> Style &#x3D; MakeShareable(new FSlateStyleSet(“TaSlateStyle”))</li><li>Style-&gt;SetContentRoot()</li><li>Style-&gt;Set(“XXX.Logo”, new IMAGE_BRUSH(TEXT(“Logo”), Icon32x32))</li><li>FSlateStyleRegistry::RegisterSlateStyle(*Style)</li></ul></li></ul></li><li>Toolbar<ul><li>Button<ul><li>Section.AddEntry(FToolMenuEntry::InitToolBarButton(FTaSlateCommands::Get().OpenTaToolsCommand)).SetCommandList(OpenTaToolsCommandList)</li></ul></li><li>CombButton</li></ul></li><li>SSegmentedControl<bool><ul><li>Source\Editor\GameProjectGeneration\Private\SNewClassDialog.cpp</li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1Ha411s7LA">UE5HoudiniUI节点编辑器Demo插件解析</a></p></li><li><p><a href="https://www.bilibili.com/video/BV19L411L7XA">UE_Slate编程合集</a></p></li><li><p><a href="https://blog.csdn.net/u011718663/article/details/117712832">UE4 Slate一 开篇</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/418944210">UE4编辑器Slate快速入门【开篇】</a></p></li><li><p><a href="https://www.cnblogs.com/shiroe/p/14826787.html">【UE4 C++】Slate 初探: Editor UI 与 Game UI </a></p></li><li><p><a href="https://easycomplex-tech.com/cnblog/Unreal-AssetEditor/">自定义资源编辑器 虚幻自定义资源编辑器开发</a></p></li><li><p><a href="https://blog.csdn.net/u013412391/article/details/107945507">【UE4编辑器扩展】学习图表编辑器（UEdGraph）：创建一个最简单的图表编辑器</a></p></li><li><p><a href="https://github.com/Eragon-Brisingr/XD_GraphEditor_Template">XD_GraphEditor_Template</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43844254/article/details/115161964">UE4自定义资源和编辑器（五）：添加操作节点的通用命令</a></p></li><li><p>TAPython</p><ul><li><a href="https://github.com/cgerchenhp/UE_TAPython_Plugin_Release">TAPython</a></li><li><a href="https://www.tacolor.xyz/zh-cn/pages/TAPython.html">Doc</a></li><li><a href="https://www.tacolor.xyz/Howto/Manipulate_Material_Expression_Nodes_Of_Material_With_Python_In_UE.html">Manipulate Material Expression Nodes of Material with Python in Unreal Engine</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unreal</tag>
      
      <tag>UE5</tag>
      
      <tag>C++</tag>
      
      <tag>Slate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 打开文件窗口</title>
    <link href="/wild/2022/11/21/lab/S_Unreal_OpenWindow/"/>
    <url>/wild/2022/11/21/lab/S_Unreal_OpenWindow/</url>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DesktopPlatformModule.h&quot;</span></span><br><br><span class="hljs-function">FString <span class="hljs-title">OpenDirectoryWindow</span><span class="hljs-params">(FString Title, FString DefaultPath)</span></span><br><span class="hljs-function"></span>&#123;<br>FString outStr = <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>IDesktopPlatform* DesktopPlatform = FDesktopPlatformModule::<span class="hljs-built_in">Get</span>();<br><span class="hljs-keyword">if</span> (DesktopPlatform)<br>&#123;<br><span class="hljs-type">bool</span> bOpened = DesktopPlatform-&gt;<span class="hljs-built_in">OpenDirectoryDialog</span>(<br>FSlateApplication::<span class="hljs-built_in">Get</span>().<span class="hljs-built_in">FindBestParentWindowHandleForDialogs</span>(<span class="hljs-literal">nullptr</span>),<br>Title,<br>DefaultPath,<br>outStr);<br>&#125;<br><span class="hljs-keyword">return</span> outStr;<br>&#125;<br><br><span class="hljs-function">FString <span class="hljs-title">OpenFileWindow</span><span class="hljs-params">(FString Title, FString DefaultPath, FString DefaultFile, FString FileTypes)</span></span><br><span class="hljs-function"></span>&#123;<br>TArray&lt;FString&gt; OpenedFiles;<br>FString outStr = <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>IDesktopPlatform* DesktopPlatform = FDesktopPlatformModule::<span class="hljs-built_in">Get</span>();<br><span class="hljs-keyword">if</span> (DesktopPlatform)<br>&#123;<br><span class="hljs-type">bool</span> bOpened = DesktopPlatform-&gt;<span class="hljs-built_in">OpenFileDialog</span>(<br>FSlateApplication::<span class="hljs-built_in">Get</span>().<span class="hljs-built_in">FindBestParentWindowHandleForDialogs</span>(<span class="hljs-literal">nullptr</span>),<br>Title,<br>DefaultPath,<br>DefaultFile,<br>FileTypes, <span class="hljs-comment">// TEXT(&quot;File|*.png;*raw;*r8&quot;),</span><br>EFileDialogFlags::None,<br>OpenedFiles);<br><br><span class="hljs-keyword">if</span> (bOpened &amp;&amp; OpenedFiles.<span class="hljs-built_in">Num</span>() &gt; <span class="hljs-number">0</span>)<br>&#123;<br>outStr = *OpenedFiles.<span class="hljs-built_in">Last</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> outStr;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unreal</tag>
      
      <tag>UE5</tag>
      
      <tag>Tool</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 保存纹理</title>
    <link href="/wild/2022/11/21/lab/S_Unreal_SaveTexture/"/>
    <url>/wild/2022/11/21/lab/S_Unreal_SaveTexture/</url>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;IImageWrapperModule.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ImageWrapperHelper.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Misc/FileHelper.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;AsyncImageExport.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Texture2D.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/TextureRenderTarget2D.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SaveTexture</span><span class="hljs-params">(UTexture2D* Texture, <span class="hljs-type">const</span> FString&amp; OutputPath)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (!Texture) <span class="hljs-keyword">return</span>;<br><br>IImageWrapperModule&amp; ImageWrapperModule = FModuleManager::<span class="hljs-built_in">Get</span>().<span class="hljs-built_in">LoadModuleChecked</span>&lt;IImageWrapperModule&gt;(<br><span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;ImageWrapper&quot;</span>));<br><span class="hljs-type">const</span> TSharedPtr&lt;IImageWrapper&gt; ImageWrapper = ImageWrapperModule.<span class="hljs-built_in">CreateImageWrapper</span>(EImageFormat::PNG);<br><br><span class="hljs-keyword">if</span> (ImageWrapper)<br>&#123;<br><span class="hljs-type">const</span> int32 width = Texture-&gt;<span class="hljs-built_in">GetSizeX</span>();<br><span class="hljs-type">const</span> int32 height = Texture-&gt;<span class="hljs-built_in">GetSizeY</span>();<br><br><span class="hljs-type">const</span> FColor* data = (FColor*)Texture-&gt;<span class="hljs-built_in">GetPlatformData</span>()-&gt;Mips[<span class="hljs-number">0</span>].BulkData.<span class="hljs-built_in">Lock</span>(LOCK_READ_WRITE);<br><br>ImageWrapper-&gt;<span class="hljs-built_in">SetRaw</span>(data,<br>                     Texture-&gt;<span class="hljs-built_in">GetPlatformData</span>()-&gt;Mips[<span class="hljs-number">0</span>].BulkData.<span class="hljs-built_in">GetBulkDataSize</span>(),<br>                     width, height,<br>                     ERGBFormat::BGRA, <span class="hljs-number">8</span>);<br><br><span class="hljs-type">const</span> TArray64&lt;uint8&gt;&amp; CompressedByteArray = ImageWrapper-&gt;<span class="hljs-built_in">GetCompressed</span>();<br><br>FFileHelper::<span class="hljs-built_in">SaveArrayToFile</span>(CompressedByteArray, *OutputPath);<br><br><span class="hljs-built_in">UE_LOG</span>(LogTemp, Log, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Export Texture to %s&quot;</span>), *OutputPath);<br>Texture-&gt;<span class="hljs-built_in">GetPlatformData</span>()-&gt;Mips[<span class="hljs-number">0</span>].BulkData.<span class="hljs-built_in">Unlock</span>();<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SaveRenderTarget</span><span class="hljs-params">(UTextureRenderTarget2D* Texture, <span class="hljs-type">const</span> FString&amp; OutputPath)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (!Texture) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-type">const</span> int32 width = Texture-&gt;SizeX;<br><span class="hljs-type">const</span> int32 height = Texture-&gt;SizeY;<br><br>TArray&lt;FColor&gt; Data;<br>Data.<span class="hljs-built_in">AddUninitialized</span>(width * height);<br><br><span class="hljs-keyword">if</span> (Texture-&gt;<span class="hljs-built_in">GameThread_GetRenderTargetResource</span>()-&gt;<span class="hljs-built_in">ReadPixelsPtr</span>(Data.<span class="hljs-built_in">GetData</span>(), <span class="hljs-built_in">FReadSurfaceDataFlags</span>()))<br>&#123;<br>IImageWrapperModule&amp; ImageWrapperModule = FModuleManager::<span class="hljs-built_in">Get</span>().<span class="hljs-built_in">LoadModuleChecked</span>&lt;IImageWrapperModule&gt;(<br><span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;ImageWrapper&quot;</span>));<br><span class="hljs-type">const</span> TSharedPtr&lt;IImageWrapper&gt; ImageWrapper = ImageWrapperModule.<span class="hljs-built_in">CreateImageWrapper</span>(EImageFormat::PNG);<br><span class="hljs-keyword">if</span> (!ImageWrapper.<span class="hljs-built_in">Get</span>()) <span class="hljs-keyword">return</span>;<br><br>ImageWrapper-&gt;<span class="hljs-built_in">SetRaw</span>(Data.<span class="hljs-built_in">GetData</span>(), Data.<span class="hljs-built_in">GetAllocatedSize</span>(),<br>                     width, height,<br>                     ERGBFormat::BGRA, <span class="hljs-number">8</span>);<br><span class="hljs-type">const</span> TArray64&lt;uint8&gt;&amp; CompressedByteArray = ImageWrapper-&gt;<span class="hljs-built_in">GetCompressed</span>(<span class="hljs-number">100</span>);<br>FFileHelper::<span class="hljs-built_in">SaveArrayToFile</span>(CompressedByteArray, *OutputPath);<br><span class="hljs-built_in">UE_LOG</span>(LogTemp, Log, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Export RenderTarget to %s&quot;</span>), *OutputPath);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unreal</tag>
      
      <tag>UE5</tag>
      
      <tag>Tool</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE5 Compute Shader 入门</title>
    <link href="/wild/2022/11/20/lab/S_Unreal_ShaderCompute/"/>
    <url>/wild/2022/11/20/lab/S_Unreal_ShaderCompute/</url>
    
    <content type="html"><![CDATA[<h3 id="Compute-Shader"><a href="#Compute-Shader" class="headerlink" title="Compute Shader"></a>Compute Shader</h3><ul><li>添加Shader文件映射</li><li>创建Shader，继承自FGlobalShader</li><li>使用RDG创建资源</li></ul><h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><h4 id="FRHICommandListImmediate"><a href="#FRHICommandListImmediate" class="headerlink" title="FRHICommandListImmediate"></a>FRHICommandListImmediate</h4><ul><li>ENQUEUE_RENDER_COMMAND(CommandList)([](FRHICommandListImmediate&amp; RHICmdList){})</li><li>DispatchComputeShader()</li><li>CreateVertexShader()</li><li>CreatePixelShader()</li><li>CreateComputeShader()</li><li>CreateComputeFence()</li><li>CreateGPUFence()</li><li>CreateUniformBuffer()</li><li>CreateAndLockIndexBuffer()</li><li>LockIndexBuffer()</li><li>UnLockIndexBuffer()</li><li>CopyBuffer()</li><li>CopyTexture()</li><li>CreateUnorderedAccessView()</li><li>CreateShaderResourceView()</li><li>CalcTexture2DPlatformSize()</li><li>RHICreateTexture2D()</li><li>CopySharedMips()</li><li>GenerateMips()</li><li>LockTexture2D()</li><li>UnLockTexture2D()</li><li>SuspendRendering()</li><li>ResumeRendering()</li><li>ExecuteCommandList()</li></ul><h4 id="FRDGBuilder"><a href="#FRDGBuilder" class="headerlink" title="FRDGBuilder"></a>FRDGBuilder</h4><ul><li>FRDGBuilder GraphBuilder(RHICmdList)</li><li>FComputeShaderUtils::AddPass(GraphBuilder,computeShader)</li><li>GraphBuilder.QueueTextureExtraction(RDGRenderTarget, &amp;PooledRenderTarget)</li><li>GraphBuilder.QueueBufferExtraction(RDGRenderTarget, &amp;PooledBuffer)</li><li>GraphBuilder.Execute()</li></ul><h4 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h4><ul><li>Source\Developer\ShaderCompilerCommon\Private\HlslLexer.h</li><li>AppendStructuredBuffer</li><li>RWStructuredBuffer</li><li>StructuredBuffer</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>TaSimpleColorCS.usf<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;/Engine/Public/Platform.ush&quot;</span></span><br>uint2 TextureSize;<br>RWTexture2D&lt;float4&gt; OutputTexture;<br><br>[<span class="hljs-built_in">numthreads</span>(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainCS</span><span class="hljs-params">(uint3 id : SV_DispatchThreadID)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">float</span> sizeX, sizeY;<br>OutputTexture.<span class="hljs-built_in">GetDimensions</span>(sizeX, sizeY);<br><span class="hljs-keyword">if</span> (id.x &lt; sizeX &amp;&amp; id.y &lt; sizeY)<br>&#123;<br>float2 uv = <span class="hljs-built_in">float2</span>(id.x / sizeX, id.y / sizeY);<br>OutputTexture[id.xy] = <span class="hljs-built_in">float4</span>(uv, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>TaCompute.cpp<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TaCompute.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Misc/FileHelper.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HAL/FileManager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Modules/ModuleManager.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;IImageWrapper.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;IImageWrapperModule.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Texture2D.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/TextureRenderTarget2D.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;GlobalShader.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RenderGraphUtils.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ShaderParameterStruct.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RenderGraphBuilder.h&quot;</span></span><br><br><span class="hljs-comment">// RDG 版本</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FComputeShaderRDG</span> : <span class="hljs-keyword">public</span> FGlobalShader<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">DECLARE_GLOBAL_SHADER</span>(FComputeShaderRDG)<br><span class="hljs-built_in">SHADER_USE_PARAMETER_STRUCT</span>(FComputeShaderRDG, FGlobalShader)<br><br><span class="hljs-built_in">BEGIN_SHADER_PARAMETER_STRUCT</span>(FParameters,)<br><span class="hljs-built_in">SHADER_PARAMETER</span>(FIntPoint, TextureSize)<br><span class="hljs-built_in">SHADER_PARAMETER_RDG_TEXTURE_UAV</span>(RWTexture2D&lt;float4&gt;, OutputTexture) <span class="hljs-comment">// RDG UAV</span><br><span class="hljs-built_in">END_SHADER_PARAMETER_STRUCT</span>()<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> FIntVector ThreadGroupSize = <span class="hljs-built_in">FIntVector</span>(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">ShouldCompilePermutation</span><span class="hljs-params">(<span class="hljs-type">const</span> FGlobalShaderPermutationParameters&amp; Parameters)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">RHISupportsComputeShaders</span>(Parameters.Platform);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">ModifyCompilationEnvironment</span><span class="hljs-params">(<span class="hljs-type">const</span> FGlobalShaderPermutationParameters&amp; Parameters,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         FShaderCompilerEnvironment&amp; Environment)</span></span><br><span class="hljs-function"></span>&#123;<br>Environment.<span class="hljs-built_in">SetDefine</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;THREADGROUPSIZE_X&quot;</span>), ThreadGroupSize.X);<br>Environment.<span class="hljs-built_in">SetDefine</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;THREADGROUPSIZE_Y&quot;</span>), ThreadGroupSize.Y);<br>Environment.<span class="hljs-built_in">SetDefine</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;THREADGROUPSIZE_Z&quot;</span>), ThreadGroupSize.Z);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">Execute</span><span class="hljs-params">(FRHICommandListImmediate&amp; RHICmdList, UTextureRenderTarget2D* renderTarget)</span></span><br><span class="hljs-function"></span>&#123;<br>int32 Width = renderTarget-&gt;SizeX;<br>int32 Height = renderTarget-&gt;SizeY;<br><span class="hljs-keyword">if</span> (Width &lt; <span class="hljs-number">1</span> || Height &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-function">FRDGBuilder <span class="hljs-title">GraphBuilder</span><span class="hljs-params">(RHICmdList)</span></span>;<br><span class="hljs-function"><span class="hljs-type">const</span> TShaderMapRef&lt;FComputeShaderRDG&gt; <span class="hljs-title">ComputeShader</span><span class="hljs-params">(GetGlobalShaderMap(GMaxRHIFeatureLevel))</span></span>;<br><br><span class="hljs-comment">// create resource</span><br><span class="hljs-type">const</span> FRDGTextureDesc&amp; RenderTargetDesc = FRDGTextureDesc::<span class="hljs-built_in">Create2D</span>(<br><span class="hljs-built_in">FIntPoint</span>(Width, Height),<br>renderTarget-&gt;<span class="hljs-built_in">GetFormat</span>(),<br>FClearValueBinding::Black,<br>TexCreate_RenderTargetable |<br>TexCreate_ShaderResource | TexCreate_UAV);<br>FRDGTextureRef RDGRenderTarget = GraphBuilder.<span class="hljs-built_in">CreateTexture</span>(RenderTargetDesc, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;RDGRenderTarget&quot;</span>));<br><span class="hljs-function">FRDGTextureUAVDesc <span class="hljs-title">UAVDesc</span><span class="hljs-params">(RDGRenderTarget)</span></span>;<br><br><span class="hljs-comment">// set params</span><br>FParameters* PassParameters = GraphBuilder.<span class="hljs-built_in">AllocParameters</span>&lt;FParameters&gt;();<br>PassParameters-&gt;OutputTexture = GraphBuilder.<span class="hljs-built_in">CreateUAV</span>(UAVDesc);<br><br>uint32 GroupSizeX = FMath::<span class="hljs-built_in">DivideAndRoundUp</span>(Width, ThreadGroupSize.X);<br>uint32 GroupSizeY = FMath::<span class="hljs-built_in">DivideAndRoundUp</span>(Height, ThreadGroupSize.Y);<br><br>FComputeShaderUtils::<span class="hljs-built_in">AddPass</span>(<br>GraphBuilder,<br><span class="hljs-built_in">RDG_EVENT_NAME</span>(<span class="hljs-string">&quot;ComputeShaderRDG&quot;</span>),<br>ERDGPassFlags::Compute,<br>ComputeShader,<br>PassParameters,<br><span class="hljs-built_in">FIntVector</span>(GroupSizeX, GroupSizeY, <span class="hljs-number">1</span>));<br><br>TRefCountPtr&lt;IPooledRenderTarget&gt; PooledRenderTarget;<br>GraphBuilder.<span class="hljs-built_in">QueueTextureExtraction</span>(RDGRenderTarget, &amp;PooledRenderTarget);<br><br>GraphBuilder.<span class="hljs-built_in">Execute</span>();<br><br>RHICmdList.<span class="hljs-built_in">CopyTexture</span>(PooledRenderTarget-&gt;<span class="hljs-built_in">GetRenderTargetItem</span>().ShaderResourceTexture,<br>                       renderTarget-&gt;<span class="hljs-built_in">GetRenderTargetResource</span>()-&gt;TextureRHI, <span class="hljs-built_in">FRHICopyTextureInfo</span>());<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 旧版本</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FComputeShaderDemo</span> : <span class="hljs-keyword">public</span> FGlobalShader<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">DECLARE_GLOBAL_SHADER</span>(FComputeShaderDemo)<br><span class="hljs-built_in">SHADER_USE_PARAMETER_STRUCT</span>(FComputeShaderDemo, FGlobalShader)<br><br><span class="hljs-built_in">BEGIN_SHADER_PARAMETER_STRUCT</span>(FParameters,)<br><span class="hljs-built_in">SHADER_PARAMETER</span>(FIntPoint, TextureSize)<br><span class="hljs-built_in">SHADER_PARAMETER_UAV</span>(RWTexture2D&lt;float4&gt;, OutputTexture) <span class="hljs-comment">// Old UAV</span><br><span class="hljs-built_in">END_SHADER_PARAMETER_STRUCT</span>()<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> FIntVector ThreadGroupSize = <span class="hljs-built_in">FIntVector</span>(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">ShouldCompilePermutation</span><span class="hljs-params">(<span class="hljs-type">const</span> FGlobalShaderPermutationParameters&amp; Parameters)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">RHISupportsComputeShaders</span>(Parameters.Platform);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">ModifyCompilationEnvironment</span><span class="hljs-params">(<span class="hljs-type">const</span> FGlobalShaderPermutationParameters&amp; Parameters,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         FShaderCompilerEnvironment&amp; Environment)</span></span><br><span class="hljs-function"></span>&#123;<br>Environment.<span class="hljs-built_in">SetDefine</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;THREADGROUPSIZE_X&quot;</span>), ThreadGroupSize.X);<br>Environment.<span class="hljs-built_in">SetDefine</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;THREADGROUPSIZE_Y&quot;</span>), ThreadGroupSize.Y);<br>Environment.<span class="hljs-built_in">SetDefine</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;THREADGROUPSIZE_Z&quot;</span>), ThreadGroupSize.Z);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">Execute</span><span class="hljs-params">(FRHICommandListImmediate&amp; RHICmdList, UTextureRenderTarget2D* renderTarget)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">check</span>(<span class="hljs-built_in">IsInRenderingThread</span>());<br><span class="hljs-keyword">if</span> (!renderTarget) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-function"><span class="hljs-type">const</span> TShaderMapRef&lt;FComputeShaderDemo&gt; <span class="hljs-title">computeShader</span><span class="hljs-params">(GetGlobalShaderMap(GMaxRHIFeatureLevel))</span></span>;<br>RHICmdList.<span class="hljs-built_in">SetComputeShader</span>(computeShader.<span class="hljs-built_in">GetComputeShader</span>());<br><br>int32 Width = renderTarget-&gt;SizeX;<br>int32 Height = renderTarget-&gt;SizeY;<br><span class="hljs-keyword">if</span> (Width &lt; <span class="hljs-number">1</span> || Height &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">// create gpu resource</span><br><span class="hljs-function">FRHIResourceCreateInfo <span class="hljs-title">TextureInfo</span><span class="hljs-params">(TEXT(<span class="hljs-string">&quot;TextureInfo&quot;</span>))</span></span>;<br><span class="hljs-type">const</span> FTexture2DRHIRef GPUOutTexture = <span class="hljs-built_in">RHICreateTexture2D</span>(<br>Width, Height, renderTarget-&gt;<span class="hljs-built_in">GetFormat</span>(), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>TexCreate_ShaderResource | ETextureCreateFlags::UAV, TextureInfo);<br>FUnorderedAccessViewRHIRef GPUOutTextureUAV = <span class="hljs-built_in">RHICreateUnorderedAccessView</span>(GPUOutTexture);<br><br>FParameters PassParameters;<br>PassParameters.OutputTexture = GPUOutTextureUAV;<br>PassParameters.TextureSize = <span class="hljs-built_in">FIntPoint</span>(Width, Height);<br><br>uint32 GroupSizeX = FMath::<span class="hljs-built_in">DivideAndRoundUp</span>(Width, ThreadGroupSize.X);<br>uint32 GroupSizeY = FMath::<span class="hljs-built_in">DivideAndRoundUp</span>(Height, ThreadGroupSize.Y);<br>FComputeShaderUtils::<span class="hljs-built_in">Dispatch</span>(RHICmdList, computeShader, PassParameters, <span class="hljs-built_in">FIntVector</span>(GroupSizeX, GroupSizeY, <span class="hljs-number">1</span>));<br><br>RHICmdList.<span class="hljs-built_in">CopyTexture</span>(GPUOutTexture,<br>                       renderTarget-&gt;<span class="hljs-built_in">GetRenderTargetResource</span>()-&gt;TextureRHI,<br>                       <span class="hljs-built_in">FRHICopyTextureInfo</span>());<br><br>GPUOutTextureUAV.<span class="hljs-built_in">SafeRelease</span>();<br>&#125;<br>&#125;;<br><br><span class="hljs-built_in">IMPLEMENT_GLOBAL_SHADER</span>(FComputeShaderRDG, <span class="hljs-string">&quot;/TaTools/Private/TaSimpleColorCS.usf&quot;</span>, <span class="hljs-string">&quot;MainCS&quot;</span>, SF_Compute);<br><span class="hljs-built_in">IMPLEMENT_GLOBAL_SHADER</span>(FComputeShaderDemo, <span class="hljs-string">&quot;/TaTools/Private/TaSimpleColorCS.usf&quot;</span>, <span class="hljs-string">&quot;MainCS&quot;</span>, SF_Compute);<br><br><span class="hljs-comment">// 蓝图调用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">UTaCompute::RunComputeShader</span><span class="hljs-params">(UTextureRenderTarget2D* Texture)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">ENQUEUE_RENDER_COMMAND</span>(CommandList)(<br>[Texture](FRHICommandListImmediate&amp; RHICmdList)<br>&#123;<br>FComputeShaderRDG::<span class="hljs-built_in">Execute</span>(RHICmdList, Texture);<br>&#125;<br>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>TaCompute.h<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;CoreMinimal.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;RHICommandList.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Engine/Texture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TaCompute.generated.h&quot;</span></span><br><br><span class="hljs-built_in">UCLASS</span>()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UTaCompute</span> : <span class="hljs-keyword">public</span> UObject<br>&#123;<br><span class="hljs-built_in">GENERATED_BODY</span>()<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">UFUNCTION</span>(BlueprintCallable, Category=<span class="hljs-string">&quot;Compute Shader&quot;</span>)<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">RunComputeShader</span><span class="hljs-params">(UTextureRenderTarget2D* Texture)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>Module.cpp 添加Shader路径映射<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FTaShaderModule::StartupModule</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    FString PluginShaderDir = FPaths::<span class="hljs-built_in">Combine</span>(IPluginManager::<span class="hljs-built_in">Get</span>().<span class="hljs-built_in">FindPlugin</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;TaTools&quot;</span>))-&gt;<span class="hljs-built_in">GetBaseDir</span>(), <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;Shaders&quot;</span>));<br>    <span class="hljs-built_in">AddShaderSourceDirectoryMapping</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;/TaTools&quot;</span>), PluginShaderDir);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/548069234">自定义ComputeShader</a></li><li><a href="https://www.bilibili.com/video/BV1Gi4y1U7F7">ComputeShader 裁剪</a></li><li><a href="https://www.bilibili.com/video/BV1ey4y1q7s4">虚幻引擎移动端ComputeShader的应用</a></li><li><a href="https://www.bilibili.com/read/cv8755619">Unreal Compute Shader 使用流程笔记</a></li><li><a href="https://www.bilibili.com/video/BV1qY4y1r7DY">在UE4.26里使用ComputeShader生成一张纯色贴图</a></li><li><a href="https://github.com/blueroseslol/BRPlugins">https://github.com/blueroseslol/BRPlugins</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/sm5-object-appendstructuredbuffer">https://learn.microsoft.com/zh-cn/windows/win32/direct3dhlsl/sm5-object-appendstructuredbuffer</a></li><li><a href="https://github.com/AyoubKhammassi/CustomComputeShaders">https://github.com/AyoubKhammassi/CustomComputeShaders</a></li><li><a href="https://medium.com/realities-io/using-compute-shaders-in-unreal-engine-4-f64bac65a907">Using Compute Shaders in Unreal Engine 4</a></li><li><a href="http://www.valentinkraft.de/compute-shader-in-unreal-tutorial/">COMPUTE SHADER IN UNREAL [TUTORIAL]</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unreal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shader</tag>
      
      <tag>Unreal</tag>
      
      <tag>UE5</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Marching Square 网格生成</title>
    <link href="/wild/2022/09/28/lab/S_Unity_Marching_Square/"/>
    <url>/wild/2022/09/28/lab/S_Unity_Marching_Square/</url>
    
    <content type="html"><![CDATA[<h3 id="Marching-Squares"><a href="#Marching-Squares" class="headerlink" title="Marching Squares"></a>Marching Squares</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>输入点阵</li><li>划分Grid</li><li>计算16种组合</li><li>参考图<br>  <img src="/wild/2022/09/28/lab/S_Unity_Marching_Square/image-1669619460361.png"><br>  <img src="/wild/2022/09/28/lab/S_Unity_Marching_Square/image-1669435517692.png"></li></ul><h4 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h4><ul><li>计算16种组合的Mesh形态</li><li>生成Mesh的点，防止重复</li><li>顺时针生成Mesh</li><li>示意图<br>  <img src="/wild/2022/09/28/lab/S_Unity_Marching_Square/image-1669686980244.png"><br>  <img src="/wild/2022/09/28/lab/S_Unity_Marching_Square/image-1669634695799.png"><br>  <img src="/wild/2022/09/28/lab/S_Unity_Marching_Square/image-1669706248953.png"></li><li>面数密度和输入纹理一致，有待优化</li></ul><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><ul><li>Convex对比</li><li>Metaball</li><li>Dual Contouring</li></ul><h4 id="Marching-Cubes"><a href="#Marching-Cubes" class="headerlink" title="Marching Cubes"></a>Marching Cubes</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.redblobgames.com/grids/hexagons/">https://www.redblobgames.com/grids/hexagons/</a></li><li>程序化洞穴生成<ul><li>细胞自动机算法生成洞穴</li><li><a href="https://blog.csdn.net/qq_33288536/article/details/81915537">https://blog.csdn.net/qq_33288536/article/details/81915537</a></li></ul></li><li>Marching Squares<ul><li><a href="https://www.youtube.com/playlist?list=PLFt_AvWsXl0eZgMK_DT5_biRkWXftAOf9">Procedural Cave Generation</a></li><li><a href="https://github.com/SebLague/Procedural-Cave-Generation">Procedural Cave Generation</a></li><li><a href="https://www.bilibili.com/video/BV1aY4y1x73j">【Unity】Marching Squares 原理与应用</a></li><li><a href="https://www.bilibili.com/video/BV1Me4y1172w">【城镇叠叠乐】用Unity实现Townscaper</a></li><li><a href="https://www.bilibili.com/video/BV1GA411v7uw">小屋编程——Marching Squares</a></li><li><a href="https://www.bilibili.com/video/BV18Z4y1D7aD">How Computers Draw Weird Shapes (Marching Squares)</a></li></ul></li><li>Marching Cubes<ul><li><a href="https://github.com/SebLague/Marching-Cubes">SebLague&#x2F;Marching-Cubes</a></li><li><a href="https://www.bilibili.com/video/BV1iL4y1K74G">【Unity】Marching Cubes 原理与应用</a></li><li><a href="https://www.bilibili.com/video/BV1Sv4y1M7yY">【Unity】基于Marching Cubes的无尽世界生成</a></li><li><a href="https://www.bilibili.com/video/BV1tz4y1R71k">图解marching cubes算法</a></li><li><a href="https://www.bilibili.com/video/BV1ba411K77d">How to do Marching Cubes</a></li><li><a href="https://www.bilibili.com/video/BV15e4y1Z7U1">气象数据可视化——等值面的 Marching Cube 算法</a></li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>MarchingSquare.cs<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MarchingSquare</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Quad</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">byte</span> State;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> GuideOffset = <span class="hljs-number">0.5f</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Quad</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b, <span class="hljs-built_in">int</span> c, <span class="hljs-built_in">int</span> d</span>)</span><br>        &#123;<br>            State = (<span class="hljs-built_in">byte</span>) (a | b &lt;&lt; <span class="hljs-number">1</span> | c &lt;&lt; <span class="hljs-number">2</span> | d &lt;&lt; <span class="hljs-number">3</span>);<br>        &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Point</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">uint</span> Hash;<br>        <span class="hljs-keyword">public</span> Vector3 Position;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Point</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y, <span class="hljs-built_in">int</span> index, Vector3 pos</span>)</span><br>        &#123;<br>            Hash = GetHash(x, y, index);<br>            Position = pos;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-built_in">uint</span> <span class="hljs-title">GetHash</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y, <span class="hljs-built_in">int</span> index</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// index 0-7</span><br>            <span class="hljs-comment">// x remap</span><br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span> || index == <span class="hljs-number">1</span> || index == <span class="hljs-number">2</span>)<br>            &#123;<br>                x = x * <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">3</span> || index == <span class="hljs-number">7</span>)<br>            &#123;<br>                x = x * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">4</span> || index == <span class="hljs-number">5</span> || index == <span class="hljs-number">6</span>)<br>            &#123;<br>                x = x * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// y remap</span><br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span> || index == <span class="hljs-number">7</span> || index == <span class="hljs-number">6</span>)<br>            &#123;<br>                y = y * <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">1</span> || index == <span class="hljs-number">5</span>)<br>            &#123;<br>                y = y * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">2</span> || index == <span class="hljs-number">3</span> || index == <span class="hljs-number">4</span>)<br>            &#123;<br>                y = y * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> (<span class="hljs-built_in">uint</span>) x &lt;&lt; <span class="hljs-number">16</span> | (<span class="hljs-built_in">uint</span>) y;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> OriginPointGuide = <span class="hljs-number">0.1f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> QuadPointGuide = <span class="hljs-number">0.1f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> GuideOffset = <span class="hljs-number">0.5f</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> ShowGuide = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Dictionary&lt;<span class="hljs-built_in">uint</span>, <span class="hljs-built_in">uint</span>&gt; m_points;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> List&lt;Vector3&gt; m_positions;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> List&lt;Vector2&gt; m_uvs;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> List&lt;<span class="hljs-built_in">int</span>&gt; m_triangles;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_height;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MarchingSquare</span>()</span><br>    &#123;<br>        m_points = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">uint</span>, <span class="hljs-built_in">uint</span>&gt;(); <span class="hljs-comment">// hash-index</span><br>        m_positions = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;();<br>        m_uvs = <span class="hljs-keyword">new</span> List&lt;Vector2&gt;();<br>        m_triangles = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetPointsCount</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> m_positions.Count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mesh <span class="hljs-title">CreateMesh</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[,] map, Vector2 size, Vector2 center</span>)</span><br>    &#123;<br>        m_points.Clear();<br>        m_positions.Clear();<br>        m_uvs.Clear();<br>        m_triangles.Clear();<br><br>        m_width = map.GetLength(<span class="hljs-number">0</span>);<br>        m_height = map.GetLength(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-built_in">float</span> step = size.x / (m_width - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">float</span> minx = center.x - size.x / <span class="hljs-number">2.0f</span>;<br>        <span class="hljs-built_in">float</span> miny = center.y - size.y / <span class="hljs-number">2.0f</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; m_width - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; m_height - <span class="hljs-number">1</span>; j++)<br>            &#123;<br>                <span class="hljs-built_in">int</span> a = map[i, j];<br>                <span class="hljs-built_in">int</span> b = map[i + <span class="hljs-number">1</span>, j];<br>                <span class="hljs-built_in">int</span> c = map[i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>];<br>                <span class="hljs-built_in">int</span> d = map[i, j + <span class="hljs-number">1</span>];<br><br>                <span class="hljs-keyword">var</span> quad = <span class="hljs-keyword">new</span> Quad(a, b, c, d);<br>                Vector2 quadCenter = <span class="hljs-keyword">new</span> Vector2(minx + step / <span class="hljs-number">2</span> + i * step, miny + step / <span class="hljs-number">2</span> + j * step);<br><br>                ProcessQuadMesh(i, j, quad.State, quadCenter, step);<br>            &#125;<br>        &#125;<br><br>        Mesh mesh = <span class="hljs-keyword">new</span> Mesh();<br>        mesh.vertices = m_positions.ToArray();<br>        mesh.uv = m_uvs.ToArray();<br>        mesh.SetIndices(m_triangles, MeshTopology.Triangles, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> mesh;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-built_in">uint</span> <span class="hljs-title">AddPoint</span>(<span class="hljs-params">Point point</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">uint</span> pointHash = point.Hash;<br>        <span class="hljs-keyword">if</span> (m_points.ContainsKey(pointHash))<br>        &#123;<br>            <span class="hljs-keyword">return</span> m_points[pointHash];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">uint</span> num = (<span class="hljs-built_in">uint</span>) m_points.Count;<br><br>            <span class="hljs-built_in">float</span> x = (pointHash &gt;&gt; <span class="hljs-number">16</span>) / <span class="hljs-number">2.0f</span>;<br>            <span class="hljs-built_in">float</span> y = (pointHash &amp; <span class="hljs-number">0x0000FFFF</span>) / <span class="hljs-number">2.0f</span>;<br>            Vector2 uv = <span class="hljs-keyword">new</span> Vector2(x / (m_width - <span class="hljs-number">1</span>), y / (m_height - <span class="hljs-number">1</span>));<br><br>            m_points[pointHash] = num;<br>            m_positions.Add(point.Position);<br>            m_uvs.Add(uv);<br>            <span class="hljs-keyword">return</span> num;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddPolygon</span>(<span class="hljs-params"><span class="hljs-keyword">params</span> Point[] points</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> num = points.Length;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">3</span>)<br>        &#123;<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">1</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num == <span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-comment">// 1</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">1</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            <span class="hljs-comment">// 2</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">3</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num == <span class="hljs-number">5</span>)<br>        &#123;<br>            <span class="hljs-comment">// 1</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">1</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            <span class="hljs-comment">// 2</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">3</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>            <span class="hljs-comment">// 3</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">3</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">4</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num == <span class="hljs-number">6</span>)<br>        &#123;<br>            <span class="hljs-comment">// 1</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">0</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">1</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">5</span>]));<br>            <span class="hljs-comment">// 2</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">1</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">5</span>]));<br>            <span class="hljs-comment">// 3</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">4</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">5</span>]));<br>            <span class="hljs-comment">// 4</span><br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">2</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">3</span>]));<br>            m_triangles.Add((<span class="hljs-built_in">int</span>) AddPoint(points[<span class="hljs-number">4</span>]));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddPolygon</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y, List&lt;Vector2&gt; positions, <span class="hljs-keyword">params</span> <span class="hljs-built_in">int</span>[] indices</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> points = <span class="hljs-keyword">new</span> List&lt;Point&gt;();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> indices)<br>        &#123;<br>            <span class="hljs-keyword">var</span> pos = positions[index];<br>            Point point = <span class="hljs-keyword">new</span> Point(x, y, index, <span class="hljs-keyword">new</span> Vector3(pos.x, <span class="hljs-number">0</span>, pos.y));<br>            points.Add(point);<br>        &#125;<br><br>        AddPolygon(points.ToArray());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ProcessQuadMesh</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y, <span class="hljs-built_in">byte</span> state, Vector2 center, <span class="hljs-built_in">float</span> size</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> positions = <span class="hljs-keyword">new</span> List&lt;Vector2&gt;()<br>        &#123;<br>            <span class="hljs-keyword">new</span> Vector2(center.x - size / <span class="hljs-number">2</span>, center.y - size / <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> Vector2(center.x - size / <span class="hljs-number">2</span>, center.y),<br>            <span class="hljs-keyword">new</span> Vector2(center.x - size / <span class="hljs-number">2</span>, center.y + size / <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> Vector2(center.x, center.y + size / <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> Vector2(center.x + size / <span class="hljs-number">2</span>, center.y + size / <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> Vector2(center.x + size / <span class="hljs-number">2</span>, center.y),<br>            <span class="hljs-keyword">new</span> Vector2(center.x + size / <span class="hljs-number">2</span>, center.y - size / <span class="hljs-number">2</span>),<br>            <span class="hljs-keyword">new</span> Vector2(center.x, center.y - size / <span class="hljs-number">2</span>),<br>        &#125;;<br><br>        <span class="hljs-keyword">switch</span> (state)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0000</span>:<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0001</span>:<br>                <span class="hljs-comment">// line v1 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0010</span>:<br>                <span class="hljs-comment">// line v5 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0011</span>:<br>                <span class="hljs-comment">// line v1 v5</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0100</span>:<br>                <span class="hljs-comment">// line v3 v5</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0101</span>:<br>                <span class="hljs-comment">// 6</span><br>                <span class="hljs-comment">// line v1 v3</span><br>                <span class="hljs-comment">// line v5 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0110</span>:<br>                <span class="hljs-comment">// line v3 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b0111</span>:<br>                <span class="hljs-comment">// 7</span><br>                <span class="hljs-comment">// line v1 v3</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1000</span>:<br>                <span class="hljs-comment">// line v1 v3</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1001</span>:<br>                <span class="hljs-comment">// line v3 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1010</span>:<br>                <span class="hljs-comment">// 6</span><br>                <span class="hljs-comment">// line v1 v7</span><br>                <span class="hljs-comment">// line v3 v5</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1011</span>:<br>                <span class="hljs-comment">// 7</span><br>                <span class="hljs-comment">// line v3 v5</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1100</span>:<br>                <span class="hljs-comment">// line v1 v5</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1101</span>:<br>                <span class="hljs-comment">// 7</span><br>                <span class="hljs-comment">// line v5 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1110</span>:<br>                <span class="hljs-comment">// 7</span><br>                <span class="hljs-comment">// line v1 v7</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0b1111</span>:<br>                <span class="hljs-comment">// 8</span><br>                AddPolygon(x, y, positions, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>PCG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Houdini C++插件开发：配置Cmake构建环境</title>
    <link href="/wild/2022/07/22/log/P_Houdini_C++_Cmake/"/>
    <url>/wild/2022/07/22/log/P_Houdini_C++_Cmake/</url>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ol><li>安装好Houdini</li><li>安装好Visual Studio 2019（2022目前不支持）</li><li>安装Cmake 3.x，并且添加到系统环境变量</li><li>找到样例文件目录C:\Program Files\Side Effects Software\Houdini 19.0.589\toolkit\samples\SOP\</li><li>先拷贝一份SOP_Star到自己的文件夹内，比如D:&#x2F;SOP_Star。<br><img src="/wild/2022/07/22/log/P_Houdini_C++_Cmake/image-1669188883113.png"></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>下面以SOP_Star为例：</p><h5 id="1-CMakeLists-txt中修改cmake本地环境配置目录"><a href="#1-CMakeLists-txt中修改cmake本地环境配置目录" class="headerlink" title="1.CMakeLists.txt中修改cmake本地环境配置目录"></a>1.CMakeLists.txt中修改cmake本地环境配置目录</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">CMAKE_PREFIX_PATH <span class="hljs-string">&quot;$ENV&#123;HFS&#125;/toolkit/cmake&quot;</span><span class="hljs-comment">#修改前</span><br>CMAKE_PREFIX_PATH <span class="hljs-string">&quot;C:/Program Files/Side Effects Software/Houdini 19.0.561/toolkit/cmake&quot;</span><span class="hljs-comment">#修改后</span><br></code></pre></td></tr></table></figure><h5 id="2-CMakeLists-txt自定义输出目录"><a href="#2-CMakeLists-txt自定义输出目录" class="headerlink" title="2. CMakeLists.txt自定义输出目录"></a>2. CMakeLists.txt自定义输出目录</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment">#默认输出在C:\Users\XXX\Documents\houdini19.0\dso</span><br><span class="hljs-comment">#这里自定义输出到D:/SOP_Star/dso，找到CMakeLists.txt最后一行修改一下</span><br>houdini_configure_target( <span class="hljs-variable">$&#123;library_name&#125;</span> INSTDIR <span class="hljs-string">&quot;D:/SOP_Star/dso&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="3-cmake构建编译"><a href="#3-cmake构建编译" class="headerlink" title="3. cmake构建编译"></a>3. cmake构建编译</h5><ul><li>在D:&#x2F;SOP_Star内新建一个build.bat命令脚本，内容如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -S . -B build<br>cmake --build build --config Debug<br></code></pre></td></tr></table></figure></li><li>–config Debug或者Release设置编译类型</li><li>双击build.bat执行即可编译</li><li>生成的二进制文件<br><img src="/wild/2022/07/22/log/P_Houdini_C++_Cmake/image-1669188908153.png"></li><li>还有工程文件，后续可以使用VS深入开发<br><img src="/wild/2022/07/22/log/P_Houdini_C++_Cmake/image-1669188920615.png"></li></ul><h5 id="4-配置Houdini加载路径"><a href="#4-配置Houdini加载路径" class="headerlink" title="4.配置Houdini加载路径"></a>4.配置Houdini加载路径</h5><ul><li>生成的二进制放在以下目录，Houdini默认会自动搜索目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Program Files\Side Effects Software\Houdini 19.0.589\houdini\dso<br>C:\Users\XXX\Documents\houdini19.0\dso<br>Package\dso<br></code></pre></td></tr></table></figure></li><li>当然也可以定义自己的文件目录，比如D:&#x2F;SOP_Star&#x2F;dso</li><li>找到C:\Users\XXX\Documents\houdini19.0\houdini.env，添加一行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HOUDINI_DSO_PATH=&quot;D:/SOP_Star/dso;&amp;&quot; #后面的;&amp;表示附加，不能省略<br></code></pre></td></tr></table></figure></li></ul><h5 id="5-最后"><a href="#5-最后" class="headerlink" title="5.最后"></a>5.最后</h5><ul><li><p>SOP_Star样例生成的是一个节点，Houdini搜索Star加载，效果如下<br><img src="/wild/2022/07/22/log/P_Houdini_C++_Cmake/image-1669188992984.png"><br><img src="/wild/2022/07/22/log/P_Houdini_C++_Cmake/image-1669188999319.png"></p></li><li><p>其实也可以使用cmake gui来配置，但个人更喜欢文本来配置</p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://link.zhihu.com/?target=https://www.sidefx.com/docs/hdk/_h_d_k__intro__compiling.html%23HDK_Intro_Compiling_CMake_Functions">Compiling CMake Functions</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Houdini</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Houdini</tag>
      
      <tag>Cmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Houdini Engine for UE5插件编译心得</title>
    <link href="/wild/2022/07/22/log/P_Houdini_Engine_Compile/"/>
    <url>/wild/2022/07/22/log/P_Houdini_Engine_Compile/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>由于Houdini和Houdini Engine插件版本需要保持一致，经常更新让人很头疼，导致电脑安装了一堆版本的Houdini。。。</li><li>花了些时间尝试自己编译插件，记录一下过程。</li></ul><h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><h4 id="1-获取HoudiniEngine源码"><a href="#1-获取HoudiniEngine源码" class="headerlink" title="1.获取HoudiniEngine源码"></a>1.获取HoudiniEngine源码</h4><ul><li>找到自己需要的版本分支源码，克隆下载下来<br><img src="/wild/2022/07/22/log/P_Houdini_Engine_Compile/image-1669185526155.png"></li></ul><h4 id="2-新建空的C-游戏工程"><a href="#2-新建空的C-游戏工程" class="headerlink" title="2.新建空的C++游戏工程"></a>2.新建空的C++游戏工程</h4><ul><li>工程目录里面新建个Plugins文件夹，将HoudiniEngine源码放到里面</li><li>选中工程文件XXX.uproject右键，Generate Viusal Studio Project Files</li><li>重新生成Visual Studio工程（因为添加了新代码，需要刷新工程）</li></ul><h4 id="3-设置Houdini版本号（很关键）"><a href="#3-设置Houdini版本号（很关键）" class="headerlink" title="3.设置Houdini版本号（很关键）"></a>3.设置Houdini版本号（很关键）</h4><ul><li>修改Source&#x2F;HoudiniEngine&#x2F;HoudiniEngine.Build.cs里面的Houdini Version，对应本地安装的Houdini版本</li><li>同时修改HoudiniEngine.uplugin里面的VersionName，保证在UE插件面板中版本显示一致，以免混淆</li></ul><p><img src="/wild/2022/07/22/log/P_Houdini_Engine_Compile/image-1669185878233.png"><br><img src="/wild/2022/07/22/log/P_Houdini_Engine_Compile/image-1669185896617.png"></p><h4 id="4-编译工程"><a href="#4-编译工程" class="headerlink" title="4.编译工程"></a>4.编译工程</h4><ul><li>打开Visual Studio工程文件，将游戏项目设为启动项目</li><li>选择Debug Editor或者Development Editor模式编译</li><li>然后开始构建编译，生成二进制文件</li></ul><p><img src="/wild/2022/07/22/log/P_Houdini_Engine_Compile/image-1669185906202.png"></p><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><ul><li>启动工程，是否正常运行</li><li>查看插件面板是否启动Houdini Engine</li><li>找个hda文件，拖到场景，测试是否正常工作</li></ul><h4 id="6-临时工转正"><a href="#6-临时工转正" class="headerlink" title="6.临时工转正"></a>6.临时工转正</h4><ul><li>前面编译过程是作为游戏工程插件来编译</li><li>若编译成功后，可以将其拷贝到引擎目录下的Engine&#x2F;Plugins&#x2F;Runtime目录下</li><li>不过最好清理一下HoudiniEngine&#x2F;Intermediate&#x2F;Build里面的xxx.obj、xxx.pch文件，因为数据量很大。。。</li></ul><h4 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h4><ul><li>一份源代码，简单的设置一个版本号，可以编译成多个不同版本Houdini Engine</li><li>当然了，探其原因，主要是编译过程中编译器通过版本号来自动搜索本地Houdini安装目录内相关的头文件和静态库。</li><li>版本号就是用来定义编译器搜索的路径</li></ul><p><img src="/wild/2022/07/22/log/P_Houdini_Engine_Compile/image-1669185921274.png"></p><ul><li>所以，在没有找到适合自己需要的官方正式编译版时，可以尝试自己编译一下，或者魔改源码。</li></ul><h3 id="踩坑往事"><a href="#踩坑往事" class="headerlink" title="踩坑往事"></a>踩坑往事</h3><ul><li>最初看官方文档，说是要用UE源码编译，其实发行版引擎也是可以的。。。</li><li>UE源码编译所需要的时间和硬盘容量，真是个无底洞。。。</li><li>（巨坑）而且UE源码编译的插件，安装到发行版，提示版本不一致，不兼容。。。</li><li>所以，最好是用什么版本引擎（发行版or编译版），就用什么引擎去编译插件。。。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Houdini</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Houdini</tag>
      
      <tag>Houdini Engine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Billfish图片管理与Git仓库</title>
    <link href="/wild/2022/07/22/log/T_Billfish/"/>
    <url>/wild/2022/07/22/log/T_Billfish/</url>
    
    <content type="html"><![CDATA[<h3 id="Billfish"><a href="#Billfish" class="headerlink" title="Billfish"></a>Billfish</h3><ul><li><a href="https://www.billfish.cn/">https://www.billfish.cn/</a></li><li>Billfish是一个非常优秀的图片管理工具</li><li>配合Git，搭建一个自己的图片库，方便工作环境同步图集</li></ul><h3 id="搭建Git仓库步骤"><a href="#搭建Git仓库步骤" class="headerlink" title="搭建Git仓库步骤"></a>搭建Git仓库步骤</h3><h5 id="1-先安装Billfish软件"><a href="#1-先安装Billfish软件" class="headerlink" title="1.先安装Billfish软件"></a>1.先安装Billfish软件</h5><h5 id="2-创建素材库，选择保存路径"><a href="#2-创建素材库，选择保存路径" class="headerlink" title="2.创建素材库，选择保存路径"></a>2.创建素材库，选择保存路径</h5><p><img src="/wild/2022/07/22/log/T_Billfish/image-1669186680441.png"></p><h5 id="3-查看生成的素材库信息"><a href="#3-查看生成的素材库信息" class="headerlink" title="3.查看生成的素材库信息"></a>3.查看生成的素材库信息</h5><ul><li>显示隐藏文件<br><img src="/wild/2022/07/22/log/T_Billfish/image-1669187049624.png"><br><img src="/wild/2022/07/22/log/T_Billfish/image-1669186772137.png"></li><li>里面的文件信息<br><img src="/wild/2022/07/22/log/T_Billfish/image-1669186786905.png"></li></ul><h5 id="4-git仓库"><a href="#4-git仓库" class="headerlink" title="4.git仓库"></a>4.git仓库</h5><ul><li>git init一个仓库</li><li>将.git文件夹拷贝到素材库文件夹<br><img src="/wild/2022/07/22/log/T_Billfish/image-1669186819561.png"></li><li>新建.gitignore文件，排除不必要的缓存文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gitignore">desktop.ini<br><br>.bf/.backup<br>.bf/.preview<br>.bf/.recycle*<br>.bf/.temp<br></code></pre></td></tr></table></figure></li></ul><h5 id="5-安装Billfish浏览器插件"><a href="#5-安装Billfish浏览器插件" class="headerlink" title="5.安装Billfish浏览器插件"></a>5.安装Billfish浏览器插件</h5><ul><li>地址：<a href="https://www.billfish.cn/plug-in/">https://www.billfish.cn/plug-in/</a></li><li>插件需要Billfish软件启动之后才能使用浏览器收集图片</li><li>浏览器中拖拽图片就能收集了！</li><li>可以将图集push到自己的GitHub里面！</li></ul><h5 id="6-效果"><a href="#6-效果" class="headerlink" title="6.效果"></a>6.效果</h5><p><img src="/wild/2022/07/22/log/T_Billfish/image-1669187563305.png"></p>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Billfish</tag>
      
      <tag>Git</tag>
      
      <tag>Image</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Quad 绘制四边形</title>
    <link href="/wild/2022/06/28/lab/S_Unity_Quad/"/>
    <url>/wild/2022/06/28/lab/S_Unity_Quad/</url>
    
    <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>自定义QuadMesh数据结构<ul><li>存储Quad数据</li><li>同时转换Unity默认的Mesh</li></ul></li><li>利用GL绘制线框</li><li>效果<br>  <img src="/wild/2022/06/28/lab/S_Unity_Quad/image-1669795431127.png"><br>  <img src="/wild/2022/06/28/lab/S_Unity_Quad/image-1669795754646.png"></li><li>不足之处<ul><li>不能设置线框宽度</li><li>不能背面剔除线框</li><li>有锯齿</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>QuadMesh.cs<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><br>[<span class="hljs-meta">Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">QuadMesh</span><br>&#123;<br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">struct</span> Point<br>    &#123;<br>        <span class="hljs-keyword">public</span> Vector3 position;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> index;<br>    &#125;<br><br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">struct</span> Quad<br>    &#123;<br>        <span class="hljs-keyword">public</span> Point a, b, c, d;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> index;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;Quad&gt; m_quads;<br>    <span class="hljs-keyword">private</span> List&lt;Point&gt; m_points;<br>    <span class="hljs-keyword">private</span> List&lt;Vector3&gt; m_vertices;<br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; m_triangles;<br>    <span class="hljs-keyword">private</span> Mesh m_mesh;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">QuadMesh</span>()</span><br>    &#123;<br>        m_quads = <span class="hljs-keyword">new</span> List&lt;Quad&gt;();<br>        m_points = <span class="hljs-keyword">new</span> List&lt;Point&gt;();<br>        m_vertices = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;();<br>        m_triangles = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mesh <span class="hljs-title">GetMesh</span>()</span><br>    &#123;<br>        m_mesh = <span class="hljs-keyword">new</span> Mesh();<br>        m_mesh.vertices = m_vertices.ToArray();<br>        m_mesh.SetIndices(m_triangles, MeshTopology.Quads, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> m_mesh;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildQuads</span>(<span class="hljs-params">Vector3[] vertices, <span class="hljs-built_in">int</span>[] indices</span>)</span><br>    &#123;<br>        m_quads.Clear();<br>        m_points.Clear();<br>        m_vertices.Clear();<br>        m_triangles.Clear();<br><br>        <span class="hljs-built_in">int</span> num = indices.Length / <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">1</span> || vertices.Length &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> vertex <span class="hljs-keyword">in</span> vertices)<br>        &#123;<br>            AddPoint(vertex);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">var</span> p0 = m_points[indices[i * <span class="hljs-number">4</span> + <span class="hljs-number">0</span>]];<br>            <span class="hljs-keyword">var</span> p1 = m_points[indices[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>]];<br>            <span class="hljs-keyword">var</span> p2 = m_points[indices[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>]];<br>            <span class="hljs-keyword">var</span> p3 = m_points[indices[i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>]];<br>            AddQuad(p0, p1, p2, p3);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Point <span class="hljs-title">AddPoint</span>(<span class="hljs-params">Vector3 pos</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> point = <span class="hljs-keyword">new</span> Point<br>        &#123;<br>            position = pos,<br>            index = m_vertices.Count<br>        &#125;;<br>        m_vertices.Add(pos);<br>        m_points.Add(point);<br>        <span class="hljs-keyword">return</span> point;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddQuad</span>(<span class="hljs-params">Point a, Point b, Point c, Point d</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> quad = <span class="hljs-keyword">new</span> Quad()<br>        &#123;<br>            a = a,<br>            b = b,<br>            c = c,<br>            d = d,<br>            index = m_quads.Count<br>        &#125;;<br>        m_quads.Add(quad);<br><br>        m_triangles.Add(a.index);<br>        m_triangles.Add(b.index);<br>        m_triangles.Add(c.index);<br>        m_triangles.Add(d.index);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddQuad</span>(<span class="hljs-params">Vector3 a, Vector3 b, Vector3 c, Vector3 d</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> p0 = AddPoint(a);<br>        <span class="hljs-keyword">var</span> p1 = AddPoint(b);<br>        <span class="hljs-keyword">var</span> p2 = AddPoint(c);<br>        <span class="hljs-keyword">var</span> p3 = AddPoint(d);<br><br>        AddQuad(p0, p1, p2, p3);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawQuadLine</span>(<span class="hljs-params">Matrix4x4 matrix, Color color</span>)</span><br>    &#123;<br>        DrawGL.WireframeMode();<br><br>        GL.PushMatrix();<br><br>        GL.MultMatrix(matrix);<br><br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> quad <span class="hljs-keyword">in</span> m_quads)<br>        &#123;<br>            GL.Begin(GL.LINE_STRIP);<br>            GL.Color(color);<br>            GL.Vertex(quad.a.position);<br>            GL.Vertex(quad.b.position);<br>            GL.Vertex(quad.c.position);<br>            GL.Vertex(quad.d.position);<br>            GL.Vertex(quad.a.position);<br>            GL.End();<br>        &#125;<br><br>        GL.PopMatrix();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>    &#123;<br>        m_quads.Clear();<br>        m_points.Clear();<br>        m_vertices.Clear();<br>        m_triangles.Clear();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ToString</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">$&quot;Verts Num : <span class="hljs-subst">&#123;m_vertices.Count&#125;</span> Quad Num : <span class="hljs-subst">&#123;m_quads.Count&#125;</span>&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>QuadGrid.cs<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshFilter))</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshRenderer))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">QuadGrid</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> wireframe = <span class="hljs-literal">true</span>;<br>    [<span class="hljs-meta">Range(0, 10)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> size = <span class="hljs-number">1</span>;<br>    [<span class="hljs-meta">Range(0, 100)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> width = <span class="hljs-number">10</span>;<br>    [<span class="hljs-meta">Range(0, 100)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> height = <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">private</span> QuadMesh m_quadMesh;<br>    <span class="hljs-keyword">private</span> Material m_material;<br>    <span class="hljs-keyword">private</span> Mesh m_mesh;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        m_material = <span class="hljs-keyword">new</span> Material(Shader.Find(<span class="hljs-string">&quot;Unlit/Texture&quot;</span>));<br>        GetComponent&lt;MeshRenderer&gt;().sharedMaterial = m_material;<br><br>        CreateGrid();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateGrid</span>()</span><br>    &#123;<br>        m_quadMesh = <span class="hljs-keyword">new</span> QuadMesh();<br>        <span class="hljs-keyword">var</span> vertices = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;();<br>        <span class="hljs-keyword">var</span> indices = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; width + <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; height + <span class="hljs-number">1</span>; j++)<br>            &#123;<br>                <span class="hljs-built_in">float</span> x = i * size;<br>                <span class="hljs-built_in">float</span> y = j * size;<br><br>                vertices.Add(<span class="hljs-keyword">new</span> Vector3(x, <span class="hljs-number">0</span>, y));<br><br>                <span class="hljs-keyword">if</span> (i == width || j == height)<br>                    <span class="hljs-keyword">continue</span>;<br><br>                indices.Add(i * (height + <span class="hljs-number">1</span>) + j + <span class="hljs-number">0</span>);<br>                indices.Add(i * (height + <span class="hljs-number">1</span>) + j + <span class="hljs-number">1</span>);<br>                indices.Add((i + <span class="hljs-number">1</span>) * (height + <span class="hljs-number">1</span>) + j + <span class="hljs-number">1</span>);<br>                indices.Add((i + <span class="hljs-number">1</span>) * (height + <span class="hljs-number">1</span>) + j + <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br><br>        m_quadMesh.BuildQuads(vertices.ToArray(), indices.ToArray());<br>        m_mesh = m_quadMesh.GetMesh();<br>        GetComponent&lt;MeshFilter&gt;().mesh = m_mesh;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnRenderObject</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (wireframe)<br>            m_quadMesh.DrawQuadLine(transform.localToWorldMatrix, Color.black);<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><br>    [<span class="hljs-meta">CustomEditor(typeof(QuadGrid))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">QuadGridEditor</span> : <span class="hljs-title">Editor</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> quadGrid = target <span class="hljs-keyword">as</span> QuadGrid;<br>            <span class="hljs-keyword">if</span> (!quadGrid) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span> (DrawDefaultInspector())<br>            &#123;<br>                quadGrid.CreateGrid();<br>            &#125;<br><br>            GUILayout.Label(quadGrid.m_quadMesh.ToString());<br>        &#125;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cellular Automata 细胞自动机生成2D洞穴</title>
    <link href="/wild/2022/06/28/lab/S_Unity_Cellular_Automata/"/>
    <url>/wild/2022/06/28/lab/S_Unity_Cellular_Automata/</url>
    
    <content type="html"><![CDATA[<h2 id="Cellular-Automata"><a href="#Cellular-Automata" class="headerlink" title="Cellular Automata"></a>Cellular Automata</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li>随机生成2D黑白图</li><li>计算每个格子周围8个邻居黑白值之和</li><li>平滑计算<ul><li>邻居个数&gt;4，生成wall</li><li>邻居个数&#x3D;4，维持不变</li><li>邻居个数&lt;4，生成cave</li><li>反复迭代<br>  <img src="/wild/2022/06/28/lab/S_Unity_Cellular_Automata/image-1669610249284.png"></li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CellularAutomataCave</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> NeighbourType<br>    &#123;<br>        Live,<br>        Dead,<br>        Keep<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> width = <span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> height = <span class="hljs-number">128</span>;<br><br>    [<span class="hljs-meta">Range(0, 100)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> fillPercent = <span class="hljs-number">50</span>;<br>    [<span class="hljs-meta">Range(0, 100)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> seed = <span class="hljs-number">0</span>;<br>    [<span class="hljs-meta">Range(0, 10)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> smoothIteration = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> solidBoard = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> smooth = <span class="hljs-literal">false</span>;<br>    [<span class="hljs-meta">Label(<span class="hljs-string">&quot;邻居为4时&quot;</span>)</span>] <span class="hljs-keyword">public</span> NeighbourType neighbourType = NeighbourType.Keep;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span>[,] m_map;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        GenerateMap();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GenerateMap</span>()</span><br>    &#123;<br>        FillRandomMap();<br>        <span class="hljs-keyword">if</span> (smooth)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; smoothIteration; i++)<br>            &#123;<br>                SmoothMap();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FillRandomMap</span>()</span><br>    &#123;<br>        m_map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[width, height];<br>        <span class="hljs-keyword">var</span> rnd = <span class="hljs-keyword">new</span> System.Random(seed);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>; x &lt; width; ++x)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> y = <span class="hljs-number">0</span>; y &lt; height; ++y)<br>            &#123;<br>                <span class="hljs-built_in">bool</span> board = (x == <span class="hljs-number">0</span> || x == width - <span class="hljs-number">1</span> || y == <span class="hljs-number">0</span> || y == height - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (solidBoard &amp;&amp; board)<br>                &#123;<br>                    <span class="hljs-comment">// 边缘实心墙</span><br>                    m_map[x, y] = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    m_map[x, y] = (rnd.Next(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>) &lt; fillPercent) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">GetNeighbourCount</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> idx, <span class="hljs-built_in">int</span> idy</span>)</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> x = idx - <span class="hljs-number">1</span>; x &lt;= idx + <span class="hljs-number">1</span>; x++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> y = idy - <span class="hljs-number">1</span>; y &lt;= idy + <span class="hljs-number">1</span>; y++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; width &amp;&amp; y &lt; height)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (x != idx || y != idy)<br>                    &#123;<br>                        count += m_map[x, y];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-comment">// 边缘处理</span><br>                    count++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SmoothMap</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 不能直接赋值m_map，否则邻居计算不对</span><br>        <span class="hljs-built_in">int</span>[,] nextMap = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[width, height];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>; x &lt; width; x++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> y = <span class="hljs-number">0</span>; y &lt; height; y++)<br>            &#123;<br>                <span class="hljs-built_in">int</span> count = GetNeighbourCount(x, y);<br>                <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">4</span>)<br>                    nextMap[x, y] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count == <span class="hljs-number">4</span>)<br>                &#123;<br>                    <span class="hljs-keyword">switch</span> (neighbourType)<br>                    &#123;<br>                        <span class="hljs-keyword">case</span> NeighbourType.Live:<br>                            nextMap[x, y] = <span class="hljs-number">1</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">case</span> NeighbourType.Dead:<br>                            nextMap[x, y] = <span class="hljs-number">0</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        <span class="hljs-keyword">case</span> NeighbourType.Keep:<br>                            nextMap[x, y] = m_map[x, y];<br>                            <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    nextMap[x, y] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br>        m_map = nextMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDrawGizmos</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>; x &lt; width; ++x)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> y = <span class="hljs-number">0</span>; y &lt; height; ++y)<br>            &#123;<br>                Gizmos.color = (m_map[x, y] == <span class="hljs-number">0</span>) ? Color.black : Color.white;<br>                Vector3 pos = <span class="hljs-keyword">new</span> Vector3(x + <span class="hljs-number">0.5f</span> - width / <span class="hljs-number">2.0f</span>, <span class="hljs-number">0</span>, y + <span class="hljs-number">0.5f</span> - height / <span class="hljs-number">2.0f</span>);<br>                Gizmos.DrawCube(pos, Vector3.one);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><br>    [<span class="hljs-meta">CustomEditor(typeof(CellularAutomataCave))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CellularAutomataCaveEditor</span> : <span class="hljs-title">Editor</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> cellularAutomataCave = target <span class="hljs-keyword">as</span> CellularAutomataCave;<br>            <span class="hljs-keyword">if</span> (!cellularAutomataCave) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">if</span> (DrawDefaultInspector())<br>            &#123;<br>                cellularAutomataCave.GenerateMap();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;Update&quot;</span>, GUILayout.MaxWidth(<span class="hljs-number">100</span>)))<br>            &#123;<br>                cellularAutomataCave.GenerateMap();<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="Procedural-Dungeon-Wave-Function-Collapse-Cellular-Automata"><a href="#Procedural-Dungeon-Wave-Function-Collapse-Cellular-Automata" class="headerlink" title="Procedural Dungeon | Wave Function Collapse | Cellular Automata"></a>Procedural Dungeon | Wave Function Collapse | Cellular Automata</h4><ul><li><a href="https://www.youtube.com/playlist?list=PLcRSafycjWFenI87z7uZHFv6cUG2Tzu9v">Procedural Dungeon Generation in Unity 2d tutorial</a></li><li><a href="https://www.youtube.com/playlist?list=PLcRSafycjWFeKAS40OdIvhL7j-vsgE3eg">Wave Function Collapse Tutorial Unity</a></li><li><a href="https://www.youtube.com/watch?v=v7yyZZjF1z4">Procedural Cave Generation</a></li><li><a href="https://www.youtube.com/watch?v=slTEz6555Ts">Cellular Automata and Procedural Map Generation</a></li><li><a href="https://www.youtube.com/watch?v=4GuAV1PnurU">Diamond Square and Procedural Map Generation</a></li><li><a href="https://www.youtube.com/watch?v=YS0MTrjxGbM">Lazy Flood Fill and Procedural Map Generation</a></li><li><a href="https://www.youtube.com/c/KlaytonKowalski/videos">Klayton Kowalski</a></li><li><a href="https://www.youtube.com/watch?v=rBY2Dzej03A">Procedurally Generated 3D Dungeons</a></li><li><a href="https://www.youtube.com/watch?v=jV-DZqdKlnE">GDC- End-to-End Procedural Generation in Caves of Qud</a></li><li><a href="https://www.bilibili.com/video/BV1MJ411n7bC">如何用游戏模拟森林火灾？神奇的元胞自动机</a></li><li><a href="https://www.bilibili.com/video/BV11p4y1D7BL">各类迷宫自动生成算法详解 - 游戏算法全系列地形篇</a><ul><li>回溯算法</li><li>Eller’s method</li><li>Hunter and Kill</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Automata</tag>
      
      <tag>PCG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity GL 实时绘制</title>
    <link href="/wild/2022/06/28/lab/S_Unity_GL/"/>
    <url>/wild/2022/06/28/lab/S_Unity_GL/</url>
    
    <content type="html"><![CDATA[<h3 id="GL立即绘图"><a href="#GL立即绘图" class="headerlink" title="GL立即绘图"></a>GL立即绘图</h3><ul><li>挂载到GameObject上即可<ul><li>OnRenderObject    &#x2F;&#x2F; 都可以显示</li><li>OnGUI             &#x2F;&#x2F; Game模式可以显示，Editor不显示</li></ul></li></ul><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><ul><li>GL.PushMatrix();          &#x2F;&#x2F; 保存摄像机变换矩阵<ul><li>GL.LoadPixelMatrix()  &#x2F;&#x2F; 设置用屏幕坐标绘图</li><li>GL.MultMatrix()</li></ul></li><li>GL.PopMatrix();           &#x2F;&#x2F; 还原</li></ul><h4 id="绘制模式"><a href="#绘制模式" class="headerlink" title="绘制模式"></a>绘制模式</h4><ul><li>GL.Begin()<ul><li>Primitive<ul><li>GL.QUADS</li><li>GL.LINES</li><li>GL.LINE_STRIP</li><li>GL.TRIANGLES</li><li>GL.TRIANGLE_STRIP</li></ul></li><li>GL.Vertex3()</li></ul></li><li>GL.End()</li></ul><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnRenderObject</span>()</span><br>&#123;<br>    GL.PushMatrix();<br>    Color clr = Color.green;<br>    clr.a = <span class="hljs-number">0.1f</span>;<br>    GL.MultMatrix(transform.localToWorldMatrix);<br><br>    GL.PopMatrix();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://tedsieblog.wordpress.com/2016/07/19/three-ways-to-draw-wireframe/">Three ways to draw wireframe – 三種繪製線框做法</a></li><li><a href="https://blog.csdn.net/f_957995490/article/details/107987179">Unity中GL类的使用简记</a></li><li><a href="https://blog.csdn.net/hyy_sui_yuan/article/details/105751591">unity使用GL在场景绘制网格</a></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DrawGL</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> DrawMode : <span class="hljs-built_in">int</span><br>    &#123;<br>        Line = GL.LINES,<br>        LineStrip = GL.LINE_STRIP,<br>        Triangle = GL.TRIANGLES,<br>        TriangleStrip = GL.TRIANGLE_STRIP,<br>        Quad = GL.QUADS<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> Material drawMaterial;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitMaterial</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!drawMaterial)<br>        &#123;<br>            Shader shader = Shader.Find(<span class="hljs-string">&quot;Hidden/Internal-Colored&quot;</span>);<br>            drawMaterial = <span class="hljs-keyword">new</span> Material(shader);<br>            drawMaterial.hideFlags = HideFlags.HideAndDontSave;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WireframeMode</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> zBias = <span class="hljs-number">0</span>, <span class="hljs-built_in">bool</span> bAlpha = <span class="hljs-literal">false</span>, <span class="hljs-built_in">bool</span> bZTest = <span class="hljs-literal">true</span>, <span class="hljs-built_in">int</span> cullMode = <span class="hljs-number">0</span></span>)</span><br>    &#123;<br>        InitMaterial();<br>        <span class="hljs-keyword">if</span> (bAlpha)<br>        &#123;<br>            drawMaterial.SetInt(<span class="hljs-string">&quot;_SrcBlend&quot;</span>, (<span class="hljs-built_in">int</span>) UnityEngine.Rendering.BlendMode.SrcAlpha);<br>            drawMaterial.SetInt(<span class="hljs-string">&quot;_DstBlend&quot;</span>, (<span class="hljs-built_in">int</span>) UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            drawMaterial.SetInt(<span class="hljs-string">&quot;_SrcBlend&quot;</span>, (<span class="hljs-built_in">int</span>) UnityEngine.Rendering.BlendMode.One);<br>            drawMaterial.SetInt(<span class="hljs-string">&quot;_DstBlend&quot;</span>, (<span class="hljs-built_in">int</span>) UnityEngine.Rendering.BlendMode.Zero);<br>        &#125;<br><br>        drawMaterial.SetInt(<span class="hljs-string">&quot;_Cull&quot;</span>, cullMode); <span class="hljs-comment">// Off=0 Front=1 Back=2</span><br>        drawMaterial.SetInt(<span class="hljs-string">&quot;_ZWrite&quot;</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// Turn off depth writes</span><br><br>        <span class="hljs-keyword">var</span> zTest = bZTest<br>            ? UnityEngine.Rendering.CompareFunction.LessEqual<br>            : UnityEngine.Rendering.CompareFunction.Always;<br>        drawMaterial.SetInt(<span class="hljs-string">&quot;_ZTest&quot;</span>, (<span class="hljs-built_in">int</span>) zTest);<br>        drawMaterial.SetFloat(<span class="hljs-string">&quot;_ZBias&quot;</span>, zBias);<br><br>        drawMaterial.SetPass(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DrawMesh</span>(<span class="hljs-params">Mesh mesh, Matrix4x4 matrix, Color color, <span class="hljs-built_in">float</span> zBias = <span class="hljs-number">0</span></span>)</span><br>    &#123;<br>        Vector3[] vertices = mesh.vertices;<br>        <span class="hljs-built_in">int</span>[] triangles = mesh.triangles;<br><br>        WireframeMode(zBias);<br>        GL.PushMatrix();<br>        GL.MultMatrix(matrix);<br><br>        GL.Begin(GL.LINES);<br>        GL.Color(color);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> cnt = <span class="hljs-number">0</span>; cnt &lt; triangles.Length; cnt += <span class="hljs-number">3</span>)<br>        &#123;<br>            GL.Vertex(vertices[triangles[cnt]]);<br>            GL.Vertex(vertices[triangles[cnt + <span class="hljs-number">1</span>]]);<br>            GL.Vertex(vertices[triangles[cnt + <span class="hljs-number">1</span>]]);<br>            GL.Vertex(vertices[triangles[cnt + <span class="hljs-number">2</span>]]);<br>            GL.Vertex(vertices[triangles[cnt + <span class="hljs-number">2</span>]]);<br>            GL.Vertex(vertices[triangles[cnt]]);<br>        &#125;<br><br>        GL.End();<br>        GL.PopMatrix();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Job System 入门</title>
    <link href="/wild/2022/06/28/lab/S_Unity_JobSystem/"/>
    <url>/wild/2022/06/28/lab/S_Unity_JobSystem/</url>
    
    <content type="html"><![CDATA[<h3 id="Job-System"><a href="#Job-System" class="headerlink" title="Job System"></a>Job System</h3><ul><li>IJobParallelFor</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> Unity.Burst;<br><span class="hljs-keyword">using</span> Unity.Jobs;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JobRandomTest</span><br>&#123;<br>    [<span class="hljs-meta">BurstCompile(CompileSynchronously = true)</span>]<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">struct</span> JobForRandom : IJobParallelFor<br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">uint</span> m_seed;<br>        <span class="hljs-keyword">public</span> NativeArray&lt;<span class="hljs-built_in">float</span>&gt; Result;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JobForRandom</span>(<span class="hljs-params">NativeArray&lt;<span class="hljs-built_in">float</span>&gt; result, <span class="hljs-built_in">uint</span> seed = <span class="hljs-number">3</span></span>)</span><br>        &#123;<br>            Result = result;<br>            m_seed = seed;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>        &#123;<br>            Random rnd = Random.CreateFromIndex((<span class="hljs-built_in">uint</span>) (index + m_seed));<br>            Result[index] = rnd.NextFloat(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params"><span class="hljs-built_in">uint</span> seed</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> container = <span class="hljs-keyword">new</span> NativeArray&lt;<span class="hljs-built_in">float</span>&gt;(<span class="hljs-number">100</span>, Allocator.TempJob);<br><br>        JobForRandom job = <span class="hljs-keyword">new</span> JobForRandom(container, seed);<br>        JobHandle jobHandle = job.Schedule(container.Length, <span class="hljs-number">1</span>);<br>        jobHandle.Complete();<br><br>        <span class="hljs-keyword">var</span> result = job.Result.ToList();<br><br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> r <span class="hljs-keyword">in</span> result)<br>        &#123;<br>            Debug.Log(r);<br>        &#125;<br><br>        job.Result.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.lfzxb.top/fog-of-war-based-on-ss-in-urp/">基于URP屏幕空间采样与JobSystem加速的战争迷雾</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Compute Shader 入门</title>
    <link href="/wild/2022/06/28/lab/S_Unity_Shader_Compute/"/>
    <url>/wild/2022/06/28/lab/S_Unity_Shader_Compute/</url>
    
    <content type="html"><![CDATA[<h3 id="Compute-Shader"><a href="#Compute-Shader" class="headerlink" title="Compute Shader"></a>Compute Shader</h3><ul><li>创建Shader</li><li>设置参数</li><li>Dispatch()</li><li>获取结果</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>ComputeNoise.cs<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshRenderer))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ComputeNoise</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> resolution = <span class="hljs-number">512</span>;<br>    <span class="hljs-keyword">public</span> Color color = Color.white;<br>    [<span class="hljs-meta">Range(0, 100)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> seed;<br><br>    <span class="hljs-keyword">private</span> ComputeShader m_computeShader;<br>    <span class="hljs-keyword">private</span> Material m_material;<br>    <span class="hljs-keyword">private</span> RenderTexture m_texture;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        m_material = <span class="hljs-keyword">new</span> Material(Shader.Find(<span class="hljs-string">&quot;Unlit/Texture&quot;</span>));<br>        GetComponent&lt;MeshRenderer&gt;().material = m_material;<br><br>        CreateNoise();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateNoise</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!m_computeShader)<br>        &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br>            <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> computeShaderFile = <span class="hljs-string">&quot;Assets/Dev/Shader/Compute/NoiseTexture.compute&quot;</span>;<br>            m_computeShader = AssetDatabase.LoadAssetAtPath&lt;ComputeShader&gt;(computeShaderFile);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!m_computeShader.HasKernel(<span class="hljs-string">&quot;CSMain&quot;</span>)) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">int</span> id = m_computeShader.FindKernel(<span class="hljs-string">&quot;CSMain&quot;</span>);<br><br>        <span class="hljs-built_in">bool</span> bCreateNewTexture = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (m_texture == <span class="hljs-literal">null</span>)<br>        &#123;<br>            bCreateNewTexture = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m_texture.width != resolution || m_texture.enableRandomWrite == <span class="hljs-literal">false</span>)<br>        &#123;<br>            bCreateNewTexture = <span class="hljs-literal">true</span>;<br>            m_texture.Release();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (bCreateNewTexture)<br>        &#123;<br>            m_texture = <span class="hljs-keyword">new</span> RenderTexture(resolution, resolution, <span class="hljs-number">24</span>);<br>            m_texture.enableRandomWrite = <span class="hljs-literal">true</span>;<br>            m_texture.Create();<br>        &#125;<br><br>        m_computeShader.SetTexture(id, <span class="hljs-string">&quot;Result&quot;</span>, m_texture);<br>        m_computeShader.SetVector(<span class="hljs-string">&quot;Color&quot;</span>, color);<br>        m_computeShader.SetFloat(<span class="hljs-string">&quot;Seed&quot;</span>, seed);<br><br>        m_computeShader.GetKernelThreadGroupSizes(id, <span class="hljs-keyword">out</span> <span class="hljs-built_in">uint</span> groupNumX, <span class="hljs-keyword">out</span> <span class="hljs-built_in">uint</span> groupNumY, <span class="hljs-keyword">out</span> _);<br>        <span class="hljs-built_in">int</span> numX = Mathf.CeilToInt(resolution / (<span class="hljs-built_in">float</span>) groupNumX);<br>        <span class="hljs-built_in">int</span> numY = Mathf.CeilToInt(resolution / (<span class="hljs-built_in">float</span>) groupNumY);<br><br>        m_computeShader.Dispatch(id, numX, numY, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">if</span> (m_material) m_material.SetTexture(<span class="hljs-string">&quot;_MainTex&quot;</span>, m_texture);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>NoiseTexture.compute<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> kernel CSMain</span><br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">hash2d_value</span><span class="hljs-params">(float2 uv, <span class="hljs-type">float</span> seed = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    uint x = (uint)uv.x &lt;&lt; <span class="hljs-number">4</span>;<br>    uint y = (uint)uv.y &lt;&lt; <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span> + seed + x * y, <span class="hljs-number">78.233</span>))) * <span class="hljs-number">43758.5453</span>);<br>&#125;<br><br>RWTexture2D&lt;float4&gt; Result;<br>float3 Color;<br><span class="hljs-type">float</span> Seed;<br><br>[<span class="hljs-built_in">numthreads</span>(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>)]<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CSMain</span><span class="hljs-params">(uint3 id : SV_DispatchThreadID)</span></span><br><span class="hljs-function"></span>&#123;<br>    uint w, h;<br>    Result.<span class="hljs-built_in">GetDimensions</span>(w, h);<br>    <span class="hljs-keyword">if</span> (id.x &lt; w &amp;&amp; id.y &lt; h)<br>    &#123;<br>        float2 uv = id.xy / <span class="hljs-built_in">float2</span>(w, h);<br><br>        <span class="hljs-type">float</span> randValue = <span class="hljs-built_in">hash2d_value</span>(uv, Seed);<br>        Result[id.xy] = <span class="hljs-built_in">float4</span>(randValue * Color, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Shader GPU Instancing</title>
    <link href="/wild/2022/06/28/lab/S_Unity_Shader_Instancing/"/>
    <url>/wild/2022/06/28/lab/S_Unity_Shader_Instancing/</url>
    
    <content type="html"><![CDATA[<h3 id="GPU-Instancing"><a href="#GPU-Instancing" class="headerlink" title="GPU Instancing"></a>GPU Instancing</h3><ul><li>DrawMeshInstanced                 &#x2F;&#x2F; 提供Matrix[]数组，最多绘制1023个对象</li><li>DrawMeshInstancedIndirect         &#x2F;&#x2F; 通过ComputeBuffer提供数据、数量</li><li>bufferWithArgs &#x3D; int[5]<ul><li>index count per instance      &#x2F;&#x2F; 每个实例index数量</li><li>instance count                &#x2F;&#x2F; 实例数量</li><li>start index location          &#x2F;&#x2F; index开始位置</li><li>base vertex location          &#x2F;&#x2F; vertex开始位置</li><li>start instance location       &#x2F;&#x2F; 实例开始位置<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">uint</span>[] args = <span class="hljs-keyword">new</span> <span class="hljs-built_in">uint</span>[<span class="hljs-number">5</span>] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>args[<span class="hljs-number">0</span>] = (<span class="hljs-built_in">uint</span>) instanceMesh.GetIndexCount(subMeshIndex);<br>args[<span class="hljs-number">1</span>] = (<span class="hljs-built_in">uint</span>) instanceCount;<br>args[<span class="hljs-number">2</span>] = (<span class="hljs-built_in">uint</span>) instanceMesh.GetIndexStart(subMeshIndex);<br>args[<span class="hljs-number">3</span>] = (<span class="hljs-built_in">uint</span>) instanceMesh.GetBaseVertex(subMeshIndex);<br></code></pre></td></tr></table></figure></li></ul></li><li>MaterialPropertyBlock             &#x2F;&#x2F; 用于存储buffer数据</li><li><a href="https://docs.unity3d.com/ScriptReference/Graphics.DrawMeshInstancedIndirect.html">https://docs.unity3d.com/ScriptReference/Graphics.DrawMeshInstancedIndirect.html</a></li><li><a href="https://docs.unity3d.com/ScriptReference/Graphics.DrawMeshInstancedProcedural.html">https://docs.unity3d.com/ScriptReference/Graphics.DrawMeshInstancedProcedural.html</a></li><li>DrawMeshInstancedProcedural<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#">Bounds DrawBounds = <span class="hljs-keyword">new</span> Bounds();<br>DrawBounds.size = Vector3.one * <span class="hljs-number">100000</span>;<br>DrawBounds.center = MainCamera.transform.position;<br><br><span class="hljs-comment">// StructuredBuffer&lt;float4x4&gt; IndirectShaderDataBuffer;</span><br>ComputeBuffer instanceOutputBuffer = <span class="hljs-keyword">new</span> ComputeBuffer(InstanceCount, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">float</span>) * <span class="hljs-number">16</span>);<br><br>MaterialPropertyBlock mpb = <span class="hljs-keyword">new</span> MaterialPropertyBlock();<br>mpb.SetBuffer(<span class="hljs-string">&quot;IndirectShaderDataBuffer&quot;</span>, instanceOutputBuffer);<br><br>Graphics.DrawMeshInstancedProcedural(mesh, <span class="hljs-number">0</span>, material, DrawBounds, InstanceCount, mpb);<br></code></pre></td></tr></table></figure></li><li>Surface Shader设置<ul><li>pragma multi_compile_instancing               &#x2F;&#x2F; Shader开启instancing</li><li>pragma instancing_options procedural:setup    &#x2F;&#x2F; 定义setup函数对输入buffer数据处理，对应unity_InstanceID</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>vert&#x2F;frag版本<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c++">Shader <span class="hljs-string">&quot;Test/GPUInstance&quot;</span><br>&#123;<br>    Properties<br>    &#123;<br>        _MainTex (<span class="hljs-string">&quot;Albedo (RGB)&quot;</span>, <span class="hljs-number">2</span>D) = <span class="hljs-string">&quot;white&quot;</span> &#123;&#125;<br>    &#125;<br>    SubShader<br>    &#123;<br>        Pass<br>        &#123;<br>            Tags<br>            &#123;<br>                <span class="hljs-string">&quot;LightMode&quot;</span>=<span class="hljs-string">&quot;ForwardBase&quot;</span><br>            &#125;<br><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vert</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment frag</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> multi_compile_fwdbase nolightmap nodirlightmap nodynlightmap novertexlight</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> target 4.5</span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;UnityCG.cginc&quot;</span></span><br>            <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;UnityLightingCommon.cginc&quot;</span></span><br>            <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;AutoLight.cginc&quot;</span></span><br><br>            sampler2D _MainTex;<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">if</span> SHADER_TARGET &gt;= 45</span><br>            StructuredBuffer&lt;float4x4&gt; IndirectShaderDataBuffer;<br>            <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>            <span class="hljs-keyword">struct</span> <span class="hljs-title class_">v2f</span><br>            &#123;<br>                float4 pos : SV_POSITION;<br>                float2 uv_MainTex : TEXCOORD0;<br>                float3 ambient : TEXCOORD1;<br>                float3 diffuse : TEXCOORD2;<br>                float3 color : TEXCOORD3;<br>                <span class="hljs-built_in">SHADOW_COORDS</span>(<span class="hljs-number">4</span>)<br>            &#125;;<br><br>            <span class="hljs-function"><span class="hljs-keyword">inline</span> float4x4 <span class="hljs-title">InverseMatrix</span><span class="hljs-params">(float4x4 input)</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-meta">#<span class="hljs-keyword">define</span> minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))</span><br><br>                float4x4 cofactors = <span class="hljs-built_in">float4x4</span>(<br>                    <span class="hljs-built_in">minor</span>(_22_23_24, _32_33_34, _42_43_44),<br>                    -<span class="hljs-built_in">minor</span>(_21_23_24, _31_33_34, _41_43_44),<br>                    <span class="hljs-built_in">minor</span>(_21_22_24, _31_32_34, _41_42_44),<br>                    -<span class="hljs-built_in">minor</span>(_21_22_23, _31_32_33, _41_42_43),<br><br>                    -<span class="hljs-built_in">minor</span>(_12_13_14, _32_33_34, _42_43_44),<br>                    <span class="hljs-built_in">minor</span>(_11_13_14, _31_33_34, _41_43_44),<br>                    -<span class="hljs-built_in">minor</span>(_11_12_14, _31_32_34, _41_42_44),<br>                    <span class="hljs-built_in">minor</span>(_11_12_13, _31_32_33, _41_42_43),<br><br>                    <span class="hljs-built_in">minor</span>(_12_13_14, _22_23_24, _42_43_44),<br>                    -<span class="hljs-built_in">minor</span>(_11_13_14, _21_23_24, _41_43_44),<br>                    <span class="hljs-built_in">minor</span>(_11_12_14, _21_22_24, _41_42_44),<br>                    -<span class="hljs-built_in">minor</span>(_11_12_13, _21_22_23, _41_42_43),<br><br>                    -<span class="hljs-built_in">minor</span>(_12_13_14, _22_23_24, _32_33_34),<br>                    <span class="hljs-built_in">minor</span>(_11_13_14, _21_23_24, _31_33_34),<br>                    -<span class="hljs-built_in">minor</span>(_11_12_14, _21_22_24, _31_32_34),<br>                    <span class="hljs-built_in">minor</span>(_11_12_13, _21_22_23, _31_32_33)<br>                );<br>                <span class="hljs-meta">#<span class="hljs-keyword">undef</span> minor</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">transpose</span>(cofactors) / <span class="hljs-built_in">determinant</span>(input);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-keyword">inline</span> float3 <span class="hljs-title">ObjectToWorldNormal</span><span class="hljs-params">(float3 norm, float4x4 ObjectToWorld)</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> UNITY_ASSUME_UNIFORM_SCALING</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">mul</span>((float3x3)ObjectToWorld, norm));<br>                <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">mul</span>(norm, (float3x3)<span class="hljs-built_in">InverseMatrix</span>(ObjectToWorld)));<br>                <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            &#125;<br><br>            <span class="hljs-function">v2f <span class="hljs-title">vert</span><span class="hljs-params">(appdata_full v, uint instanceID : SV_InstanceID)</span></span><br><span class="hljs-function">            </span>&#123;<br>                v2f o;<br>                float4 worldPosition;<br>                float3 worldNormal;<br><br>                <span class="hljs-meta">#<span class="hljs-keyword">if</span> SHADER_TARGET &gt;= 45</span><br>                <span class="hljs-type">const</span> float4x4 bufferMatrix = IndirectShaderDataBuffer[instanceID];<br>                worldPosition = <span class="hljs-built_in">mul</span>(bufferMatrix, v.vertex);<br>                worldNormal = <span class="hljs-built_in">ObjectToWorldNormal</span>(v.normal, bufferMatrix);<br>                <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>                worldPosition = v.vertex;<br>                worldNormal = v.normal;<br>                <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>                float3 ndotl = <span class="hljs-built_in">saturate</span>(<span class="hljs-built_in">dot</span>(worldNormal, _WorldSpaceLightPos0.xyz));<br>                float3 ambient = <span class="hljs-built_in">ShadeSH9</span>(<span class="hljs-built_in">float4</span>(worldNormal, <span class="hljs-number">1.0f</span>));<br>                float3 diffuse = (ndotl * _LightColor0.rgb);<br>                float3 color = v.color;<br><br>                o.pos = <span class="hljs-built_in">mul</span>(UNITY_MATRIX_VP, <span class="hljs-built_in">float4</span>(worldPosition.xyz, <span class="hljs-number">1</span>));<br>                o.uv_MainTex = v.texcoord;<br>                o.ambient = ambient;<br>                o.diffuse = diffuse;<br>                o.color = color;<br>                <span class="hljs-built_in">TRANSFER_SHADOW</span>(o)<br>                <span class="hljs-keyword">return</span> o;<br>            &#125;<br><br>            <span class="hljs-function">fixed4 <span class="hljs-title">frag</span><span class="hljs-params">(v2f i)</span> : SV_Target</span><br><span class="hljs-function">            &#123;</span><br>                fixed shadow = <span class="hljs-built_in">SHADOW_ATTENUATION</span>(i);<br>                fixed4 albedo = <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv_MainTex);<br>                float3 lighting = i.diffuse * shadow + i.ambient;<br>                fixed4 output = <span class="hljs-built_in">fixed4</span>(albedo.rgb * i.color * lighting, albedo.w);<br>                <span class="hljs-keyword">return</span> output;<br>            &#125;<br>            ENDCG<br>        &#125;<br>    &#125;<br>    FallBack <span class="hljs-string">&quot;Diffuse&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>Surface版本<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++">Shader <span class="hljs-string">&quot;Test/GPUInstanceSurface&quot;</span><br>&#123;<br>    Properties<br>    &#123;<br>        _Color(<span class="hljs-string">&quot;Base Color&quot;</span>, Color) = (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        _Smoothness(<span class="hljs-string">&quot;Smoothness&quot;</span>, <span class="hljs-built_in">Range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) = <span class="hljs-number">0</span><br>        _Metallic(<span class="hljs-string">&quot;Metallic&quot;</span>, <span class="hljs-built_in">Range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) = <span class="hljs-number">0</span><br>    &#125;<br>    SubShader<br>    &#123;<br>        Tags<br>        &#123;<br>            <span class="hljs-string">&quot;RenderType&quot;</span>=<span class="hljs-string">&quot;Opaque&quot;</span><br>        &#125;<br><br>        CGPROGRAM<br>        <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> surface surf Standard addshadow nolightmap</span><br>        <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> multi_compile_instancing</span><br>        <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> instancing_options procedural:setup</span><br><br>        half4 _Color;<br>        half _Smoothness;<br>        half _Metallic;<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> UNITY_PROCEDURAL_INSTANCING_ENABLED</span><br>        StructuredBuffer&lt;float4x4&gt; IndirectShaderDataBuffer;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        <span class="hljs-function">float4x4 <span class="hljs-title">inverse</span><span class="hljs-params">(float4x4 input)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-meta">#<span class="hljs-keyword">define</span> minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))</span><br><br>            float4x4 cofactors = <span class="hljs-built_in">float4x4</span>(<br>                <span class="hljs-built_in">minor</span>(_22_23_24, _32_33_34, _42_43_44),<br>                -<span class="hljs-built_in">minor</span>(_21_23_24, _31_33_34, _41_43_44),<br>                <span class="hljs-built_in">minor</span>(_21_22_24, _31_32_34, _41_42_44),<br>                -<span class="hljs-built_in">minor</span>(_21_22_23, _31_32_33, _41_42_43),<br><br>                -<span class="hljs-built_in">minor</span>(_12_13_14, _32_33_34, _42_43_44),<br>                <span class="hljs-built_in">minor</span>(_11_13_14, _31_33_34, _41_43_44),<br>                -<span class="hljs-built_in">minor</span>(_11_12_14, _31_32_34, _41_42_44),<br>                <span class="hljs-built_in">minor</span>(_11_12_13, _31_32_33, _41_42_43),<br><br>                <span class="hljs-built_in">minor</span>(_12_13_14, _22_23_24, _42_43_44),<br>                -<span class="hljs-built_in">minor</span>(_11_13_14, _21_23_24, _41_43_44),<br>                <span class="hljs-built_in">minor</span>(_11_12_14, _21_22_24, _41_42_44),<br>                -<span class="hljs-built_in">minor</span>(_11_12_13, _21_22_23, _41_42_43),<br><br>                -<span class="hljs-built_in">minor</span>(_12_13_14, _22_23_24, _32_33_34),<br>                <span class="hljs-built_in">minor</span>(_11_13_14, _21_23_24, _31_33_34),<br>                -<span class="hljs-built_in">minor</span>(_11_12_14, _21_22_24, _31_32_34),<br>                <span class="hljs-built_in">minor</span>(_11_12_13, _21_22_23, _31_32_33)<br>            );<br>            <span class="hljs-meta">#<span class="hljs-keyword">undef</span> minor</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">transpose</span>(cofactors) / <span class="hljs-built_in">determinant</span>(input);<br>        &#125;<br><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Input</span><br>        &#123;<br>            half param : COLOR;<br>        &#125;;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> UNITY_PROCEDURAL_INSTANCING_ENABLED</span><br>        unity_ObjectToWorld = IndirectShaderDataBuffer[unity_InstanceID];<br>        unity_WorldToObject = <span class="hljs-built_in">inverse</span>(unity_ObjectToWorld);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">surf</span><span class="hljs-params">(Input input, inout SurfaceOutputStandard o)</span></span><br><span class="hljs-function">        </span>&#123;<br>            o.Albedo = _Color.rgb;<br>            o.Metallic = _Metallic;<br>            o.Smoothness = _Smoothness;<br>        &#125;<br>        ENDCG<br>    &#125;<br>    FallBack <span class="hljs-string">&quot;Diffuse&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/js0907/article/details/122418318">ComputeShder和DrawMeshInstancedIndirect相关小注</a></li><li><a href="https://zhuanlan.zhihu.com/p/354633512">URP渲染管线 - GPUInstance绘制草地</a><ul><li><a href="https://github.com/wlgys8/URPLearn/tree/master/Assets/URPLearn/GrassGPUInstances">https://github.com/wlgys8/URPLearn/tree/master/Assets/URPLearn/GrassGPUInstances</a></li></ul></li><li><a href="https://www.lfzxb.top/massive-grass-rendering-based-on-gpu-instance/">基于GPU Instance的草地渲染学习笔记</a></li><li><a href="https://github.com/keijiro/Swarm">https://github.com/keijiro/Swarm</a><ul><li><a href="https://github.com/keijiro/Swarm/blob/master/Assets/Swarm/Shader/Tube.shader">https://github.com/keijiro/Swarm/blob/master/Assets/Swarm/Shader/Tube.shader</a></li></ul></li><li><a href="https://github.com/irontree2022/1msRenderVegetation">https://github.com/irontree2022/1msRenderVegetation</a><ul><li><a href="https://www.bilibili.com/video/BV1MN4y1G7G7">1ms 内渲染大规模植被 Job System</a></li><li><a href="https://www.bilibili.com/video/BV14m4y1A7NG">1ms 内渲染大规模植被 Compute Shader</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Terrain Mesh 程序化地形Mesh生成</title>
    <link href="/wild/2022/06/26/lab/S_Unity_Mesh_Terrain/"/>
    <url>/wild/2022/06/26/lab/S_Unity_Mesh_Terrain/</url>
    
    <content type="html"><![CDATA[<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ul><li>Terrain Mesh<ul><li>采样高度图，生成网格position</li><li>计算网格index</li><li>重新计算Normal</li><li>重新计算Bounds</li></ul></li><li>Grass Point<ul><li>计算随机position</li><li>采样高度图作为y值</li><li>以MeshTopology.Points存入Mesh</li></ul></li><li>优化拓展<ul><li>Job System 实现并行生成</li><li>Compute Shader 实现并行生成</li></ul></li></ul><p><img src="/wild/2022/06/26/lab/S_Unity_Mesh_Terrain/image-1669366716418.png"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h4 id="TerrainMesh-cs"><a href="#TerrainMesh-cs" class="headerlink" title="TerrainMesh.cs"></a>TerrainMesh.cs</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshFilter))</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshRenderer))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TerrainMesh</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> terrainGridNum = <span class="hljs-number">250</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> terrainGridSize = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> terrainHeight = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> Texture2D heightMap;<br>    <span class="hljs-keyword">public</span> Material terrainMaterial;<br>    <span class="hljs-keyword">public</span> TerrainGrass terrainGrass;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        CreateTerrain();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateTerrain</span>()</span><br>    &#123;<br>        List&lt;Vector3&gt; verts = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;();<br>        List&lt;Vector2&gt; uvs = <span class="hljs-keyword">new</span> List&lt;Vector2&gt;();<br>        List&lt;<span class="hljs-built_in">int</span>&gt; indices = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><br>        Vector3 center = <span class="hljs-keyword">new</span> Vector3(terrainGridNum / <span class="hljs-number">2.0f</span> * terrainGridSize, <span class="hljs-number">0</span>,<br>            terrainGridNum / <span class="hljs-number">2.0f</span> * terrainGridSize);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; terrainGridNum; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; terrainGridNum; j++)<br>            &#123;<br>                <span class="hljs-built_in">float</span> u = (<span class="hljs-built_in">float</span>) i / terrainGridNum * heightMap.width;<br>                <span class="hljs-built_in">float</span> v = (<span class="hljs-built_in">float</span>) j / terrainGridNum * heightMap.height;<br>                <span class="hljs-built_in">float</span> h = heightMap.GetPixel((<span class="hljs-built_in">int</span>) u, (<span class="hljs-built_in">int</span>) v).grayscale * terrainHeight;<br>                <span class="hljs-comment">// float h = heightMap.GetPixel(i, j).grayscale * terrainHeight;</span><br>                Vector3 pos = <span class="hljs-keyword">new</span> Vector3(i * terrainGridSize, h, j * terrainGridSize);<br><br>                verts.Add(pos - center);<br>                uvs.Add(<span class="hljs-keyword">new</span> Vector2((<span class="hljs-built_in">float</span>) i / terrainGridNum, (<span class="hljs-built_in">float</span>) j / terrainGridNum));<br><br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                indices.Add(terrainGridNum * i + j);<br>                indices.Add(terrainGridNum * i + j - <span class="hljs-number">1</span>);<br>                indices.Add(terrainGridNum * (i - <span class="hljs-number">1</span>) + j - <span class="hljs-number">1</span>);<br>                indices.Add(terrainGridNum * (i - <span class="hljs-number">1</span>) + j - <span class="hljs-number">1</span>);<br>                indices.Add(terrainGridNum * (i - <span class="hljs-number">1</span>) + j);<br>                indices.Add(terrainGridNum * i + j);<br>            &#125;<br>        &#125;<br><br>        Mesh terrainMesh = <span class="hljs-keyword">new</span> Mesh();<br>        terrainMesh.vertices = verts.ToArray();<br>        terrainMesh.uv = uvs.ToArray();<br>        terrainMesh.triangles = indices.ToArray();<br>        terrainMesh.RecalculateNormals();<br>        terrainMesh.RecalculateBounds();<br><br>        GetComponent&lt;MeshFilter&gt;().mesh = terrainMesh;<br>        GetComponent&lt;MeshRenderer&gt;().sharedMaterial = terrainMaterial;<br><br>        UpdateGrass();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateGrass</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (terrainGrass)<br>        &#123;<br>            terrainGrass.terrainMesh = <span class="hljs-keyword">this</span>;<br>            terrainGrass.GeneratePoints();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><br>[<span class="hljs-meta">CustomEditor(typeof(TerrainMesh))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TerrainMeshEditor</span> : <span class="hljs-title">Editor</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>    &#123;<br>        EditorGUI.BeginChangeCheck();<br>        <span class="hljs-keyword">base</span>.OnInspectorGUI();<br>        TerrainMesh terrainMesh = target <span class="hljs-keyword">as</span> TerrainMesh;<br>        <span class="hljs-keyword">if</span> (!terrainMesh) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">if</span> (EditorGUI.EndChangeCheck())<br>        &#123;<br>            terrainMesh.CreateTerrain();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;Update&quot;</span>, GUILayout.MaxWidth(<span class="hljs-number">100</span>)))<br>        &#123;<br>            terrainMesh.CreateTerrain();<br>        &#125;<br><br>        GUILayout.Space(<span class="hljs-number">12</span>);<br>        <span class="hljs-built_in">int</span> verts = terrainMesh.terrainGridNum * terrainMesh.terrainGridNum;<br>        <span class="hljs-built_in">int</span> tris = (terrainMesh.terrainGridNum - <span class="hljs-number">1</span>) * (terrainMesh.terrainGridNum - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        GUILayout.Label(<span class="hljs-string">$&quot;Verts Num : <span class="hljs-subst">&#123;verts&#125;</span>&quot;</span>);<br>        GUILayout.Label(<span class="hljs-string">$&quot;Tris Num : <span class="hljs-subst">&#123;tris&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h4 id="TerrainGrass-cs"><a href="#TerrainGrass-cs" class="headerlink" title="TerrainGrass.cs"></a>TerrainGrass.cs</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> Random = UnityEngine.Random;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshFilter))</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshRenderer))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TerrainGrass</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> num = <span class="hljs-number">1000</span>;<br>    [<span class="hljs-meta">Range(1, 1000)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> seed = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> Material material;<br>    <span class="hljs-keyword">public</span> TerrainMesh terrainMesh;<br>    <span class="hljs-keyword">private</span> Vector3 m_center;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> m_size;<br>    <span class="hljs-keyword">private</span> List&lt;Vector3&gt; m_points;<br>    <span class="hljs-keyword">private</span> Texture2D m_heightMap;<br>    [<span class="hljs-meta">Range(0, 10)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> gizmosScale = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        m_center = terrainMesh.gameObject.transform.position;<br>        m_size = terrainMesh.terrainGridNum * terrainMesh.terrainGridSize;<br>        m_heightMap = terrainMesh.heightMap;<br>        GeneratePoints();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GeneratePoints</span>()</span><br>    &#123;<br>        gameObject.transform.position = m_center;<br><br>        m_points = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;();<br>        <span class="hljs-keyword">var</span> indices = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[num];<br><br>        <span class="hljs-built_in">int</span> width = m_heightMap.width;<br>        <span class="hljs-built_in">int</span> height = m_heightMap.height;<br>        <br>        Random.InitState(seed);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">var</span> x = Random.<span class="hljs-keyword">value</span>;<br>            <span class="hljs-keyword">var</span> y = Random.<span class="hljs-keyword">value</span>;<br>            <span class="hljs-built_in">float</span> h = m_heightMap.GetPixel((<span class="hljs-built_in">int</span>) (x * width), (<span class="hljs-built_in">int</span>) (y * height)).grayscale;<br><br>            <span class="hljs-keyword">var</span> pos = <span class="hljs-keyword">new</span> Vector3(<br>                x * m_size - m_size / <span class="hljs-number">2</span>,<br>                h * terrainMesh.terrainHeight,<br>                y * m_size - m_size / <span class="hljs-number">2</span>);<br><br>            m_points.Add(pos);<br>            indices[i] = i;<br>        &#125;<br><br>        Mesh mesh = <span class="hljs-keyword">new</span> Mesh();<br><br>        mesh.vertices = m_points.ToArray();<br>        mesh.SetIndices(indices, MeshTopology.Points, <span class="hljs-number">0</span>);<br><br>        GetComponent&lt;MeshFilter&gt;().mesh = mesh;<br>        GetComponent&lt;MeshRenderer&gt;().sharedMaterial = material;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDrawGizmos</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_points == <span class="hljs-literal">null</span> || m_points.Count &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>        Gizmos.color = Color.green;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> point <span class="hljs-keyword">in</span> m_points)<br>        &#123;<br>            Gizmos.DrawSphere(point, gizmosScale);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><br>[<span class="hljs-meta">CustomEditor(typeof(TerrainGrass))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TerrainGrassEditor</span> : <span class="hljs-title">Editor</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>    &#123;<br>        EditorGUI.BeginChangeCheck();<br>        <span class="hljs-keyword">base</span>.OnInspectorGUI();<br>        TerrainGrass terrainGrass = target <span class="hljs-keyword">as</span> TerrainGrass;<br>        <span class="hljs-keyword">if</span> (!terrainGrass) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">if</span> (EditorGUI.EndChangeCheck())<br>        &#123;<br>            terrainGrass.GeneratePoints();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (GUILayout.Button(<span class="hljs-string">&quot;Update&quot;</span>, GUILayout.MaxWidth(<span class="hljs-number">100</span>)))<br>        &#123;<br>            terrainGrass.GeneratePoints();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/29632347">利用GPU实现无尽草地的实时渲染</a></li><li><a href="https://github.com/chenjd/Realistic-Real-Time-Grass-Rendering-With-Unity">Realistic-Real-Time-Grass-Rendering-With-Unity</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>PCG</tag>
      
      <tag>Mesh</tag>
      
      <tag>Terrain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Shader - Geometry Shader入门</title>
    <link href="/wild/2022/06/26/lab/S_Shader_Geometry/"/>
    <url>/wild/2022/06/26/lab/S_Shader_Geometry/</url>
    
    <content type="html"><![CDATA[<h3 id="Geometry-Shader"><a href="#Geometry-Shader" class="headerlink" title="Geometry Shader"></a>Geometry Shader</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol><li>vertex阶段输出顶点数据 &#x3D;&gt; geometry阶段</li><li>geometry阶段输入顶点数据</li><li>生成一系列顶点数据</li><li>按顺序输出 &#x3D;&gt; fragment阶段</li></ol><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><ul><li>可以用来制作粒子系统</li><li>利用点云生成Instance，集群渲染</li><li>Mesh置换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">[<span class="hljs-built_in">maxvertexcount</span>(<span class="hljs-number">30</span>)]<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">geom</span><span class="hljs-params">(point v2g points[<span class="hljs-number">1</span>], inout TriangleStream&lt;g2f&gt; triStream)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> vertexCount = <span class="hljs-number">12</span>;<br>    <span class="hljs-type">const</span> float4 root = points[<span class="hljs-number">0</span>].pos;<br>    g2f v[vertexCount] = &#123;...&#125;;<br><br>    <span class="hljs-function">UNITY_UNROLL</span><br><span class="hljs-function">    <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexCount; i++)</span></span><br><span class="hljs-function">    </span>&#123;<br>        float4 pos = root + <span class="hljs-built_in">float4</span>(x, y, z, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 在此阶段进行坐标变换</span><br>        v[i].pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(pos);<br>    &#125;<br><br>    <span class="hljs-function">UNITY_UNROLL</span><br><span class="hljs-function">    <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt; (vertexCount - <span class="hljs-number">2</span>); p++)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 定义顶点顺序</span><br>        triStream.<span class="hljs-built_in">Append</span>(v[p]);<br>        triStream.<span class="hljs-built_in">Append</span>(v[p + <span class="hljs-number">2</span>]);<br>        triStream.<span class="hljs-built_in">Append</span>(v[p + <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><h5 id="GeometryShader-shader"><a href="#GeometryShader-shader" class="headerlink" title="GeometryShader.shader"></a>GeometryShader.shader</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs c++">Shader <span class="hljs-string">&quot;Grass/Grass_GeometryShader&quot;</span><br>&#123;<br>    Properties<br>    &#123;<br>        _Height(<span class="hljs-string">&quot;Grass Height&quot;</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)) = <span class="hljs-number">3</span><br>        _Width(<span class="hljs-string">&quot;Grass Width&quot;</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)) = <span class="hljs-number">0.1</span><br>        _Color(<span class="hljs-string">&quot;Color&quot;</span>,Color) = (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>        _NormalSmooth(<span class="hljs-string">&quot;Normal Smooth&quot;</span>, <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) = <span class="hljs-number">0.5</span><br>    &#125;<br>    SubShader<br>    &#123;<br>        Cull off<br>        Tags<br>        &#123;<br>            <span class="hljs-string">&quot;Queue&quot;</span> = <span class="hljs-string">&quot;AlphaTest&quot;</span> <span class="hljs-string">&quot;RenderType&quot;</span> = <span class="hljs-string">&quot;TransparentCutout&quot;</span> <span class="hljs-string">&quot;IgnoreProjector&quot;</span> = <span class="hljs-string">&quot;True&quot;</span><br>        &#125;<br><br>        Pass<br>        &#123;<br>            Cull OFF<br>            Tags<br>            &#123;<br>                <span class="hljs-string">&quot;LightMode&quot;</span> = <span class="hljs-string">&quot;ForwardBase&quot;</span><br>            &#125;<br>            AlphaToMask On<br><br><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;UnityCG.cginc&quot;</span></span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vert</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment frag</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> geometry geom</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;UnityLightingCommon.cginc&quot;</span></span><br><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> target 4.0</span><br><br>            <span class="hljs-keyword">struct</span> v2g<br>            &#123;<br>                float4 pos : SV_POSITION;<br>                half3 norm : NORMAL;<br>                half2 uv : TEXCOORD0;<br>            &#125;;<br><br>            <span class="hljs-keyword">struct</span> <span class="hljs-title class_">g2f</span><br>            &#123;<br>                float4 pos : SV_POSITION;<br>                half3 norm : NORMAL;<br>                half2 uv : TEXCOORD0;<br>            &#125;;<br><br>            <span class="hljs-function">v2g <span class="hljs-title">vert</span><span class="hljs-params">(appdata_full v)</span></span><br><span class="hljs-function">            </span>&#123;<br>                v2g o;<br>                o.pos = v.vertex;<br>                o.norm = v.normal;<br>                o.uv = v.texcoord;<br>                <span class="hljs-keyword">return</span> o;<br>            &#125;<br><br>            <span class="hljs-type">float</span> _Height;<br>            <span class="hljs-type">float</span> _Width;<br>            half4 _Color;<br>            half _NormalSmooth;<br><br>            <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rand</span><span class="hljs-params">(float2 uv)</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>, <span class="hljs-number">78.233</span>))) * <span class="hljs-number">43758.5453</span>);<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">remap</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> oldMin, <span class="hljs-type">float</span> oldMax, <span class="hljs-type">float</span> newMin, <span class="hljs-type">float</span> newMax)</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">lerp</span>(newMin, newMax, x / (oldMax - oldMin));<br>            &#125;<br><br>            <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">remap01</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">float</span> min, <span class="hljs-type">float</span> max)</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">lerp</span>(min, max, x);<br>            &#125;<br>            [<span class="hljs-built_in">maxvertexcount</span>(<span class="hljs-number">30</span>)]<br>            <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">geom</span><span class="hljs-params">(point v2g points[<span class="hljs-number">1</span>], inout TriangleStream&lt;g2f&gt; triStream)</span></span><br><span class="hljs-function">            </span>&#123;<br>                <span class="hljs-type">const</span> float4 root = points[<span class="hljs-number">0</span>].pos;<br>                <span class="hljs-type">const</span> <span class="hljs-type">int</span> vertexCount = <span class="hljs-number">12</span>;<br><br><br>                half random = <span class="hljs-built_in">rand</span>(root.xz);<br><br>                <span class="hljs-type">float</span> angle = random * UNITY_PI * <span class="hljs-number">2</span>;<br>                <span class="hljs-type">float</span> faceNormalAngle = angle + UNITY_PI / <span class="hljs-number">2</span>;<br><br>                half2 direction = <span class="hljs-built_in">half2</span>(<span class="hljs-built_in">cos</span>(angle), <span class="hljs-built_in">sin</span>(angle));<br>                half3 faceNormal = <span class="hljs-built_in">half3</span>(<span class="hljs-built_in">cos</span>(faceNormalAngle), <span class="hljs-number">0</span>, <span class="hljs-built_in">sin</span>(faceNormalAngle));<br>                faceNormal = <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">lerp</span>(faceNormal, <span class="hljs-built_in">half3</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), _NormalSmooth));<br><br>                g2f v[vertexCount];<br>                <span class="hljs-function">UNITY_UNROLL</span><br><span class="hljs-function">                <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexCount; i++)</span></span><br><span class="hljs-function">                </span>&#123;<br>                    <span class="hljs-type">const</span> uint h = (uint)i / <span class="hljs-number">2</span>;<br><br>                    <span class="hljs-type">const</span> <span class="hljs-type">float</span> length = (<span class="hljs-number">1</span> - h / ((vertexCount - <span class="hljs-number">2</span>) / <span class="hljs-number">2.0</span>)) * _Width / <span class="hljs-number">2</span>;<br>                    half2 dir = (<span class="hljs-built_in">fmod</span>(i, <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>) ? direction : -direction;<br>                    dir *= length;<br><br>                    <span class="hljs-type">const</span> float3 pos = root + <span class="hljs-built_in">float3</span>(dir.x, h * _Height, dir.y) * <span class="hljs-built_in">remap01</span>(random, <span class="hljs-number">0.3</span>, <span class="hljs-number">1.2</span>);<br><br>                    g2f gPoint;<br>                    gPoint.pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(pos);<br>                    gPoint.norm = faceNormal;<br>                    gPoint.uv = <span class="hljs-built_in">half2</span>(i, <span class="hljs-number">0</span>);<br>                    v[i] = gPoint;<br>                &#125;<br><br>                <span class="hljs-function">UNITY_UNROLL</span><br><span class="hljs-function">                <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt; (vertexCount - <span class="hljs-number">2</span>); p++)</span></span><br><span class="hljs-function">                </span>&#123;<br>                    triStream.<span class="hljs-built_in">Append</span>(v[p]);<br>                    triStream.<span class="hljs-built_in">Append</span>(v[p + <span class="hljs-number">2</span>]);<br>                    triStream.<span class="hljs-built_in">Append</span>(v[p + <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-function">half4 <span class="hljs-title">frag</span><span class="hljs-params">(g2f IN,fixed facing : VFACE)</span> : COLOR</span><br><span class="hljs-function">            &#123;</span><br>                half3 worldNormal = <span class="hljs-built_in">UnityObjectToWorldNormal</span>(IN.norm);<br>                <span class="hljs-comment">//ads</span><br>                fixed3 light;<br>                <span class="hljs-comment">//ambient</span><br>                fixed3 ambient = <span class="hljs-built_in">ShadeSH9</span>(<span class="hljs-built_in">half4</span>(worldNormal, <span class="hljs-number">1</span>));<br>                <span class="hljs-comment">//diffuse</span><br>                fixed3 diffuseLight = <span class="hljs-built_in">saturate</span>(<span class="hljs-built_in">dot</span>(worldNormal, <span class="hljs-built_in">UnityWorldSpaceLightDir</span>(IN.pos))) * _LightColor0;<br>                <span class="hljs-comment">//specular Blinn-Phong </span><br>                fixed3 halfVector = <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">UnityWorldSpaceLightDir</span>(IN.pos) + <span class="hljs-built_in">WorldSpaceViewDir</span>(IN.pos));<br>                fixed3 specularLight = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">saturate</span>(<span class="hljs-built_in">dot</span>(worldNormal, halfVector)), <span class="hljs-number">15</span>) * _LightColor0;<br><br>                light = ambient + diffuseLight + specularLight;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">half4</span>(light, <span class="hljs-number">1</span>) * _Color;<br>                <span class="hljs-comment">// return facing &gt; 0 ? 1 : 0;</span><br>                <span class="hljs-comment">// return half4(IN.norm / 2 + 0.5, 1);</span><br>            &#125;<br>            ENDCG<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="PointRender-cs"><a href="#PointRender-cs" class="headerlink" title="PointRender.cs"></a>PointRender.cs</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c#">[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshFilter))</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(MeshRenderer))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PointRender</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Material geoMaterial;<br>    <span class="hljs-keyword">private</span> Mesh m_pointMesh;<br>    [<span class="hljs-meta">Range(0, 5)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> radius = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        m_pointMesh = CreatePointMesh();<br><br>        GetComponent&lt;MeshFilter&gt;().mesh = m_pointMesh;<br>        GetComponent&lt;MeshRenderer&gt;().sharedMaterial = geoMaterial;<br>    &#125;<br><br>    <span class="hljs-function">Mesh <span class="hljs-title">CreatePointMesh</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> num = <span class="hljs-number">100</span></span>)</span><br>    &#123;<br>        m_pointMesh = <span class="hljs-keyword">new</span> Mesh();<br><br>        <span class="hljs-keyword">var</span> verts = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;(num);<br>        <span class="hljs-keyword">var</span> indices = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[num];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>        &#123;<br>            <span class="hljs-keyword">var</span> pos = Random.insideUnitCircle;<br>            verts.Add(<span class="hljs-keyword">new</span> Vector3(pos.x * radius, <span class="hljs-number">0</span>, pos.y * radius));<br>            indices[i] = i;<br>        &#125;<br><br>        m_pointMesh.vertices = verts.ToArray();<br>        m_pointMesh.SetIndices(indices, MeshTopology.Points, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> m_pointMesh;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/29632347">利用GPU实现无尽草地的实时渲染</a></li><li><a href="https://github.com/chenjd/Realistic-Real-Time-Grass-Rendering-With-Unity">Realistic-Real-Time-Grass-Rendering-With-Unity</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Height Map to Normal Map</title>
    <link href="/wild/2022/06/26/lab/S_Unity_Height_Normal/"/>
    <url>/wild/2022/06/26/lab/S_Unity_Height_Normal/</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.bilibili.com/video/BV1794y197mF/">【Unity】如何计算顶点法线</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Shader Graph 源码学习</title>
    <link href="/wild/2022/06/26/lab/S_Unity_ShaderGraph/"/>
    <url>/wild/2022/06/26/lab/S_Unity_ShaderGraph/</url>
    
    <content type="html"><![CDATA[<h3 id="Noise-Random"><a href="#Noise-Random" class="headerlink" title="Noise | Random"></a>Noise | Random</h3><h4 id="RandomRangeNode"><a href="#RandomRangeNode" class="headerlink" title="RandomRangeNode"></a>RandomRangeNode</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Random</span><span class="hljs-params">(<span class="hljs-type">float</span> seed)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(Seed, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>, <span class="hljs-number">78.233</span>)))*<span class="hljs-number">43758.5453</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">RandomRange</span><span class="hljs-params">(<span class="hljs-type">float</span> seed, <span class="hljs-type">float</span> min, <span class="hljs-type">float</span> max)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> randomno =  <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(Seed, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>, <span class="hljs-number">78.233</span>)))*<span class="hljs-number">43758.5453</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lerp</span>(Min, Max, randomno);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Unity-SimpleNoise"><a href="#Unity-SimpleNoise" class="headerlink" title="Unity_SimpleNoise"></a>Unity_SimpleNoise</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">Unity_SimpleNoise_RandomValue_float</span> <span class="hljs-params">(float2 uv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> angle = <span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>, <span class="hljs-number">78.233</span>));<br>    <span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(SHADER_API_MOBILE) &amp;&amp; (defined(SHADER_API_GLES) || defined(SHADER_API_GLES3) || defined(SHADER_API_VULKAN))</span><br>        <span class="hljs-comment">// &#x27;sin()&#x27; has bad precision on Mali GPUs for inputs &gt; 10000</span><br>        angle = <span class="hljs-built_in">fmod</span>(angle, TWO_PI); <span class="hljs-comment">// Avoid large inputs to sin()</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(angle)*<span class="hljs-number">43758.5453</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">Unity_SimpleNnoise_Interpolate_float</span> <span class="hljs-params">(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b, <span class="hljs-type">float</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1.0</span>-t)*a + (t*b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">float</span> <span class="hljs-title">Unity_SimpleNoise_ValueNoise_float</span> <span class="hljs-params">(float2 uv)</span></span><br><span class="hljs-function"></span>&#123;<br>    float2 i = <span class="hljs-built_in">floor</span>(uv);<br>    float2 f = <span class="hljs-built_in">frac</span>(uv);<br>    f = f * f * (<span class="hljs-number">3.0</span> - <span class="hljs-number">2.0</span> * f);<br><br>    uv = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">frac</span>(uv) - <span class="hljs-number">0.5</span>);<br>    float2 c0 = i + <span class="hljs-built_in">float2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>);<br>    float2 c1 = i + <span class="hljs-built_in">float2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>);<br>    float2 c2 = i + <span class="hljs-built_in">float2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>);<br>    float2 c3 = i + <span class="hljs-built_in">float2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>);<br>    <span class="hljs-type">float</span> r0 = <span class="hljs-built_in">Unity_SimpleNoise_RandomValue_float</span>(c0);<br>    <span class="hljs-type">float</span> r1 = <span class="hljs-built_in">Unity_SimpleNoise_RandomValue_float</span>(c1);<br>    <span class="hljs-type">float</span> r2 = <span class="hljs-built_in">Unity_SimpleNoise_RandomValue_float</span>(c2);<br>    <span class="hljs-type">float</span> r3 = <span class="hljs-built_in">Unity_SimpleNoise_RandomValue_float</span>(c3);<br><br>    <span class="hljs-type">float</span> bottomOfGrid = <span class="hljs-built_in">Unity_SimpleNnoise_Interpolate_float</span>(r0, r1, f.x);<br>    <span class="hljs-type">float</span> topOfGrid = <span class="hljs-built_in">Unity_SimpleNnoise_Interpolate_float</span>(r2, r3, f.x);<br>    <span class="hljs-type">float</span> t = <span class="hljs-built_in">Unity_SimpleNnoise_Interpolate_float</span>(bottomOfGrid, topOfGrid, f.y);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Unity_SimpleNoise</span><span class="hljs-params">(float2 UV, <span class="hljs-type">float</span> Scale)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> t = <span class="hljs-number">0.0</span>;<br><br>    <span class="hljs-type">float</span> freq = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2.0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">float</span> amp = <span class="hljs-built_in">pow</span>(<span class="hljs-number">0.5</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">3</span><span class="hljs-number">-0</span>));<br>    t += <span class="hljs-built_in">Unity_SimpleNoise_ValueNoise_float</span>(<span class="hljs-built_in">float2</span>(UV.x*Scale/freq, UV.y*Scale/freq))*amp;<br><br>    freq = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2.0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>));<br>    amp = <span class="hljs-built_in">pow</span>(<span class="hljs-number">0.5</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">3</span><span class="hljs-number">-1</span>));<br>    t += <span class="hljs-built_in">Unity_SimpleNoise_ValueNoise_float</span>(<span class="hljs-built_in">float2</span>(UV.x*Scale/freq, UV.y*Scale/freq))*amp;<br><br>    freq = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2.0</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span>));<br>    amp = <span class="hljs-built_in">pow</span>(<span class="hljs-number">0.5</span>, <span class="hljs-built_in">float</span>(<span class="hljs-number">3</span><span class="hljs-number">-2</span>));<br>    t += <span class="hljs-built_in">Unity_SimpleNoise_ValueNoise_float</span>(<span class="hljs-built_in">float2</span>(UV.x*Scale/freq, UV.y*Scale/freq))*amp;<br><br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GradientNoiseNode"><a href="#GradientNoiseNode" class="headerlink" title="GradientNoiseNode"></a>GradientNoiseNode</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">float2 <span class="hljs-title">Unity_GradientNoise_Dir_float</span><span class="hljs-params">(float2 p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Permutation and hashing used in webgl-nosie goo.gl/pX7HtC</span><br>    p = p % <span class="hljs-number">289</span>;<br>    <span class="hljs-comment">// need full precision, otherwise half overflows when p &gt; 1</span><br>    <span class="hljs-type">float</span> x = <span class="hljs-built_in">float</span>(<span class="hljs-number">34</span> * p.x + <span class="hljs-number">1</span>) * p.x % <span class="hljs-number">289</span> + p.y;<br>    x = (<span class="hljs-number">34</span> * x + <span class="hljs-number">1</span>) * x % <span class="hljs-number">289</span>;<br>    x = <span class="hljs-built_in">frac</span>(x / <span class="hljs-number">41</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">normalize</span>(<span class="hljs-built_in">float2</span>(x - <span class="hljs-built_in">floor</span>(x + <span class="hljs-number">0.5</span>), <span class="hljs-built_in">abs</span>(x) - <span class="hljs-number">0.5</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Unity_GradientNoise</span><span class="hljs-params">(float2 UV, <span class="hljs-type">float</span> Scale)</span></span><br><span class="hljs-function"></span>&#123;<br>    float2 p = UV * Scale;<br>    float2 ip = <span class="hljs-built_in">floor</span>(p);<br>    float2 fp = <span class="hljs-built_in">frac</span>(p);<br>    <span class="hljs-type">float</span> d00 = <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">Unity_GradientNoise_Dir_float</span>(ip), fp);<br>    <span class="hljs-type">float</span> d01 = <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">Unity_GradientNoise_Dir_float</span>(ip + <span class="hljs-built_in">float2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)), fp - <span class="hljs-built_in">float2</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br>    <span class="hljs-type">float</span> d10 = <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">Unity_GradientNoise_Dir_float</span>(ip + <span class="hljs-built_in">float2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)), fp - <span class="hljs-built_in">float2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-type">float</span> d11 = <span class="hljs-built_in">dot</span>(<span class="hljs-built_in">Unity_GradientNoise_Dir_float</span>(ip + <span class="hljs-built_in">float2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)), fp - <span class="hljs-built_in">float2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    fp = fp * fp * fp * (fp * (fp * <span class="hljs-number">6</span> - <span class="hljs-number">15</span>) + <span class="hljs-number">10</span>);<br>    Out = <span class="hljs-built_in">lerp</span>(<span class="hljs-built_in">lerp</span>(d00, d01, fp.y), <span class="hljs-built_in">lerp</span>(d10, d11, fp.y), fp.x) + <span class="hljs-number">0.5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="VoronoiNode"><a href="#VoronoiNode" class="headerlink" title="VoronoiNode"></a>VoronoiNode</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> float2 <span class="hljs-title">Unity_Voronoi_RandomVector_float</span> <span class="hljs-params">(float2 UV, <span class="hljs-type">float</span> offset)</span></span><br><span class="hljs-function"></span>&#123;<br>    float2x2 m = <span class="hljs-built_in">float2x2</span>(<span class="hljs-number">15.27</span>, <span class="hljs-number">47.63</span>, <span class="hljs-number">99.41</span>, <span class="hljs-number">89.98</span>);<br>    UV = <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">mul</span>(UV, m)));<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float2</span>(<span class="hljs-built_in">sin</span>(UV.y*+offset)*<span class="hljs-number">0.5</span>+<span class="hljs-number">0.5</span>, <span class="hljs-built_in">cos</span>(UV.x*offset)*<span class="hljs-number">0.5</span>+<span class="hljs-number">0.5</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Unity_Voronoi</span><span class="hljs-params">(float2 UV, <span class="hljs-type">float</span> AngleOffset, <span class="hljs-type">float</span> CellDensity)</span></span><br><span class="hljs-function"></span>&#123;<br>    float2 g = <span class="hljs-built_in">floor</span>(UV * CellDensity);<br>    float2 f = <span class="hljs-built_in">frac</span>(UV * CellDensity);<br>    <span class="hljs-type">float</span> t = <span class="hljs-number">8.0</span>;<br>    float3 res = <span class="hljs-built_in">float3</span>(<span class="hljs-number">8.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">-1</span>; y&lt;=<span class="hljs-number">1</span>; y++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">-1</span>; x&lt;=<span class="hljs-number">1</span>; x++)<br>        &#123;<br>            float2 lattice = <span class="hljs-built_in">float2</span>(x,y);<br>            float2 offset = <span class="hljs-built_in">Unity_Voronoi_RandomVector_float</span>(lattice + g, AngleOffset);<br>            <span class="hljs-type">float</span> d = <span class="hljs-built_in">distance</span>(lattice + offset, f);<br><br>            <span class="hljs-keyword">if</span>(d &lt; res.x)<br>            &#123;<br>                res = <span class="hljs-built_in">float3</span>(d, offset.x, offset.y);<br>                Out = res.x;<br>                Cells = res.y;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NoiseSineWaveNode"><a href="#NoiseSineWaveNode" class="headerlink" title="NoiseSineWaveNode"></a>NoiseSineWaveNode</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">NoiseSineWave</span><span class="hljs-params">(<span class="hljs-type">float</span> In, float2 MinMax)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> sinIn = <span class="hljs-built_in">sin</span>(In);<br>    <span class="hljs-type">float</span> sinInOffset = <span class="hljs-built_in">sin</span>(In + <span class="hljs-number">1.0</span>);<br>    <span class="hljs-type">float</span> randomno =  <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>((sinIn - sinInOffset) * (<span class="hljs-number">12.9898</span> + <span class="hljs-number">78.233</span>))*<span class="hljs-number">43758.5453</span>);<br>    <span class="hljs-type">float</span> noise = <span class="hljs-built_in">lerp</span>(MinMax.x, MinMax.y, randomno);<br>    <span class="hljs-keyword">return</span> sinIn + noise;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DitherNode"><a href="#DitherNode" class="headerlink" title="DitherNode"></a>DitherNode</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Unity_Dither</span><span class="hljs-params">(<span class="hljs-type">float</span> In, float2 ScreenPosition)</span></span><br><span class="hljs-function"></span>&#123;<br>    float2 uv = ScreenPosition.xy * _ScreenParams.xy;<br>    <span class="hljs-type">float</span> DITHER_THRESHOLDS[<span class="hljs-number">16</span>] =<br>    &#123;<br>        <span class="hljs-number">1.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">9.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">3.0</span> / <span class="hljs-number">17.0</span>, <span class="hljs-number">11.0</span> / <span class="hljs-number">17.0</span>,<br>        <span class="hljs-number">13.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">5.0</span> / <span class="hljs-number">17.0</span>, <span class="hljs-number">15.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">7.0</span> / <span class="hljs-number">17.0</span>,<br>        <span class="hljs-number">4.0</span> / <span class="hljs-number">17.0</span>, <span class="hljs-number">12.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">2.0</span> / <span class="hljs-number">17.0</span>, <span class="hljs-number">10.0</span> / <span class="hljs-number">17.0</span>,<br>        <span class="hljs-number">16.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">8.0</span> / <span class="hljs-number">17.0</span>, <span class="hljs-number">14.0</span> / <span class="hljs-number">17.0</span>,  <span class="hljs-number">6.0</span> / <span class="hljs-number">17.0</span><br>    &#125;;<br>    uint index = (<span class="hljs-built_in">uint</span>(uv.x) % <span class="hljs-number">4</span>) * <span class="hljs-number">4</span> + <span class="hljs-built_in">uint</span>(uv.y) % <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">return</span> In - DITHER_THRESHOLDS[index];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="Remap"><a href="#Remap" class="headerlink" title="Remap"></a>Remap</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">Remap</span><span class="hljs-params">(<span class="hljs-type">float</span> In, float2 InMinMax, float2 OutMinMax)</span></span><br><span class="hljs-function"></span>&#123;<br>    Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NormalFromHeight"><a href="#NormalFromHeight" class="headerlink" title="NormalFromHeight"></a>NormalFromHeight</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">float3 <span class="hljs-title">Unity_NormalFromHeight</span><span class="hljs-params">(<span class="hljs-type">float</span> In, <span class="hljs-type">float</span> Strength, float3 Position, float3x3 TangentMatrix)</span></span><br><span class="hljs-function"></span>&#123;<br>    float3 worldDerivativeX = <span class="hljs-built_in">ddx</span>(Position);<br>    float3 worldDerivativeY = <span class="hljs-built_in">ddy</span>(Position);<br><br>    float3 crossX = <span class="hljs-built_in">cross</span>(TangentMatrix[<span class="hljs-number">2</span>].xyz, worldDerivativeX);<br>    float3 crossY = <span class="hljs-built_in">cross</span>(worldDerivativeY, TangentMatrix[<span class="hljs-number">2</span>].xyz);<br>    <span class="hljs-type">float</span> d = <span class="hljs-built_in">dot</span>(worldDerivativeX, crossY);<br>    <span class="hljs-type">float</span> sgn = d &lt; <span class="hljs-number">0.0</span> ? (<span class="hljs-number">-1.0f</span>) : <span class="hljs-number">1.0f</span>;<br>    <span class="hljs-type">float</span> surface = sgn / <span class="hljs-built_in">max</span>(<span class="hljs-number">0.000000000000001192093f</span>, <span class="hljs-built_in">abs</span>(d));<br><br>    <span class="hljs-type">float</span> dHdx = <span class="hljs-built_in">ddx</span>(In);<br>    <span class="hljs-type">float</span> dHdy = <span class="hljs-built_in">ddy</span>(In);<br>    float3 surfGrad = surface * (dHdx*crossY + dHdy*crossX);<br>    float3 Out = <span class="hljs-built_in">SafeNormalize</span>(TangentMatrix[<span class="hljs-number">2</span>].xyz - (Strength * surfGrad));<br><br>    <span class="hljs-comment">// if (outputSpace == OutputSpace.Tangent)</span><br>    <span class="hljs-comment">//     Out = TransformWorldToTangent(Out, TangentMatrix);</span><br>    <br>    <span class="hljs-keyword">return</span> Out;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Custom Property Label 自定义属性显示</title>
    <link href="/wild/2022/06/20/lab/S_Unity_Custom_Attribute/"/>
    <url>/wild/2022/06/20/lab/S_Unity_Custom_Attribute/</url>
    
    <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>Test.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">// 使用方式</span><br>    [<span class="hljs-meta">Label(<span class="hljs-string">&quot;数量&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> num;<br>    [<span class="hljs-meta">Label(<span class="hljs-string">&quot;名字&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>LabelAttribute.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LabelAttribute</span> : <span class="hljs-title">PropertyAttribute</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LabelAttribute</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>    &#123;<br>        Name = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><br>[<span class="hljs-meta">CustomPropertyDrawer(typeof(LabelAttribute))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LabelAttributeDrawer</span> : <span class="hljs-title">PropertyDrawer</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>(<span class="hljs-params">Rect position, SerializedProperty property, GUIContent label</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// label显示名字</span><br>        <span class="hljs-keyword">if</span> (attribute <span class="hljs-keyword">is</span> LabelAttribute attr &amp;&amp; attr.Name.Length &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            label.text = attr.Name;<br>        &#125;<br>        <span class="hljs-comment">// 属性</span><br>        EditorGUI.PropertyField(position, property, label);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/376d14e54a40">Unity的Inspector面板挂载的脚本显示中文变量名</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Attribute</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Viewport 显示文字</title>
    <link href="/wild/2022/06/20/lab/S_Unity_Viewport_Text/"/>
    <url>/wild/2022/06/20/lab/S_Unity_Viewport_Text/</url>
    
    <content type="html"><![CDATA[<h3 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h3><ul><li>Handles.Label()</li><li><a href="https://gist.github.com/Arakade/9dd844c2f9c10e97e3d0">https://gist.github.com/Arakade/9dd844c2f9c10e97e3d0</a></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DrawText</span>(<span class="hljs-params">Vector3 worldPos, <span class="hljs-built_in">string</span> text, Color? colour = <span class="hljs-literal">null</span></span>)</span><br>&#123;<br>    Handles.BeginGUI();<br>    <span class="hljs-keyword">if</span> (colour.HasValue) GUI.color = colour.Value;<br>    <span class="hljs-keyword">var</span> view = SceneView.currentDrawingSceneView;<br>    Vector3 screenPos = view.camera.WorldToScreenPoint(worldPos);<br>    Vector2 size = GUI.skin.label.CalcSize(<span class="hljs-keyword">new</span> GUIContent(text));<br>    <span class="hljs-comment">// GUI.Label(new Rect(screenPos.x - (size.x / 2), -screenPos.y + view.position.height + 4, size.x, size.y), text);</span><br>    GUI.Label(<span class="hljs-keyword">new</span> Rect(screenPos.x + <span class="hljs-number">15</span>, view.position.height - screenPos.y, size.x, size.y), text);<br>    Handles.EndGUI();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Houdini PDG学习笔记</title>
    <link href="/wild/2021/11/25/log/P_Houdini_PDG/"/>
    <url>/wild/2021/11/25/log/P_Houdini_PDG/</url>
    
    <content type="html"><![CDATA[<h3 id="（一）Python-Processor"><a href="#（一）Python-Processor" class="headerlink" title="（一）Python Processor"></a>（一）Python Processor</h3><h4 id="1-常见属性类型"><a href="#1-常见属性类型" class="headerlink" title="1.常见属性类型"></a>1.常见属性类型</h4><ul><li>pdg.attribType.Int</li><li>pdg.attribType.Float</li><li>pdg.attribType.String</li><li>pdg.attribType.File</li><li>pdg.attribType.Geometry</li></ul><h5 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h5><ul><li>存储Houdini几何信息</li><li>只能被支持处理Geometry类型的节点使用，例如Invoke和Geometry Import<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#返回int , float , str or pdg.File类型</span><br>item.attribValue(name)<br><br><span class="hljs-comment">#字典查询，获取数值</span><br>attrib = item[name][<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">#设置属性</span><br>item.setIntAttrib(name,value)<br>item.setFloatAttrib(name,value)<br>item.setStringAttrib(name,value)<br><br>item.hasAttrrib(name)<br><br><span class="hljs-comment">#设置文件属性</span><br>file = pdg.File(<span class="hljs-string">&quot;test.hip&quot;</span>, <span class="hljs-string">&quot;file/hip&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">True</span>)<br>item.setFileAttrib(<span class="hljs-string">&quot;hip&quot;</span>, file)<br><br><span class="hljs-comment">#获取上节点输出文件</span><br>file = item.inputResultData[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">#添加文件路径到输出结果</span><br>item.addResultData(file.path,<span class="hljs-string">&quot;file/hip&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-pdg-Node"><a href="#2-pdg-Node" class="headerlink" title="2.pdg.Node"></a>2.pdg.Node</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获取节点</span><br>self<br>item.node<br><br><span class="hljs-comment">#获取节点属性</span><br>self[name].evaluateString()<br>item.node[name].evaluateString()<br></code></pre></td></tr></table></figure><h3 id="（二）Hscript-Expression"><a href="#（二）Hscript-Expression" class="headerlink" title="（二）Hscript Expression"></a>（二）Hscript Expression</h3><h4 id="1-属性"><a href="#1-属性" class="headerlink" title="1.@属性"></a>1.@属性</h4><ul><li>@attribname 获取属性</li><li>@attribname.component 获取分量，可以是xyz或者012</li><li>例如:@pdg_input.0 @pdg_input.1 @pdg_output.0</li></ul><h5 id="内置属性"><a href="#内置属性" class="headerlink" title="内置属性"></a>内置属性</h5><ul><li>@pdg_input</li><li>@pdg_index</li><li>@pdg_output</li></ul><h4 id="2-pdg函数表达式"><a href="#2-pdg函数表达式" class="headerlink" title="2.pdg函数表达式"></a>2.pdg函数表达式</h4><ul><li>pdgattrib(attribname,index)&#x2F;&#x2F;获取属性</li><li>pdgattribs(attribname,index)&#x2F;&#x2F;字符串<br></li><li>pdginput(index,”file&#x2F;tag”,0)&#x2F;&#x2F;获取输入</li><li>pdgoutput(index,”file&#x2F;tag”,0)&#x2F;&#x2F;获取输出</li></ul><h3 id="（三）Partition"><a href="#（三）Partition" class="headerlink" title="（三）Partition"></a>（三）Partition</h3><ul><li>Partition by Index 默认按index排列组合生成子任务，合并属性</li><li>Wait for All 将所有任务合并成一个</li></ul><h5 id="属性合并"><a href="#属性合并" class="headerlink" title="属性合并"></a>属性合并</h5><ul><li>First Value</li><li>Append To Array</li><li>Unique Values</li><li>Max Min Avg Mode</li><li>Python Partition<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(work_items)):<br>    partition_holder.addItemToPartition(work_items[<span class="hljs-built_in">id</span>],<span class="hljs-built_in">id</span>)<br>    <span class="hljs-comment">#index是划分任务的关键</span><br>    partition_holder.addItemToPartition(work_items[<span class="hljs-built_in">id</span>],<span class="hljs-built_in">id</span>//<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="（四）常用Node"><a href="#（四）常用Node" class="headerlink" title="（四）常用Node"></a>（四）常用Node</h3><ol><li>Generic Generator<ul><li>生成子任务</li><li>执行cmd命令</li><li>延时delay</li></ul></li><li>Wedge<ul><li>生成variant属性及子任务</li></ul></li><li>File Pattern<ul><li>抓取、输入文件</li></ul></li><li>Node Pattern<ul><li>抓取Node名字、路径</li></ul></li><li>HDA Processor<ul><li>调用HDA处理几何数据</li></ul></li><li>Invoke<ul><li>调用SOP模块内Complie Block处理几何数据</li><li>相当于调用了一个匿名的HDA函数</li></ul></li><li>Environment Edit<ul><li>创建环境变量</li></ul></li><li>OP Notify<ul><li>执行上面任务后，唤醒其他模块内节点Recook或者按钮pressButton</li><li>相当于回调函数</li></ul></li></ol><h3 id="（五）File-IO"><a href="#（五）File-IO" class="headerlink" title="（五）File IO"></a>（五）File IO</h3><ul><li>Text Output</li><li>CSV Input</li><li>CSV Output</li><li>Json Input &#x2F;&#x2F;Deserialize Workitem</li><li>Json Output</li><li>XML Input</li><li>SQL Input</li><li>SQL Output</li></ul><h3 id="（六）总结：PDG奥义"><a href="#（六）总结：PDG奥义" class="headerlink" title="（六）总结：PDG奥义"></a>（六）总结：PDG奥义</h3><ul><li>生成指令：生成各种子任务，设定属性，生成指令</li><li>执行指令</li></ul>]]></content>
    
    
    <categories>
      
      <category>Houdini</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Houdini</tag>
      
      <tag>PDG</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Houdini VEX | Hscript学习笔记</title>
    <link href="/wild/2021/11/23/log/P_Houdini_Vex_Hscript/"/>
    <url>/wild/2021/11/23/log/P_Houdini_Vex_Hscript/</url>
    
    <content type="html"><![CDATA[<p><a href="%E2%80%8Bwww.sidefx.com/docs/houdini/vex/functions/index.html">Houdini VEX Doc</a></p><h3 id="（一）VEX"><a href="#（一）VEX" class="headerlink" title="（一）VEX"></a>（一）VEX</h3><h4 id="1-矩阵"><a href="#1-矩阵" class="headerlink" title="1.矩阵"></a>1.矩阵</h4><ul><li>eigenvalues(int &amp;nroot,matrix3 mat,vector &amp;real,vector &amp;imaginary) 计算矩阵特征值</li><li>determinant(matrix m) 矩阵行列式</li><li>invert(matrix m) 逆矩阵</li><li>transpose(matrix m) 转置矩阵</li><li>ident() 单位矩阵</li></ul><h5 id="1-1生成矩阵"><a href="#1-1生成矩阵" class="headerlink" title="1.1生成矩阵"></a>1.1生成矩阵</h5><ul><li>matrix3 maketransform(vector zaxis,vector yaxis) 基于Z(N)、Y(up)基向量创建矩阵</li><li>matrix maketransform(vector zaxis,vector yaxis,vector translate) 基于Z(N)、Y(up)基向量创建矩阵</li><li>matrix3 maketransform(int xyz,vector angles) 由欧拉角（弧度）生成旋转矩阵</li><li>matrix maketransform(int trs,int xyz,vector t,vector r,vector s,vector p) 移动T、旋转R、缩放S、轴心P</li></ul><h5 id="1-2投影矩阵"><a href="#1-2投影矩阵" class="headerlink" title="1.2投影矩阵"></a>1.2投影矩阵</h5><ul><li>matrix perspective(float zoom, float image_aspect, float pixel_aspect, float clip_near, float clip_far)</li><li>matrix orthographic(float zoom,float orthowidth,float image_aspect, float pixel_aspect,float clip_near,float clip_far)</li><li>vector toNDC(string camera_name,vector point)</li></ul><h5 id="1-3矩阵其他"><a href="#1-3矩阵其他" class="headerlink" title="1.3矩阵其他"></a>1.3矩阵其他</h5><ul><li>optransform(path) 获取SOP节点transform信息</li><li>cracktransform() 分解矩阵：移动、缩放、旋转</li><li>matrix3 dihedral(vector a,vector b) 计算从向量a旋转到向量b的变换矩阵</li><li>vector4 dihedral(vector a,vector b) 计算从向量a旋转到向量b的变换四元数</li></ul><h4 id="2-四元数"><a href="#2-四元数" class="headerlink" title="2.四元数"></a>2.四元数</h4><ul><li>quaternion(matrix3 rotations) 由矩阵中获取旋转</li><li>quaternion(float angle,vector axis) 由旋转角度、旋转轴生成四元数</li><li>quaternion(vector angleaxis) 建议使用eulertoquaternion()<br></li><li>qrotate(vector4 quaternion,vector v) 旋转向量</li><li>matrix3 qconvert(vector4 quaternion) 四元数转旋转矩阵</li><li>matrix qconvert(vector4 quaternion,vector offset) 四元数转旋转矩阵，后加- 移动</li><li>vector qconvert(vector4 quaternion) 四元数生成欧拉角（弧度）<br></li><li>eulertoquaternion(vector rotations,int order) 由欧拉角（弧度）生成四元数</li><li>quaterniontoeuler(vector4 orient,int order) 四元数生成欧拉角（弧度）</li></ul><h3 id="（二）引用路径"><a href="#（二）引用路径" class="headerlink" title="（二）引用路径"></a>（二）引用路径</h3><h4 id="VEX中的路径"><a href="#VEX中的路径" class="headerlink" title="VEX中的路径"></a>VEX中的路径</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//vex</span><br>vector pos = <span class="hljs-built_in">point</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">3</span>);                      <span class="hljs-comment">//常用input id</span><br>vector pos = <span class="hljs-built_in">point</span>(<span class="hljs-number">-1</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">3</span>);                     <span class="hljs-comment">//spare input id</span><br>vector pos = <span class="hljs-built_in">point</span>(<span class="hljs-string">&quot;op:/obj/geo1/box1&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">3</span>);    <span class="hljs-comment">//abs op path</span><br>vector pos = <span class="hljs-built_in">point</span>(<span class="hljs-string">&quot;op:../box1&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">3</span>);           <span class="hljs-comment">//rel op path</span><br>vector pos = <span class="hljs-built_in">point</span>(<span class="hljs-string">&quot;defgeo.bgeo&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">3</span>);          <span class="hljs-comment">//file path</span><br><br>vector pos = v@opinput1_P;              <span class="hljs-comment">//index相同不同OpInput，不会自动cast</span><br></code></pre></td></tr></table></figure><h4 id="COP模块访问SOP节点路径"><a href="#COP模块访问SOP节点路径" class="headerlink" title="COP模块访问SOP节点路径"></a>COP模块访问SOP节点路径</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//vex snippet code</span><br>op:/obj/geo/box1<br>op:../../../box1<br></code></pre></td></tr></table></figure><h4 id="Hscript中的路径"><a href="#Hscript中的路径" class="headerlink" title="Hscript中的路径"></a>Hscript中的路径</h4><ul><li>SOP访问COP节点路径<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//hscript表达式</span><br>op:`<span class="hljs-built_in">opfullpath</span>(<span class="hljs-string">&quot;../cop2net1/out&quot;</span>)`<br></code></pre></td></tr></table></figure></li></ul><h4 id="HDA内置静态数据路径"><a href="#HDA内置静态数据路径" class="headerlink" title="HDA内置静态数据路径"></a>HDA内置静态数据路径</h4><ul><li>在Type属性中的Extra Data可以内嵌数据</li><li>file中可以使用opdef:..?ball.fbx访问内置数据<br><img src="/wild/2021/11/23/log/P_Houdini_Vex_Hscript/imge_file_embed_02.jpg"><br><img src="/wild/2021/11/23/log/P_Houdini_Vex_Hscript/imge_file_embed_01.jpg"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Houdini</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Houdini</tag>
      
      <tag>VEX</tag>
      
      <tag>Hscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Houdini Python学习笔记</title>
    <link href="/wild/2021/11/22/log/P_Houdini_Python/"/>
    <url>/wild/2021/11/22/log/P_Houdini_Python/</url>
    
    <content type="html"><![CDATA[<h3 id="（一）Node节点"><a href="#（一）Node节点" class="headerlink" title="（一）Node节点"></a>（一）Node节点</h3><p>node &#x3D; hou.pwd() 当前节点<br>geo &#x3D; node.geometry()<br>node.parent() 节点的父级节点<br>node.children() 子节点<br>node.inputs() 节点的输入节点元组<br>node.outputs() 节点的输出节点元组<br>SopNode.setHardLocked(True) 冻结Sop数据</p><h3 id="（二）Node-Parm节点通道属性"><a href="#（二）Node-Parm节点通道属性" class="headerlink" title="（二）Node.Parm节点通道属性"></a>（二）Node.Parm节点通道属性</h3><p>p0 &#x3D; node.parm(‘p0’) 不存在时为None<br>p1 &#x3D; node.parm(‘p1’).eval() 获取节点属性值<br>node.parm(‘p2’).set(2) 设置节点属性值<br>node.parms() 获取所有属性<br>node.setParms({“tx”: 1, “sy”: 3})基于dict字典的赋值方法</p><h4 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">btn = node.parm(<span class="hljs-string">&#x27;Save&#x27;</span>)<br>btn.pressButton()<br></code></pre></td></tr></table></figure><h4 id="ParmTemplate"><a href="#ParmTemplate" class="headerlink" title="ParmTemplate"></a>ParmTemplate</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构造参数</span><br>test_float = hou.FloatParmTemplate(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 代码添加、删除参数</span><br>node.addSpareParmTuple(test_float) <br>node.removeSpareParmTuple(node.parm(<span class="hljs-string">&quot;test&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="Ramp参数"><a href="#Ramp参数" class="headerlink" title="Ramp参数"></a>Ramp参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">ramp = node.evalParmTuple(<span class="hljs-string">&quot;ramp&quot;</span>)[<span class="hljs-number">0</span>]<br>value = ramp.lookup(position)<br><br><span class="hljs-comment"># 添加ramp参数</span><br>ramp_temp = hou.RampParmTemplate(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>,hou.rampParmType.Color,default_value=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># 返回Parm对象而不是ParmTuple</span><br>ramp_parm = node.addSpareParmTuple(ramp_temp)<br>lin = hou.rampBasis.Linear<br>ramp_data = hou.Ramp((lin, lin), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), ((<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>), (<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.2</span>)))<br>ramp_parm.<span class="hljs-built_in">set</span>(ramp_data)<br></code></pre></td></tr></table></figure><h4 id="复制节点参数"><a href="#复制节点参数" class="headerlink" title="复制节点参数"></a>复制节点参数</h4><p>测试复制一个box的参数模板、参数值（还不能复制表达式，参数没有hide、disable）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">box = node.inputs()[<span class="hljs-number">0</span>]<br>parms = box.parmTuples()<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> parms:<br>    tp = p.parmTemplate()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node.parmTuple(tp.name()):<br>        clone = tp.clone()<br>        node.addSpareParmTuple(clone)<br>    node.parmTuple(tp.name()).<span class="hljs-built_in">set</span>(p.<span class="hljs-built_in">eval</span>())<br></code></pre></td></tr></table></figure><h3 id="（三）几何数据"><a href="#（三）几何数据" class="headerlink" title="（三）几何数据"></a>（三）几何数据</h3><h4 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h4><ul><li>geo &#x3D; node.geometry()</li><li>geo.points() 获取Point数据集合</li><li>geo.prims() 获取Prim数据集合</li><li>geo.data() 几何字节码</li><li>bgeo_data &#x3D; geo.data() open(“&#x2F;tmp&#x2F;torus.bgeo”, “wb”).write- (bgeo_data)</li><li>geo.clear() 清除几何数据</li><li>geo.transform(matrix)</li><li>geo.pointGroups() 所有的点组PointGroup</li><li>geo.findPointGroup(groupName) 获取点组</li></ul><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><ul><li>number() 点id</li><li>position() 坐标</li><li>vertices() 相关的顶点</li><li>prims() 相关的面</li><li>weight() 权重值</li><li>PointGroup</li><li>name()</li><li>points() 组内的点集</li></ul><h4 id="创建点、线、面"><a href="#创建点、线、面" class="headerlink" title="创建点、线、面"></a>创建点、线、面</h4><ul><li>geo.createPoint()</li><li>geo.createPolygon(is_closed&#x3D;False) 参数is_closed控制是曲线还是多- 边形</li><li>addVertex() 往Prim里面添加已经存在的Point</li></ul><h4 id="创建Point"><a href="#创建Point" class="headerlink" title="创建Point"></a>创建Point</h4><ul><li>start &#x3D; geo.createPoint()</li><li>start.setPosition(hou.Vector3(0,0,0))</li><li>pt &#x3D; geo.createPoint()</li><li>pt.setPosition(hou.Vector3(0,1,0))</li></ul><h4 id="创建Prim，添加Vertex"><a href="#创建Prim，添加Vertex" class="headerlink" title="创建Prim，添加Vertex"></a>创建Prim，添加Vertex</h4><ul><li>line &#x3D; geo.createPolygon(is_closed&#x3D;False)</li><li>line.addVertex(start)</li><li>line.addVertex(pt)</li></ul><h3 id="（四）几何属性"><a href="#（四）几何属性" class="headerlink" title="（四）几何属性"></a>（四）几何属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">node = hou.pwd()<br>geo = node.geometry()<br>​<br>points = geo.points()<br>prims = geo.prims()<br>​<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> points:<br>    <span class="hljs-built_in">print</span> i.attribValue(<span class="hljs-string">&quot;Cd&quot;</span>)<br>    i.setAttribValue(<span class="hljs-string">&quot;pscale&quot;</span>,<span class="hljs-number">0.5</span>)<br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> prims:<br>    <span class="hljs-built_in">print</span> i.attribValue(<span class="hljs-string">&quot;name&quot;</span>)<br>    i.setAttribValue(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;mask&quot;</span>)<br>​<br><span class="hljs-comment">#detail/global属性</span><br>res = geo.attribValue(<span class="hljs-string">&quot;res&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>一般VEX会自动创建属性类，Python不会自动创建没有的属性类</li><li>自定义的属性需要先addAttrib()，不然会报错的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">thick_attrib = geo.addAttrib(hou.attribType.Point, <span class="hljs-string">&quot;thick&quot;</span>, <span class="hljs-number">1.0</span>) <br>geo.setAttribValue(thick_attrib, <span class="hljs-number">2.2</span>)<br></code></pre></td></tr></table></figure></li><li>添加数组属性addArrayAttrib()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">geo.addArrayAttrib(hou.attribType.Global, <span class="hljs-string">&quot;data&quot;</span>, hou.attribData.Float, tuple_size=<span class="hljs-number">3</span>)<br><span class="hljs-comment"># 步长为3，最终结果为[(1.0, 2.0, 3.0), (4.0, 5.0, 6.0)]</span><br>geo.setGlobalAttribValue(<span class="hljs-string">&quot;data&quot;</span>, [<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>])<br></code></pre></td></tr></table></figure><h3 id="（五）HDA-Python"><a href="#（五）HDA-Python" class="headerlink" title="（五）HDA Python"></a>（五）HDA Python</h3><h4 id="Python-Module"><a href="#Python-Module" class="headerlink" title="Python Module"></a>Python Module</h4><ul><li>node.hdaModule()或者node.hm()访问<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">hou.pwd().hdaModule().test()<br>kwargs[<span class="hljs-string">&#x27;node&#x27;</span>].hdaModule().test()<br>kwargs[<span class="hljs-string">&#x27;node&#x27;</span>].hm().test()<br></code></pre></td></tr></table></figure></li></ul><h4 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#需要在PythonModule中导入</span><br><span class="hljs-keyword">import</span> toolutils<br>mod = toolutils.createModuleFromSection(<span class="hljs-string">&quot;tt&quot;</span>, kwargs[<span class="hljs-string">&quot;type&quot;</span>], <span class="hljs-string">&quot;terrain&quot;</span>)<br>​<br><span class="hljs-comment">#调用时</span><br>kwargs[<span class="hljs-string">&#x27;node&#x27;</span>].hdaModule().mod.test()<br></code></pre></td></tr></table></figure><h4 id="Menu-Script"><a href="#Menu-Script" class="headerlink" title="Menu Script"></a>Menu Script</h4><p>返回值，数量为偶数个字符串的列表，直接的逗号分割即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>[<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ww&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;www&quot;</span>]<br><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br><span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span><br></code></pre></td></tr></table></figure><h3 id="（六）Houdini安装Python-Package"><a href="#（六）Houdini安装Python-Package" class="headerlink" title="（六）Houdini安装Python Package"></a>（六）Houdini安装Python Package</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打开Houdini-&gt;Windows-&gt;Shell，先下载get-pip.py</span><br>curl https://bootstrap.pypa.io/get-pip.py -o D:/get-pip.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装pip</span><br>hython D:/get-pip.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装pip成功后，与python安装package一样的语法</span><br>hython -m pip install gifmaker<br></code></pre></td></tr></table></figure><ul><li>参考视频：<a href="https://www.youtube.com/watch?v=cIEN50WuPoc">https://www.youtube.com/watch?v=cIEN50WuPoc</a></li></ul><h3 id="（七）其他"><a href="#（七）其他" class="headerlink" title="（七）其他"></a>（七）其他</h3><h4 id="获取图片分辨率"><a href="#获取图片分辨率" class="headerlink" title="获取图片分辨率"></a>获取图片分辨率</h4><ul><li>hou.imageResolution(path)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Houdini</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Houdini</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏开发中的Noise噪波生成</title>
    <link href="/wild/2021/10/28/lab/S_Random_Noise/"/>
    <url>/wild/2021/10/28/lab/S_Random_Noise/</url>
    
    <content type="html"><![CDATA[<h2 id="Shader-GPU"><a href="#Shader-GPU" class="headerlink" title="Shader (GPU)"></a>Shader (GPU)</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/346844820">常用噪声算法</a></li><li><a href="https://zhuanlan.zhihu.com/p/390862782">利用shader生成随机数及简单噪声图</a></li><li><a href="https://juejin.cn/post/6844903687505068045">Shader 中的随机与噪声</a></li></ul><h3 id="HLSL"><a href="#HLSL" class="headerlink" title="HLSL"></a>HLSL</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// https://gist.github.com/keijiro/ee7bc388272548396870</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">nrand</span><span class="hljs-params">(float2 uv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>, <span class="hljs-number">78.233</span>))) * <span class="hljs-number">43758.5453</span>);<br>&#125;<br><span class="hljs-comment">// https://gamedev.stackexchange.com/questions/32681/random-number-hlsl</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rand_1_05</span><span class="hljs-params">(in float2 uv)</span></span><br><span class="hljs-function"></span>&#123;<br>    float2 noise = (<span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv ,<span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>,<span class="hljs-number">78.233</span>)*<span class="hljs-number">2.0</span>)) * <span class="hljs-number">43758.5453</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(noise.x + noise.y) * <span class="hljs-number">0.5</span>;<br>&#125;<br><span class="hljs-function">float2 <span class="hljs-title">rand_2_10</span><span class="hljs-params">(in float2 uv)</span> </span>&#123;<br>    <span class="hljs-type">float</span> noiseX = (<span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>,<span class="hljs-number">78.233</span>) * <span class="hljs-number">2.0</span>)) * <span class="hljs-number">43758.5453</span>));<br>    <span class="hljs-type">float</span> noiseY = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span> - noiseX * noiseX);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float2</span>(noiseX, noiseY);<br>&#125;<br><span class="hljs-function">float2 <span class="hljs-title">rand_2_0004</span><span class="hljs-params">(in float2 uv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> noiseX = (<span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>,<span class="hljs-number">78.233</span>)      )) * <span class="hljs-number">43758.5453</span>));<br>    <span class="hljs-type">float</span> noiseY = (<span class="hljs-built_in">frac</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-built_in">dot</span>(uv, <span class="hljs-built_in">float2</span>(<span class="hljs-number">12.9898</span>,<span class="hljs-number">78.233</span>) * <span class="hljs-number">2.0</span>)) * <span class="hljs-number">43758.5453</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float2</span>(noiseX, noiseY) * <span class="hljs-number">0.004</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="GLSL"><a href="#GLSL" class="headerlink" title="GLSL"></a>GLSL</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// https://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader</span><br><span class="hljs-type">const</span> vec2 k = <span class="hljs-built_in">vec2</span>(<span class="hljs-number">23.1406926327792690</span>,<span class="hljs-number">2.6651441426902251</span>);<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd0</span><span class="hljs-params">( vec2 uv )</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">dot</span>(uv,k); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd1</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1e-7</span> + <span class="hljs-number">256.</span> + <span class="hljs-built_in">dot</span>(uv,k); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd2</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">mod</span>( <span class="hljs-number">123456789.</span>, <span class="hljs-number">256.</span> * <span class="hljs-built_in">dot</span>(uv,k) ); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd3</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">123456789.</span>, <span class="hljs-number">256.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ); &#125;<br><span class="hljs-comment">// We can even tweak the formula</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd4</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>( <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">1234.</span>, <span class="hljs-number">1024.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ) ); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd5</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>( <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">12345.</span>, <span class="hljs-number">1024.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ) ); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd6</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>( <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">123456.</span>, <span class="hljs-number">1024.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ) ); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd7</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>( <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">1234567.</span>, <span class="hljs-number">1024.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ) ); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd8</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>( <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">12345678.</span>, <span class="hljs-number">1024.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ) ); &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">rnd9</span><span class="hljs-params">( vec2 uv )</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fract</span>( <span class="hljs-built_in">cos</span>( <span class="hljs-built_in">mod</span>( <span class="hljs-number">123456780.</span>, <span class="hljs-number">1024.</span> * <span class="hljs-built_in">dot</span>(uv,k) ) ) ); &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏开发中的Random随机函数</title>
    <link href="/wild/2021/10/28/lab/S_Random/"/>
    <url>/wild/2021/10/28/lab/S_Random/</url>
    
    <content type="html"><![CDATA[<h2 id="Unity-C-CPU"><a href="#Unity-C-CPU" class="headerlink" title="Unity C# (CPU)"></a>Unity C# (CPU)</h2><h3 id="System-Random"><a href="#System-Random" class="headerlink" title="System.Random"></a>System.Random</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">var</span> rand = <span class="hljs-keyword">new</span> Random();<br>rand.Next();                    <span class="hljs-comment">// 非负整数</span><br><br>rand.NextSingle();              <span class="hljs-comment">// 0-1 float</span><br>rand.Sample();                  <span class="hljs-comment">// 0-1 float</span><br>rand.Next(Int32 x);             <span class="hljs-comment">// 小于x的非负整数</span><br>rand.Next(Int32, Int32);<br>rand.NextBytes(Byte[]);<br>rand.NextBytes(Span&lt;Byte&gt;);<br>rand.NextDouble();<br>rand.NextInt64();<br>rand.NextInt64(Int64);<br>rand.NextInt64(Int64, Int64);<br></code></pre></td></tr></table></figure><h3 id="UnityEngine-Random"><a href="#UnityEngine-Random" class="headerlink" title="UnityEngine.Random"></a>UnityEngine.Random</h3><ul><li>线程不安全</li><li>不能在Job System非主线程中使用</li><li><a href="https://docs.unity3d.com/ScriptReference/Random.html">https://docs.unity3d.com/ScriptReference/Random.html</a></li></ul><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><ul><li>Range(float minInclusive, float maxInclusive)</li><li>Range(int minInclusive, int maxExclusive)</li></ul><h4 id="Seed"><a href="#Seed" class="headerlink" title="Seed"></a>Seed</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> seed = <span class="hljs-number">123</span>;<br>Random.InitState(seed);<br><span class="hljs-built_in">float</span> rand = Random.<span class="hljs-keyword">value</span>;<br></code></pre></td></tr></table></figure><h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><ul><li>Random.ColorHSV()</li><li>Random.ColorHSV(float hueMin, float hueMax)</li></ul><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>Random.insideUnitCircle</li><li>Random.insideUnitSphere</li><li>Random.onUnitSphere</li></ul><h4 id="Quaternion"><a href="#Quaternion" class="headerlink" title="Quaternion"></a>Quaternion</h4><ul><li>Random.rotation</li><li>Random.rotationUniform</li></ul><h3 id="Unity-Mathematics-Random"><a href="#Unity-Mathematics-Random" class="headerlink" title="Unity.Mathematics.Random"></a>Unity.Mathematics.Random</h3><ul><li>线程安全</li><li>支持Job System线程中使用</li><li>第一次使用next，seed一样，结果一样(determinism|伪随机)</li><li><a href="https://docs.unity3d.com/Packages/com.unity.mathematics@0.0/api/Unity.Mathematics.Random.html">Mathematics.Random</a></li><li><a href="https://github.com/JohnnyTurbo/2020-LTS-ECS-Tutorials/blob/development/EcsTutorials-Project/Assets/Random/Scripts/ComponentsAndTags/IndividualRandomData.cs">ECS Tutorials</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#">    NextFloat();<br>    NextFloat(Single);<br>    NextFloat(Single, Single);<br>    NextFloat2();<br>    NextFloat2(float2);<br>    NextFloat2(float2, float2);<br>    NextFloat2Direction();<br>    NextFloat3();<br>    NextFloat3(float3);<br>    NextFloat3(float3, float3);<br>    NextFloat3Direction();<br>...<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> index</span>)</span><br>&#123;<br>    Random rand = Random.CreateFromIndex((<span class="hljs-built_in">uint</span>)index);<br>    Result[index] = rand.NextFloat(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="XOR-Shift-Random"><a href="#XOR-Shift-Random" class="headerlink" title="XOR Shift Random"></a>XOR Shift Random</h3><ul><li><a href="https://github.com/aras-p/ToyPathTracer">ToyPathTracer</a><ul><li><a href="https://github.com/aras-p/ToyPathTracer/blob/main/Unity/Assets/Maths.cs">https://github.com/aras-p/ToyPathTracer/blob/main/Unity/Assets/Maths.cs</a></li></ul></li><li><a href="https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/">https://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/</a></li><li><a href="https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/">https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/</a></li><li><a href="https://gist.github.com/septagon/e04204d4cdd59a6c028c70de59bd62b7">https://gist.github.com/septagon/e04204d4cdd59a6c028c70de59bd62b7</a></li><li><a href="https://zhuanlan.zhihu.com/p/326270572">https://zhuanlan.zhihu.com/p/326270572</a><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">uint</span> <span class="hljs-title">XorShift32</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">uint</span> state</span>)</span><br>&#123;<br>    <span class="hljs-built_in">uint</span> x = state;<br>    x ^= x &lt;&lt; <span class="hljs-number">13</span>;<br>    x ^= x &gt;&gt; <span class="hljs-number">17</span>;<br>    x ^= x &lt;&lt; <span class="hljs-number">15</span>;<br>    state = x;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> <span class="hljs-title">RandomFloat01</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">uint</span> state</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (XorShift32(<span class="hljs-keyword">ref</span> state) &amp; <span class="hljs-number">0xFFFFFF</span>) / <span class="hljs-number">16777216.0f</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> float3 <span class="hljs-title">RandomInUnitDisk</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">uint</span> state</span>)</span><br>&#123;<br>    float3 p;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        p = <span class="hljs-number">2.0f</span> * <span class="hljs-keyword">new</span> float3(RandomFloat01(<span class="hljs-keyword">ref</span> state), RandomFloat01(<span class="hljs-keyword">ref</span> state), <span class="hljs-number">0</span>) - <span class="hljs-keyword">new</span> float3(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">while</span> (lengthsq(p) &gt;= <span class="hljs-number">1.0</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> float3 <span class="hljs-title">RandomInUnitSphere</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">uint</span> state</span>)</span><br>&#123;<br>    float3 p;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        p = <span class="hljs-number">2.0f</span> * <span class="hljs-keyword">new</span> float3(RandomFloat01(<span class="hljs-keyword">ref</span> state), RandomFloat01(<span class="hljs-keyword">ref</span> state), RandomFloat01(<span class="hljs-keyword">ref</span> state)) - <span class="hljs-keyword">new</span> float3(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">while</span> (lengthsq(p) &gt;= <span class="hljs-number">1.0</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> float3 <span class="hljs-title">RandomUnitVector</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">uint</span> state</span>)</span><br>&#123;<br>    <span class="hljs-built_in">float</span> z = RandomFloat01(<span class="hljs-keyword">ref</span> state) * <span class="hljs-number">2.0f</span> - <span class="hljs-number">1.0f</span>;<br>    <span class="hljs-built_in">float</span> a = RandomFloat01(<span class="hljs-keyword">ref</span> state) * <span class="hljs-number">2.0f</span> * kPI;<br>    <span class="hljs-built_in">float</span> r = sqrt(<span class="hljs-number">1.0f</span> - z * z);<br>    <span class="hljs-built_in">float</span> x, y;<br>    sincos(a, <span class="hljs-keyword">out</span> x, <span class="hljs-keyword">out</span> y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> float3(r * x, r* y, z);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Unreal"><a href="#Unreal" class="headerlink" title="Unreal"></a>Unreal</h2><h2 id="Houdini"><a href="#Houdini" class="headerlink" title="Houdini"></a>Houdini</h2>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础知识</title>
    <link href="/wild/2021/10/27/log/T_Git/"/>
    <url>/wild/2021/10/27/log/T_Git/</url>
    
    <content type="html"><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h5 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1. 基础操作"></a>1. 基础操作</h5><ul><li><p>git init 初始化项目</p></li><li><p>git init directory 指定目录</p></li><li><p>git add *.cpp 添加文件到暂存区</p></li><li><p>git add . 添加文件到暂存区</p></li><li><p>git reset 取消变更追踪</p></li><li><p>git restore –stage file 取消变更追踪</p></li><li><p>git status 查看仓库当前变更状态</p></li><li><p>git log 查看提交历史</p></li><li><p>git blame file 查看指定文件修改历史</p></li><li><p>git commit -m “add” 提交到仓库（在Linux中commit信息使用单引号’，Windows使用双引号”）</p></li><li><p>git clone repo directory 克隆项目</p></li><li><p>git diff file 对比暂存区与仓库区别</p></li><li><p>git rm 删除工作区文件</p></li><li><p>git mv 移动或重命名工作区文件</p></li><li><p>git submodule 添加子模块引用</p></li><li><p>git submodule update –init –recursive</p></li></ul><h5 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h5><ul><li>git config –list 列出所有配置，q退出显示</li><li>git config -e 编辑当前配置文件</li><li>git config -e –global 编辑全局配置文件</li><li>git config –global user.name “Tom” 配置用户信息</li><li>git config –global user.email <a href="mailto:&#104;&#x65;&#108;&#x6c;&#111;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#104;&#x65;&#108;&#x6c;&#111;&#64;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a> 配置用户信息(去掉global配置当前)</li></ul><h5 id="3-分支"><a href="#3-分支" class="headerlink" title="3. 分支"></a>3. 分支</h5><ul><li>git branch 列出分支</li><li>git branch dev 创建分支</li><li>git branch -d _name 删除分支</li><li>git checkout dev 切换分支</li><li>git checkout -b dev 创建并切换到新分支</li><li>git merge _name 合并分支</li><li>合并冲突</li></ul><h5 id="4-远程仓库"><a href="#4-远程仓库" class="headerlink" title="4. 远程仓库"></a>4. 远程仓库</h5><ul><li>ssh-keygen -t rsa -C “<a href="mailto:&#121;&#x6f;&#117;&#114;&#101;&#x6d;&#97;&#105;&#108;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#121;&#x6f;&#117;&#114;&#101;&#x6d;&#97;&#105;&#108;&#x40;&#101;&#x78;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>“ 生成SSH Key</li><li>git remote 查看当前远程仓库</li><li>git remote -v 查看仓库链接</li><li>git remote add _name _url 添加远程仓库并设置名字</li><li>git remote rm _name 删除远程仓库</li><li>git push -u _name master 推送到仓库master</li><li>git fecth 获取更新</li><li>git pull _name master 拉取仓库</li><li>git merge 获取远程仓库，合并到当前分支</li><li><a href="https://www.runoob.com/git/git-remote-repo.html">Git教程</a></li></ul><h5 id="5-两个仓库同步"><a href="#5-两个仓库同步" class="headerlink" title="5.两个仓库同步"></a>5.两个仓库同步</h5><ul><li><p><a href="https://blog.csdn.net/htp_411/article/details/99687343">https://blog.csdn.net/htp_411/article/details/99687343</a></p></li><li><p>git remote add tx <a href="https://e.coding.net/automask/unix/painting.git">https://e.coding.net/automask/unix/painting.git</a></p></li><li><p>git pull tx main      先拉下来生成.git信息</p></li><li><p>git push tx main</p></li><li><p>git push tx master -f 强制推送</p></li><li><p>常规流程</p><ul><li>add<ul><li>git add .</li><li>git add -u . 表示将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件</li><li>git add -A . 表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区</li></ul></li><li>git commit -m “message”</li><li>git commit -am ‘message’ -am等同于-a -m<br>  可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库<br>  即使它们没有经过git add添加到暂存区，</li><li>push</li><li><a href="https://www.jianshu.com/p/2e1d551b8261">git的add、commit、push的详细介绍</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo静态博客搭建</title>
    <link href="/wild/2021/10/27/log/T_Hexo/"/>
    <url>/wild/2021/10/27/log/T_Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h2><ul><li>静态博客生成器<ul><li>官方推荐的 Jekyll</li><li>Node.js 编写的 Hexo</li><li>Go 编写的 Hugo</li><li>Python 编写的 Pelican</li><li>以及更人性化的 Gridea</li></ul></li><li><a href="https://sspai.com/post/54608">https://sspai.com/post/54608</a></li></ul><h3 id="网站托管平台"><a href="#网站托管平台" class="headerlink" title="网站托管平台"></a>网站托管平台</h3><ul><li><a href="https://www.xxyopen.com/2022/07/19/tools/pages_host.html">几个免费的静态网站托管平台对比</a></li><li>Vercel</li><li>Github Pages</li><li>Gitee Pages</li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ul><li><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站</a></li><li><a href="https://developer.aliyun.com/article/794909">Hexo + Gitee Pages 搭建个人博客</a></li></ul><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>npm install -g hexo-cli</li><li>npm install –save hexo-theme-fluid</li><li>npm install hexo-deployer-git –save</li><li>hexo init blog</li><li>hexo new post blogName</li></ul><h3 id="hexo-command"><a href="#hexo-command" class="headerlink" title="hexo command"></a>hexo command</h3><ul><li>hexo g        &#x2F;&#x2F; 启动</li><li>hexo g -d     &#x2F;&#x2F; 发布 | _config.yml配置deploy:git</li><li>hexo server   &#x2F;&#x2F; 启动服务器</li></ul><h3 id="hexo-configure"><a href="#hexo-configure" class="headerlink" title="hexo configure"></a>hexo configure</h3><ul><li><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">https://fluid-dev.github.io/hexo-fluid-docs/guide/</a></li></ul><h3 id="hexo-music"><a href="#hexo-music" class="headerlink" title="hexo music"></a>hexo music</h3><ul><li><a href="https://tomorrow505.xyz/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/">Hexo+Fluid博客添加网易云背景音乐</a></li><li>node_modules\hexo-theme-fluid\layout_partials\footer.ejs<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-content&quot;</span>&gt;</span><br>    &lt;%- theme.footer.content %&gt;<br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;music_div&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: fixed; bottom: 0px; left: 30px;&quot;</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 凡人 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">330</span> <span class="hljs-attr">height</span>=<span class="hljs-string">86</span> </span><br><span class="hljs-tag">                <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=2&amp;id=1465290469&amp;auto=1&amp;height=66&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 难念的经 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">330</span> <span class="hljs-attr">height</span>=<span class="hljs-string">86</span> </span><br><span class="hljs-tag">                <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=2&amp;id=5271858&amp;auto=1&amp;height=66&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/musicshow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>hexo-theme-fluid&#x2F;source&#x2F;js&#x2F;musicshow.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//简单判断首页，因为我的域名是tomorrow50.xyz，所以首页就会触发</span><br>    <span class="hljs-keyword">if</span> (location.<span class="hljs-property">href</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/xyz.&#123;0,1&#125;$/</span>))&#123;<br>        <span class="hljs-comment">//直接把音乐框隐藏</span><br>        $(<span class="hljs-string">&quot;#music_div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display:none;&quot;</span>);<br>        <span class="hljs-comment">//滚动条事件</span><br>        $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-comment">//获取滚动条的滑动距离</span><br>            <span class="hljs-keyword">var</span> scroH = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">scrollTop</span>();<br>            <span class="hljs-comment">//滚动条的滑动距离大于120，就显示，反之就隐藏</span><br>            <span class="hljs-keyword">if</span>(scroH &gt;= <span class="hljs-number">120</span>)&#123;<br>                $(<span class="hljs-string">&quot;#music_div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display:block;position:fixed;bottom:0px;left:30px;&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scroH &lt; <span class="hljs-number">120</span>)&#123;<br>                $(<span class="hljs-string">&quot;#music_div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display:none;&quot;</span>);<br>            &#125;<br>        &#125;)<br>    &#125;<br><br>&#125;<br><span class="hljs-title function_">show</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure></li><li><a href="https://www.zywvvd.com/notes/hexo/theme/fluid/fluid-inject/fluid-inject/">使用 Fluid 注入功能实现背景视频</a></li></ul><h3 id="hexo-image"><a href="#hexo-image" class="headerlink" title="hexo image"></a>hexo image</h3><ul><li><a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></li><li><a href="https://www.jianshu.com/p/bbbcbb7c4911">hexo+typora+github图片路径问题</a><ul><li>npm install hexo-renderer-marked –save</li><li>node_modules\hexo-renderer-marked\lib\renderer.js  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// image(href, title, text) &#123;</span><br><span class="hljs-comment">// add</span><br><span class="hljs-keyword">if</span>(href.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;/&quot;</span>)&gt;-<span class="hljs-number">1</span>)&#123;<br>    href = href.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li><li>_config.yml<br>  post_asset_folder: true<br>  marked:<br>  prependRoot: true<br>  postAsset: true</li></ul></li></ul><h3 id="Hexo-Theme"><a href="#Hexo-Theme" class="headerlink" title="Hexo Theme"></a>Hexo Theme</h3><ul><li><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a><ul><li><a href="https://www.lfzxb.top/">https://www.lfzxb.top/</a></li></ul></li><li><a href="https://zhwangart.com/2022/03/04/Hexo-Theme-Acorn/">https://zhwangart.com/2022/03/04/Hexo-Theme-Acorn/</a></li><li><a href="https://github.com/zhwangart/hexo-theme-acorn">https://github.com/zhwangart/hexo-theme-acorn</a></li></ul><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><ul><li><a href="https://console.leancloud.cn/">Valine</a></li><li><a href="https://github.com/gitalk/gitalk">gitalk</a><ul><li><a href="https://github.com/settings/developers">https://github.com/settings/developers</a></li><li><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></li><li><a href="https://blog.csdn.net/qq_36537546/article/details/90730412">https://blog.csdn.net/qq_36537546/article/details/90730412</a></li><li><a href="https://ryuuko.gitee.io/2021/03/22/%E4%B8%BAHexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/">https://ryuuko.gitee.io/2021/03/22/%E4%B8%BAHexo%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA/</a></li><li><a href="https://101.35.192.137/2022/02/25/Hexo-%E4%BD%BF%E7%94%A8-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/">https://101.35.192.137/2022/02/25/Hexo-%E4%BD%BF%E7%94%A8-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</a></li><li><a href="https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/gitalk-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">https://hexo-next.readthedocs.io/zh_CN/latest/next/advanced/gitalk-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TamperMonkey油猴脚本工具</title>
    <link href="/wild/2021/10/27/log/T_TamperMonkey/"/>
    <url>/wild/2021/10/27/log/T_TamperMonkey/</url>
    
    <content type="html"><![CDATA[<h3 id="Tamper-Monkey"><a href="#Tamper-Monkey" class="headerlink" title="Tamper Monkey"></a>Tamper Monkey</h3><ul><li><a href="https://www.bilibili.com/video/BV1yT411L7n7">手写油猴脚本，几分钟学会新技能</a></li><li>网页icon | .icon</li><li><a href="https://chrome.zzzmh.cn/">极简插件-国内Chrome插件网站</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         CSDN Code</span><br><span class="hljs-comment">// @match        https://blog.csdn.net/*/article/details/*</span><br><span class="hljs-comment">// @icon         https://g.csdnimg.cn/static/logo/favicon32.ico</span><br><span class="hljs-comment">// ==/UserScript==</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br><br>    <span class="hljs-keyword">let</span> codes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;code&quot;</span>);<br>    codes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">c</span>=&gt;</span>&#123;<br>        c.<span class="hljs-property">contentEditable</span>=<span class="hljs-string">&quot;true&quot;</span>;<br>    &#125;);<br>&#125;)();<br></code></pre></td></tr></table></figure><h3 id="B站视频下载"><a href="#B站视频下载" class="headerlink" title="B站视频下载"></a>B站视频下载</h3><ul><li><a href="https://github.com/the1812/Bilibili-Evolved">Bilibili-Evolved</a></li><li><a href="https://github.com/nilaoda/BBDown">https://github.com/nilaoda/BBDown</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Chrome</tag>
      
      <tag>TamperMonkey</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode插件收集</title>
    <link href="/wild/2021/10/27/log/T_Vscode/"/>
    <url>/wild/2021/10/27/log/T_Vscode/</url>
    
    <content type="html"><![CDATA[<h3 id="Markdown插件"><a href="#Markdown插件" class="headerlink" title="Markdown插件"></a>Markdown插件</h3><ul><li>VS Code插件Markdown Preview Enhanced</li><li>Typora 1.0后开始收费了</li><li><a href="https://github.com/marktext/marktext">Mark Text</a></li><li><a href="https://mp.weixin.qq.com/s/7w6kaif51BbsDOe79gkwQQ">Markmap</a></li><li>Office Viewer插入图片</li><li>Draw.io Integration绘制逻辑图</li></ul><h3 id="Theme主题"><a href="#Theme主题" class="headerlink" title="Theme主题"></a>Theme主题</h3><ul><li>One Dark Pro</li><li>Dracula Official<ul><li><a href="https://draculatheme.com/">https://draculatheme.com/</a></li></ul></li><li>Icon<ul><li>Material Icon Theme</li><li>vscode-icons</li></ul></li></ul><h3 id="C-插件"><a href="#C-插件" class="headerlink" title="C++插件"></a>C++插件</h3><ul><li>C&#x2F;C++</li><li>C&#x2F;C++ Extension Pack</li><li>C&#x2F;C++ Themes</li><li>C&#x2F;C++ Intellisense</li><li>Better C++ Syntax</li><li>CMake</li><li>CMake Language Support</li><li>CMake Tools</li><li>IntelliCode</li></ul><h3 id="Python插件"><a href="#Python插件" class="headerlink" title="Python插件"></a>Python插件</h3><ul><li>Python</li><li>Pylance</li></ul><h3 id="Shader插件"><a href="#Shader插件" class="headerlink" title="Shader插件"></a>Shader插件</h3><ul><li>Shader languages support for VS Code</li><li>ShaderLabFormatter</li><li>ShaderlabVSCode(Free)</li><li>glsl-canvas</li><li>SHADERed</li></ul><h3 id="UE4-x2F-5插件"><a href="#UE4-x2F-5插件" class="headerlink" title="UE4&#x2F;5插件"></a>UE4&#x2F;5插件</h3><ul><li>Unreal Engine 4 Snippets</li><li>Unreal Engine 4 Helper</li></ul><h3 id="Web插件"><a href="#Web插件" class="headerlink" title="Web插件"></a>Web插件</h3><ul><li>open in browser</li><li>zhihu on vscode</li></ul><h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><ul><li>LTeX</li><li>Drawio</li><li>leek-fund韭菜盒子</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Javascript</tag>
      
      <tag>Markdown</tag>
      
      <tag>Vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity Editor编辑器拓展</title>
    <link href="/wild/2021/10/26/log/P_Unity_Editor/"/>
    <url>/wild/2021/10/26/log/P_Unity_Editor/</url>
    
    <content type="html"><![CDATA[<h2 id="Editor-GUI"><a href="#Editor-GUI" class="headerlink" title="Editor GUI"></a>Editor GUI</h2><h4 id="InspectorGUI"><a href="#InspectorGUI" class="headerlink" title="InspectorGUI"></a>InspectorGUI</h4><h5 id="Screen-Size"><a href="#Screen-Size" class="headerlink" title="Screen Size"></a>Screen Size</h5><ul><li>Screen.width      &#x2F;&#x2F; 当前InspectorGUI大小，并不是SceneView大小</li><li>Screen.height</li></ul><h5 id="属性变化"><a href="#属性变化" class="headerlink" title="属性变化"></a>属性变化</h5><ul><li>DrawDefaultInspector()    &#x2F;&#x2F; Editor更方便的检测方法</li><li>BeginChangeCheck()    &#x2F;&#x2F; 检测属性UI值变化</li><li>EndChangeCheck()      &#x2F;&#x2F; 若有改变则为true</li><li>OnValidate()          &#x2F;&#x2F; Mono属性变化时调用，用来限定属性<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (DrawDefaultInspector())<br>    &#123;<br>        terrainMesh.CreateTerrain();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInspectorGUI</span>()</span><br>&#123;<br>    EditorGUI.BeginChangeCheck();<br>    <span class="hljs-keyword">base</span>.OnInspectorGUI();<br><br>    <span class="hljs-keyword">if</span> (EditorGUI.EndChangeCheck())<br>    &#123;<br>        terrainMesh.CreateTerrain();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h4><ul><li>SerializeField</li><li>HideInInspector</li><li>MenuItem                      &#x2F;&#x2F; 自定义编辑器菜单</li><li>CustomEditor                  &#x2F;&#x2F; 自定义对象属性GUI</li><li>ExecuteInEditMode</li><li>RequireComponent</li><li>ImageEffectAllowedInSceneView</li></ul><h4 id="Shortcut"><a href="#Shortcut" class="headerlink" title="Shortcut"></a>Shortcut</h4><ul><li><a href="https://docs.unity3d.com/ScriptReference/EditorTools.EditorTool.html">EditorTool</a></li><li>ToolManager.SetActiveTool(EditorTools.EditorTool tool)<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEditor.ShortcutManagement;<br>[<span class="hljs-meta">Shortcut(<span class="hljs-string">&quot;Activate Paint Tool&quot;</span>, typeof(SceneView), KeyCode.U)</span>]<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Shortcut</span>()</span><br>&#123;<br>    ToolManager.SetActiveTool&lt;EditorTools&gt;();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Shader-GUI-Material-Editor"><a href="#Shader-GUI-Material-Editor" class="headerlink" title="Shader GUI || Material Editor"></a>Shader GUI || Material Editor</h4><ul><li><a href="https://blog.csdn.net/qqo_aa/article/details/116999667">Unity 为自己脚本增加材质编辑面板 MaterialEditor</a></li><li><a href="https://www.xuanyusong.com/archives/4769">Unity3D研究院之材质Shader通用面板</a><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#">MaterialEditor matEditor = Editor.CreateEditor(material) <span class="hljs-keyword">as</span> MaterialEditor;<br><span class="hljs-keyword">if</span> (matEditor != <span class="hljs-literal">null</span>)<br>    matEditor.PropertiesGUI();<br></code></pre></td></tr></table></figure></li></ul><h4 id="CustomEditor-CustomPropertyDrawer"><a href="#CustomEditor-CustomPropertyDrawer" class="headerlink" title="CustomEditor || CustomPropertyDrawer"></a>CustomEditor || CustomPropertyDrawer</h4><ul><li>CustomPropertyDrawer<ul><li><a href="https://www.bilibili.com/video/BV1pR4y1f7s5">https://www.bilibili.com/video/BV1pR4y1f7s5</a></li></ul></li></ul><h4 id="UIElements"><a href="#UIElements" class="headerlink" title="UIElements"></a>UIElements</h4><ul><li><a href="https://www.kodeco.com/6452218-uielements-tutorial-for-unity-getting-started">UIElements Tutorial for Unity: Getting Started</a></li></ul><h4 id="Undo"><a href="#Undo" class="headerlink" title="Undo"></a>Undo</h4><ul><li><a href="https://support.unity.com/hc/en-us/articles/115002294603-How-do-I-make-a-scene-dirty-when-modifying-a-property-via-script-">make a scene dirty when modifying</a></li><li>Undo.RecordObject(obj, “history info”)</li></ul><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul><li><a href="https://www.xuanyusong.com/archives/category/unity/unity3deditor">雨松Mono - Unity3D拓展编辑器</a></li><li><a href="https://www.xuanyusong.com/archives/4496">Unity3D研究院编辑器之获取粒子准确数量</a></li><li><a href="https://www.xuanyusong.com/archives/4745">Unity3D研究院之获取FrameDebugger每帧颜色数据</a></li><li><a href="https://www.xuanyusong.com/archives/3860">获取系统所有EditorStyles</a></li><li><a href="https://blog.csdn.net/qq_41841073/article/details/124913941">Unity ScrollView拖不动</a></li><li><a href="https://blog.csdn.net/ltycloud/article/details/79291564">坑爹的GUILayoutUtility.GetRect()和GUILayout.BeginArea()</a></li></ul><h2 id="Tool-工具类"><a href="#Tool-工具类" class="headerlink" title="Tool | 工具类"></a>Tool | 工具类</h2><h3 id="EditorUtility"><a href="#EditorUtility" class="headerlink" title="EditorUtility"></a>EditorUtility</h3><ul><li>RevealInFinder    &#x2F;&#x2F; 打开文件夹</li><li>OpenFilePanel</li><li>OpenFolderPanel</li><li>OpenFilePanelWithFilters</li></ul><h3 id="EditorGUIUtility"><a href="#EditorGUIUtility" class="headerlink" title="EditorGUIUtility"></a>EditorGUIUtility</h3><ul><li>PingObject        &#x2F;&#x2F;浏览、选中资产<ul><li>Selection.activeObject &#x3D; data</li></ul></li></ul><h3 id="AssetDatabase"><a href="#AssetDatabase" class="headerlink" title="AssetDatabase"></a>AssetDatabase</h3><ul><li>LoadAssetAtPath</li><li>AssetPathToGUID</li><li>Contains</li><li>CopyAsset</li><li>CreateAsset</li><li>ExtractAsset</li><li>ImportAsset</li><li>FindAssets</li><li>GetAssetPath</li><li>CreateFolder</li><li>ExportPackage</li></ul><h3 id="PrefabUtility"><a href="#PrefabUtility" class="headerlink" title="PrefabUtility"></a>PrefabUtility</h3><ul><li>CreatePrefab</li><li>CreateEmptyPrefab</li></ul><h3 id="Project-Setting"><a href="#Project-Setting" class="headerlink" title="Project Setting"></a>Project Setting</h3><ul><li>UnityEngine.QualitySettings<ul><li>renderPipeline</li></ul></li><li>UnityEngine.Rendering.GraphicsSettings<ul><li>renderPipelineAsset</li></ul></li><li>UnityEditor.EditorSettings</li><li>UnityEditor.PlayerSettings</li><li>UnityEditor.EditorBuildSettings</li><li>UnityEditor.BuildPipeline             &#x2F;&#x2F;build game</li></ul><h3 id="Unity技巧"><a href="#Unity技巧" class="headerlink" title="Unity技巧"></a>Unity技巧</h3><ul><li>方法属性加Button</li><li><a href="https://zhuanlan.zhihu.com/p/558732611">Unity小窍门100条！！！(上)</a></li><li>FormerlySerializedAs()<ul><li>重命名显示</li></ul></li><li>RuntimeInitializeOnLoadMethod<ul><li>[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]<ul><li>无需创建空物体就能执行代码</li><li>在运行游戏（Play）就会立即执行该函数，而不需要继承MonoBehavior并挂接在物体身上。</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
      <tag>Editor</tag>
      
      <tag>Tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity C# 学习笔记</title>
    <link href="/wild/2021/10/26/log/P_Unity_Csharp/"/>
    <url>/wild/2021/10/26/log/P_Unity_Csharp/</url>
    
    <content type="html"><![CDATA[<h3 id="GeometryUtility"><a href="#GeometryUtility" class="headerlink" title="GeometryUtility"></a>GeometryUtility</h3><h3 id="Unsafe-Native"><a href="#Unsafe-Native" class="headerlink" title="Unsafe | Native"></a>Unsafe | Native</h3><ul><li>开启Unsafe<ul><li>Project Setting&#x2F;Player</li><li>.asmdef<ul><li>Unity.Burst</li><li>Unity.Mathematics</li></ul></li></ul></li><li>获取native指针<ul><li>NativeArray.GetUnsafePtr()</li><li>NativeArray.GetUnsafeReadOnlyPtr()<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> Unity.Collections.LowLevel.Unsafe;<br><br><span class="hljs-keyword">struct</span> SpheresSoA<br>&#123;<br>    [<span class="hljs-meta">ReadOnly</span>] <span class="hljs-keyword">public</span> NativeArray&lt;<span class="hljs-built_in">float</span>&gt; centerX;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">unsafe</span> <span class="hljs-built_in">int</span> <span class="hljs-title">HitSpheres</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> Ray r, <span class="hljs-built_in">float</span> tMin, <span class="hljs-built_in">float</span> tMax, <span class="hljs-keyword">ref</span> Hit outHit</span>)</span><br>    &#123;<br>        float4* ptrCenterX = (float4*) centerX.GetUnsafeReadOnlyPtr();<br>        float4 sCenterX = *ptrCenterX;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="SerializedObject-ScriptObject-Reflection"><a href="#SerializedObject-ScriptObject-Reflection" class="headerlink" title="SerializedObject | ScriptObject | Reflection"></a>SerializedObject | ScriptObject | Reflection</h3><ul><li>Type<ul><li>typeof(class)</li><li>object.GetType()</li></ul></li><li>Asset Load<ul><li>const string assetPath &#x3D; “Assets&#x2F;Settings&#x2F;Universal Render Pipeline Asset.asset”;</li><li>var pipelineAsset &#x3D; UnityEditor.AssetDatabase.LoadAssetAtPath(assetPath, typeof(RenderPipelineAsset)) as RenderPipelineAsset;</li></ul></li><li>SerializedObject<ul><li>支持Undo</li><li>支持多个编辑</li><li>Property<ul><li>FindProperty</li><li>SerializedProperty<ul><li>Next</li><li>NextVisible</li><li>intValue</li></ul></li><li>you can Shift+Right Click on property names in the Inspector to see their paths</li><li>Shift+右键获取属性路径</li></ul></li><li>ApplyModifiedProperties</li><li><a href="https://www.cnblogs.com/ppne/p/14752941.html">序列化对象 SerializedObject</a></li></ul></li><li>ScriptableObject</li></ul><h3 id="Command-Buffer"><a href="#Command-Buffer" class="headerlink" title="Command Buffer"></a>Command Buffer</h3><ul><li><a href="https://blog.csdn.net/u012740992/article/details/88795640">Unity的CommandBuffer基础</a></li><li><a href="https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html">https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html</a></li><li>Camera.AddCommandBuffer</li><li>Light.AddCommandBuffer</li><li>Graphics.ExecuteCommandBuffer</li><li>BuiltinRenderTextureType<ul><li><a href="https://docs.unity3d.com/ScriptReference/Rendering.BuiltinRenderTextureType.html">https://docs.unity3d.com/ScriptReference/Rendering.BuiltinRenderTextureType.html</a></li><li>Blit(BuiltinRenderTextureType.CurrentActive,id)</li><li>CurrentActive</li><li>Depth</li></ul></li></ul><h3 id="Unity技巧"><a href="#Unity技巧" class="headerlink" title="Unity技巧"></a>Unity技巧</h3><ul><li>方法属性加Button</li><li><a href="https://zhuanlan.zhihu.com/p/558732611">Unity小窍门100条！！！(上)</a></li><li>FormerlySerializedAs()<ul><li>重命名显示</li></ul></li><li>RuntimeInitializeOnLoadMethod<ul><li>[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]<ul><li>无需创建空物体就能执行代码</li><li>在运行游戏（Play）就会立即执行该函数，而不需要继承MonoBehavior并挂接在物体身上。</li></ul></li></ul></li></ul><h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 拓展Vector3方法，关键使用this</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vector3 <span class="hljs-title">Round</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> Vector3 v</span>)</span><br>&#123;<br>    xxxx<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><ul><li>OnValidate() 属性变化时调用</li></ul><h3 id="UnityEvent"><a href="#UnityEvent" class="headerlink" title="UnityEvent"></a>UnityEvent</h3><ul><li>支持UI事件函数编辑</li><li>using UnityEngine.Events;</li><li>public UnityEvent onClick;</li></ul><h3 id="Custom-Package"><a href="#Custom-Package" class="headerlink" title="Custom Package"></a>Custom Package</h3><ul><li>package.json<ul><li>name          “com.xxx.core”</li><li>displayName   “xxx”</li><li>version       “0.0.1”</li></ul></li><li>解决csproj生成问题，使用最新Vscode Editor Package1.2.5插件</li><li>Asmdef<ul><li>模块化打包成dll</li></ul></li></ul><h3 id="Build-Player"><a href="#Build-Player" class="headerlink" title="Build Player"></a>Build Player</h3><ul><li><a href="https://answers.unity.com/questions/1546722/compiling-from-command-line.html">Compiling from command line</a></li><li><a href="https://stackoverflow.com/questions/45081576/how-can-i-compile-a-unity3d-game-project-from-command-line-into-webgl">https://stackoverflow.com/questions/45081576/how-can-i-compile-a-unity3d-game-project-from-command-line-into-webgl</a></li><li><a href="https://docs.unity3d.com/ScriptReference/BuildPipeline.BuildPlayer.html">https://docs.unity3d.com/ScriptReference/BuildPipeline.BuildPlayer.html</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Unity.exe -quit -batchmode -projectPath &quot;%cd%&quot; -executeMethod &quot;Builder.BuildAll&quot;  -logfile &quot;editor.log&quot;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BuildAll</span>()</span><br>    &#123;<br>        BuildPipeline.BuildPlayer(<br>            <span class="hljs-keyword">new</span>[] &#123;<span class="hljs-string">&quot;Test.unity&quot;</span>&#125;, <br>            <span class="hljs-string">&quot;Build/Win/App.exe&quot;</span>, <br>            BuildTarget.StandaloneWindows64,<br>            BuildOptions.None);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="C-Native-Command"><a href="#C-Native-Command" class="headerlink" title="C# Native Command"></a>C# Native Command</h3><ul><li>App Command Line<ul><li>string[] args &#x3D; System.Environment.GetCommandLineArgs();</li><li><a href="https://4experience.co/how-to-start-unity-application-from-command-prompt-with-initial-arguments/">How to start Unity application from command prompt with initial arguments?</a></li></ul></li><li><a href="https://www.youtube.com/watch?v=YkXWySYF5dE">How to run external programs</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">var</span> cmd_info = <span class="hljs-keyword">new</span> ProcessStartInfo<br>&#123;<br>    FileName = <span class="hljs-string">&quot;notepad&quot;</span>,   <span class="hljs-comment">//cmd</span><br>    Arguments = <span class="hljs-string">&quot;&quot;</span>,         <span class="hljs-comment">//args</span><br>    <span class="hljs-comment">// Verb = &quot;runas&quot;,      //管理员运行</span><br>    <span class="hljs-comment">// WorkingDirectory = &quot;.&quot;,  //cwd</span><br>&#125;;<br>Process process = Process.Start(cmd_info);<br>process.WaitForExit();<br>process.Close();<br></code></pre></td></tr></table></figure><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><ul><li><a href="https://blog.csdn.net/baidu_35080512/article/details/81169339">Unity脚本打成DLL文件和unity使用自己生成的DLL文件</a></li><li><a href="https://docs.unity3d.com/Manual/UnityasaLibrary-Windows.html">Integrating Unity into Windows and UWP applications</a></li><li><a href="https://stackoverflow.com/questions/54335893/embed-unity3d-app-inside-wpf-without-having-it-take-up-the-whole-window">https://stackoverflow.com/questions/54335893/embed-unity3d-app-inside-wpf-without-having-it-take-up-the-whole-window</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Unity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C# 学习笔记</title>
    <link href="/wild/2021/10/25/log/P_Csharp_Feature/"/>
    <url>/wild/2021/10/25/log/P_Csharp_Feature/</url>
    
    <content type="html"><![CDATA[<h2 id="Net"><a href="#Net" class="headerlink" title=".Net"></a>.Net</h2><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><ul><li>dotnet new<ul><li>dotnet new –list 查看所有已安装模板的列表</li><li>dotnet new console -o projectName</li><li>dotnet new console -n projectName</li><li>dotnet new console –language “F#” &#x2F;&#x2F;“C#” “F#”</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new">https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new</a></li></ul></li><li>dotnet run</li><li>dotnet publish</li><li>dotnet build</li><li>dotnet clean</li><li>dotnet exec<ul><li>dotnet exec myapp.dll</li><li>dotnet myapp.dll</li></ul></li><li>dotnet pack</li><li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet">https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet</a></li><li>dotnet sln<ul><li>dotnet new sln -n slnName</li><li>dotnet sln xxx.sln add xxx\xxx.csproj &#x2F;&#x2F;cmd</li><li>dotnet sln xxx.sln add **&#x2F;*.csproj    &#x2F;&#x2F;bash</li><li><a href="https://www.youtube.com/watch?v=r5dtl9Uq9V0">Intro to VSCode for C# Developers - From Installation to Debugging</a></li></ul></li></ul><h3 id="C-DLL"><a href="#C-DLL" class="headerlink" title="C++ | DLL"></a>C++ | DLL</h3><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute?view=net-6.0">https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute?view=net-6.0</a><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br>[<span class="hljs-meta">DllImport(@<span class="hljs-string">&quot;..\..\xxx.dll&quot;</span>,EntryPoint=<span class="hljs-string">&quot;Add&quot;</span>,CallingConvention=CallingConvention.Cdecl)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span>;<br></code></pre></td></tr></table></figure></li><li>DLL Edit<ul><li>VS_xxx Prompt.bat</li><li>ildasm    &#x2F;&#x2F;查看</li><li>ILSpy     &#x2F;&#x2F;反编译</li></ul></li></ul><h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C#基础"></a>C#基础</h2><h3 id="get-set"><a href="#get-set" class="headerlink" title="get set"></a>get set</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>&#123;<br>    <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> name; &#125;<br>　  <span class="hljs-keyword">set</span> &#123; name = <span class="hljs-keyword">value</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Nullable"><a href="#Nullable" class="headerlink" title="Nullable"></a>Nullable</h3><ul><li>int? i &#x3D; null;</li><li>int j &#x3D; i ?? 0; &#x2F;&#x2F;i为空，则返回0</li></ul><h3 id="Property-Field"><a href="#Property-Field" class="headerlink" title="Property || Field"></a>Property || Field</h3><ul><li>属性是方法，应当暴露</li><li>字段是数据，应当被封装</li></ul><h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><ul><li>Type<ul><li>typeof(class)</li></ul></li><li>Attribute<ul><li>type.GetCustomAttributes()</li><li>AttributeUsage    预定义特性<ul><li>AttributeTargets<ul><li>Class</li><li>Constructor</li><li>Field</li><li>Method</li><li>Property</li></ul></li><li>AllowMultiple</li></ul></li><li>Conditional</li><li>Obsolete</li></ul></li></ul><h3 id="Bitwise-位运算"><a href="#Bitwise-位运算" class="headerlink" title="Bitwise | 位运算"></a>Bitwise | 位运算</h3><ul><li><a href="https://www.cnblogs.com/darrenji/p/3921183.html">https://www.cnblogs.com/darrenji/p/3921183.html</a></li><li><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators">https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators</a></li><li>| 位或操作符</li><li>&amp; 位与操作符</li><li>~ 取反操作符</li><li>^ 位异或操作符<ul><li>当两对应的二进位相异时，结果为1</li><li>交换性<ul><li>r &#x3D; x ^ y</li><li>x &#x3D; r ^ y</li><li>y &#x3D; r ^ x</li><li>x、y交换<ul><li>x ^&#x3D; y;</li><li>y ^&#x3D; x;</li><li>x ^&#x3D; y;</li><li>三次操作后，x、y已交换</li></ul></li></ul></li></ul></li><li>加密、解密<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> msg = <span class="hljs-string">&quot;这是我要加密的string字符串&quot;</span>;<br><span class="hljs-built_in">string</span> k = <span class="hljs-string">&quot;mypassword&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; msg.Length; i++)<br>&#123;<br>    sb.Append((<span class="hljs-built_in">char</span>)(msg[i] ^ k[i % k.Length]));<br>&#125;<br>Console.WriteLine(sb.ToString());<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>C#</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 学习笔记</title>
    <link href="/wild/2021/10/25/log/P_Python_Feature/"/>
    <url>/wild/2021/10/25/log/P_Python_Feature/</url>
    
    <content type="html"><![CDATA[<h3 id="查看对象的反射属性"><a href="#查看对象的反射属性" class="headerlink" title="查看对象的反射属性"></a>查看对象的反射属性</h3><p>dir     列出所有属性、方法<br>getattr 获取字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ListClass</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(name):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>--<span class="hljs-subst">&#123;<span class="hljs-built_in">getattr</span>(name,i)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul><li>input()</li></ul><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><ul><li><a href="https://www.jianshu.com/p/9f306285a3ca">Python lambda表达式</a></li><li><a href="https://zhuanlan.zhihu.com/p/91137035">https://zhuanlan.zhihu.com/p/91137035</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br>data = [(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(data.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>]))<br><br><span class="hljs-built_in">print</span>([x+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)])<br><span class="hljs-comment"># x for x in data[] if condition=&gt; []</span><br><span class="hljs-built_in">print</span>([x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>])<br><span class="hljs-comment"># data为可迭代对象</span><br><span class="hljs-comment"># map(lambda,data)=&gt;map object</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x*x, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))))<br><span class="hljs-comment"># filter(lambda,data)=&gt;filter object</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))))<br><span class="hljs-comment"># reduce(lambda,data)</span><br><span class="hljs-comment"># 将data的前两个元素与给lambda使用，并将返回值和下一个元素继续联合使用</span><br><span class="hljs-built_in">print</span>(reduce(<span class="hljs-keyword">lambda</span> x, y: x+y, (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)))<br><span class="hljs-comment"># lambda argument_list:expersion</span><br><span class="hljs-comment"># https://zhuanlan.zhihu.com/p/91137035</span><br><span class="hljs-comment"># https://bbs.huaweicloud.com/blogs/363952</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 格式化成2016-03-20 11:45:39形式</span><br>t = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()) <br></code></pre></td></tr></table></figure><h3 id="多线程threading"><a href="#多线程threading" class="headerlink" title="多线程threading"></a>多线程threading</h3><p><a href="https://www.liujiangblog.com/course/python/79">多线程threading</a></p><h3 id="Command执行"><a href="#Command执行" class="headerlink" title="Command执行"></a>Command执行</h3><ul><li><a href="https://blog.csdn.net/qq_42292831/article/details/90737279">Python - CMD命令实时输出</a></li><li><a href="https://mohen.blog.csdn.net/article/details/84560895">https://mohen.blog.csdn.net/article/details/84560895</a></li><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c13/p06_executing_external_command_and_get_its_output.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/c13/p06_executing_external_command_and_get_its_output.html</a></li><li>stdout</li><li>编码<ul><li>utf-8</li><li>GB2312<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sh</span>(<span class="hljs-params">command</span>):<br>    p = subprocess.Popen(command, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(p))<br>    lines = []<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span>(p.stdout.readline, <span class="hljs-string">b&#x27;&#x27;</span>):<br>        line = line.strip().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&gt;&gt;&gt;&quot;</span>, line)<br>        lines.append(line)<br>    <span class="hljs-keyword">return</span> lines<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>type(object)</li><li>isinstance(object,type)</li></ul><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-built_in">dict</span> = &#123;&#125;<br>js = json.dumps(<span class="hljs-built_in">dict</span>)   <span class="hljs-comment">#字典转成json格式字符串</span><br><br>data = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">dict</span> = json.loads(data) <span class="hljs-comment">#json格式字符串转成字典</span><br></code></pre></td></tr></table></figure><h3 id="Glob"><a href="#Glob" class="headerlink" title="Glob"></a>Glob</h3><ul><li>&#x2F;**配合recursive&#x3D;True才能实现递归</li><li>data &#x3D; glob.glob(xxxpath**, recursive&#x3D;True)</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li>创建多级目录：os.makedirs(“xx&#x2F;xxx”)</li><li>shutil.copyfile(‘xx.py’, ‘d:&#x2F;xx.py’)</li></ul><h3 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h3><ul><li>mode<ul><li>w+ 文本可读可写，覆盖</li><li>wb 二进制可读可写，覆盖</li><li>a 文本追加</li><li>ab 二进制追加</li></ul></li><li>中文写入<ul><li>encoding&#x3D;”utf-8”<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>,mode=<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(text)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>,mode=<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><p>a &#x3D; x if x&gt;y else y</p><ul><li><a href="https://blog.csdn.net/u011973222/article/details/79928379">Python if…else三元表达式</a></li></ul><h3 id="Python格式化二进制、位运算"><a href="#Python格式化二进制、位运算" class="headerlink" title="Python格式化二进制、位运算"></a>Python格式化二进制、位运算</h3><p>整型的四种表现形式：</p><p>2 进 制：以’0b’开头。例如：’0b11011’表示10进制的27<br>8 进 制：以’0o’开头。例如：’0o33’表示10进制的27<br>10进制：正常显示<br>16进制：以’0x’开头。例如：’0x1b’表示10进制的27</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#0b0001是二进制，&quot;&#123;0:04b&#125;&quot;输出4位长度，不足高位补0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:04b&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0b0001</span>))<br><span class="hljs-comment">#zero pad 三位，不足用0代替</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:03&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">2</span>))<br><br><span class="hljs-comment">#format方法被用于字符串的格式化输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125;+&#123;1&#125;=&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>+<span class="hljs-number">2</span>))<br><span class="hljs-comment">#省略数字：</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;&#125;+&#123;&#125;=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>+<span class="hljs-number">2</span>))<br><span class="hljs-comment">#精度控制：</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:.3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>))<br><span class="hljs-number">0.333</span><br><span class="hljs-comment">#宽度控制：</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:7&#125;&#123;1:7&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;use&#x27;</span>,<span class="hljs-string">&#x27;python&#x27;</span>))<br>use    python<br><span class="hljs-comment">#精宽度控制(宽度内居左)：</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:&lt;7.3&#125;..&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>))   <br><span class="hljs-number">0.333</span>  ..<br><span class="hljs-comment">#同理&#x27;&gt;&#x27;为居右，&#x27;^&#x27;为居中</span><br><span class="hljs-comment">#https://www.cnblogs.com/Alexzzzz/p/6832253.html</span><br><br><span class="hljs-comment">#其实精宽度控制很类似于C中的printf函数。</span><br><span class="hljs-comment">#&quot;%7s&quot;的7表示输出7个字符宽，不足7个，空格补全，超过7个，超出部分也会显示</span><br><span class="hljs-comment">#修饰符前面加入了-，-表示左对齐，默认不加-时表示右对齐</span><br><span class="hljs-comment">#+不代表右对齐，输出正数前面的&quot;正号&quot;</span><br><br><span class="hljs-comment">#&quot;%12.3f&quot;输出宽度为12个字符，并且小数点的精度为3</span><br><span class="hljs-comment">#&quot;%12.5d&quot;修饰符小数点后的数字表示整数的长度，长度不够时，高位用0补全</span><br><span class="hljs-comment">#https://www.zsythink.net/archives/1411</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#位运算</span><br>(<span class="hljs-number">0b1001</span>)&amp;(<span class="hljs-number">0b1111</span>)<br>(<span class="hljs-number">0b1001</span>)|(<span class="hljs-number">0b1111</span>)<br>(<span class="hljs-number">0b1001</span>)&gt;&gt;<span class="hljs-number">2</span><br>(<span class="hljs-number">0b1001</span>)&lt;&lt;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 学习笔记</title>
    <link href="/wild/2021/09/25/log/P_C++_Feature/"/>
    <url>/wild/2021/09/25/log/P_C++_Feature/</url>
    
    <content type="html"><![CDATA[<h2 id="标准库API"><a href="#标准库API" class="headerlink" title="标准库API"></a>标准库API</h2><ul><li>utility.h<ul><li>swap</li><li>forward</li><li>move</li></ul></li><li>limits.h<ul><li>Limit || NaN || INF<ul><li>NaN : not a number    无效数字</li><li>INF : infinite        无穷大</li></ul></li><li>C++<ul><li>numeric_limits<int>::min()</li><li>numeric_limits<int>::max()</li></ul></li><li>C<ul><li>include &lt;limits.h&gt;</li><li>include &lt;climits.h&gt;<ul><li>INT_MIN</li><li>INT_MAX</li></ul></li><li>include &lt;float.h&gt;<ul><li>FLT_MAX</li><li>DBL_MAX</li></ul></li><li>include &lt;math.h&gt;<ul><li>int isfinite(x);</li><li>int isnormal(x);</li><li>int isnan(x);</li><li>int isinf(x);</li></ul></li></ul></li></ul></li></ul><h3 id="ImGui"><a href="#ImGui" class="headerlink" title="ImGui"></a>ImGui</h3><ul><li><a href="https://github.com/ocornut/imgui">ImGui</a></li><li><a href="https://github.com/BalazsJako/ImGuiColorTextEdit">文本编辑器ImGuiColorTextEdit</a></li><li><a href="https://github.com/BalazsJako/ColorTextEditorDemo">ColorTextEditorDemo</a></li></ul><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><ul><li><a href="https://www.bilibili.com/video/BV1AB4y1w7eT">10分钟彻底搞懂“动态规划”算法</a></li><li><a href="https://www.bilibili.com/video/BV1AY4y157yL">最浅显易懂的 KMP 算法讲解</a></li><li><a href="https://www.bilibili.com/video/BV1s44y1z7xt">计算机中的“进化论” - 遗传算法详解</a></li><li><a href="https://www.bilibili.com/video/BV1Wy4y1h7ii">一个10分钟的numpy入门教程</a></li><li><a href="https://www.bilibili.com/video/BV1ZL4y1p7Ds">React Reactjs 10分钟快速入门</a></li><li><a href="https://www.bilibili.com/video/BV17441167nz">LeetCode 7-2 设计文件系统</a></li><li><a href="https://www.bilibili.com/video/BV18E411h7Up">LeetCode 1235 规划兼职工作 - 从递归到动态规划</a></li><li>清华邓博士<ul><li><a href="https://www.bilibili.com/video/BV1vg411y77c">核武C++：Atomic Weapons</a></li><li><a href="https://www.bilibili.com/video/BV1kD4y1B7Se">语言之争 Language War III</a></li><li><a href="https://www.bilibili.com/video/BV1ga411Z7gG">Easy, Elegant, Powerful - Charles Bay</a></li></ul></li><li>Thomas Kim<ul><li><a href="https://www.talkplayfun.com/cpp/extension/">Thomas Kim</a></li><li><a href="https://www.youtube.com/user/siliners/videos">Thomas Kim</a></li><li><a href="https://www.youtube.com/watch?v=Gs-eUVgnkD0">The Easiest, The Simplest C++ Parallel Library, oneTBB - SpinScoped MutexLock</a></li></ul></li></ul><h3 id="C-11-17"><a href="#C-11-17" class="headerlink" title="C++ 11 || 17"></a>C++ 11 || 17</h3><ul><li><a href="https://www.bilibili.com/video/BV1xk4y1z7zh">C++新特性 虚函数override及类的final</a></li><li><a href="https://www.bilibili.com/video/BV1GK4y1s7qR">C++新特性 智能指针与RAII</a></li><li><a href="https://www.bilibili.com/video/BV1xg4y1i7NZ">C++多线程编程入门及基本概念,线程安全与锁,原子操作及 call_once</a></li><li>双笙子佯谬<ul><li><a href="https://www.bilibili.com/video/BV16P4y1g7MH">现代CMake高级教程</a></li><li><a href="https://www.bilibili.com/video/BV1LY411H7Gg">RAII与智能指针</a></li><li><a href="https://www.bilibili.com/video/BV1pq4y1y7oN">聊一聊C++设计模式、函数式编程</a></li><li><a href="https://www.bilibili.com/video/BV1ui4y1R78s">模板元编程与函数式</a></li><li><a href="https://www.bilibili.com/video/BV1Ya411q7y4">C++11开始的多线程编程</a></li><li><a href="https://www.bilibili.com/video/BV1gu411m7kN">TBB-transform, reduce, scan是什么意思？理解常用并行算法及其实现原理</a></li><li><a href="https://www.bilibili.com/video/BV16b4y1E74f">CUDA在现代C++中如何运用</a></li><li><a href="https://www.bilibili.com/video/BV1Ab4y177PE">【CFD】CUDA C++烟雾仿真实战</a></li><li><a href="https://www.bilibili.com/video/BV1P34y117Lp">多维数组如何实现按需分配内存，自动扩容？浮点数如何作为定点数压缩，高效利用内存带宽？</a></li><li><a href="https://www.bilibili.com/video/BV1fa411r7zp">现代C++中的高性能并行编程与优化</a></li><li><a href="https://www.bilibili.com/video/BV12S4y1K721">编译器优化与SIMD指令集</a></li><li><a href="https://www.bilibili.com/video/BV1gu41117bW">往数组里写入0为何比写入1更快？详解缓存的工作机制</a></li></ul></li></ul><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><ul><li><a href="https://cloud.tencent.com/developer/article/1584075">C++11 异步编程(std::async,std::future,std::promise)</a></li><li><a href="https://yilingui.xyz/wiki/c++/cxx11_multi_thread_and_async.html">C++11 多线程与异步调用</a></li><li><a href="https://www.bilibili.com/video/BV1oQ4y1C73G">多线程编程：一次性搞懂线程同步机制</a></li><li><a href="https://www.bilibili.com/video/BV1WP4y187Tu">异步编程: 一次性搞懂 Promise, async, await</a></li><li><a href="https://www.bilibili.com/video/BV17V411e7Ua">一个视频告诉你“并发、并行、异步、同步”的区别</a></li></ul><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li><a href="https://www.bilibili.com/video/BV1D54y1q7xT">C++ 多线程</a></li><li><a href="https://www.bilibili.com/video/BV1PW41187Zq">Understanding Control Flow: Concurrent Programming Using C++</a></li><li>C++ 多线程并发<ul><li><a href="https://www.bilibili.com/video/BV1g5411Z72H">1.1 创建线程(thread)</a></li><li><a href="https://www.bilibili.com/video/BV1vS4y1r7jV">1.2 互斥量(mutex), 原子变量(atomic)</a></li><li><a href="https://www.bilibili.com/video/BV1XY41137Mh">1.3 条件变量(condition_variable), 信号量(semaphore)</a></li><li><a href="https://www.bilibili.com/video/BV1XR4y1V7Yx">1.4 promise future 承诺给你美好的未来？</a></li><li><a href="https://www.bilibili.com/video/BV1WP4y1c7MF">1.5 std::packaged_task std::async</a></li></ul></li><li><a href="https://www.bilibili.com/video/BV1ja411N7cq">std::future</a></li><li><a href="https://www.bilibili.com/video/BV1kV4y1p7BV">packaged_task</a></li><li><a href="https://www.bilibili.com/video/BV1Ct4y1J7P2">std::promise</a></li></ul><h3 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h3><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shader后期处理-Bloom</title>
    <link href="/wild/2021/06/17/lab/S_Unity_Post_Bloom/"/>
    <url>/wild/2021/06/17/lab/S_Unity_Post_Bloom/</url>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>对原场景图进行筛选，所有小于这个阈值的像素都被筛掉</li><li>对上一步操作的结果进行模糊操作，达到光溢出的效果</li><li>最后将处理过的图像和原图像进行叠加，得到最终效果</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/puppet_master/article/details/52889050">Unity Shader-后处理：Bloom全屏泛光</a></li><li><a href="https://blog.csdn.net/qq_28299311/article/details/106113698">Unity Shader - Bloom(光晕、泛光)</a></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>Post_Bloom.shader<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs c++">Shader <span class="hljs-string">&quot;Post/Post_Bloom&quot;</span><br>&#123;<br>    Properties<br>    &#123;<br>        _MainTex(<span class="hljs-string">&quot;Base (RGB)&quot;</span>, <span class="hljs-number">2</span>D) = <span class="hljs-string">&quot;white&quot;</span> &#123;&#125;<br>        _BlurTex(<span class="hljs-string">&quot;Blur&quot;</span>, <span class="hljs-number">2</span>D) = <span class="hljs-string">&quot;white&quot;</span>&#123;&#125;<br>    &#125;<br><br>    CGINCLUDE<br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;UnityCG.cginc&quot;</span></span><br><br>    <span class="hljs-keyword">struct</span> v2f_threshold<br>    &#123;<br>        float4 pos : SV_POSITION;<br>        float2 uv : TEXCOORD0;<br>    &#125;;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">v2f_blur</span><br>    &#123;<br>        float4 pos : SV_POSITION;<br>        float2 uv : TEXCOORD0;<br>        float4 uv01 : TEXCOORD1;<br>        float4 uv23 : TEXCOORD2;<br>        float4 uv45 : TEXCOORD3;<br>    &#125;;<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">v2f_bloom</span><br>    &#123;<br>        float4 pos : SV_POSITION;<br>        float2 uv : TEXCOORD0;<br>        float2 uv1 : TEXCOORD1;<br>    &#125;;<br><br>    sampler2D _MainTex;<br>    float4 _MainTex_TexelSize;<br>    sampler2D _BlurTex;<br>    float4 _BlurTex_TexelSize;<br>    float4 _offsets;<br>    float4 _colorThreshold;<br>    float4 _bloomColor;<br>    <span class="hljs-type">float</span> _bloomFactor;<br><br>    <span class="hljs-function">v2f_threshold <span class="hljs-title">vert_threshold</span><span class="hljs-params">(appdata_img v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        v2f_threshold o;<br>        o.pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(v.vertex);<br>        o.uv = v.texcoord.xy;<br>        <span class="hljs-comment">//dx中纹理从左上角为初始坐标，需要反向</span><br>        <span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_UV_STARTS_AT_TOP</span><br>        <span class="hljs-keyword">if</span> (_MainTex_TexelSize.y &lt; <span class="hljs-number">0</span>)<br>            o.uv.y = <span class="hljs-number">1</span> - o.uv.y;<br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-function">fixed <span class="hljs-title">luminance</span><span class="hljs-params">(fixed4 color)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.2125</span> * color.r + <span class="hljs-number">0.7154</span> * color.g + <span class="hljs-number">0.0721</span> * color.b;<br>    &#125;<br><br>    <span class="hljs-function">fixed4 <span class="hljs-title">frag_threshold</span><span class="hljs-params">(v2f_threshold i)</span> : SV_Target</span><br><span class="hljs-function">    &#123;</span><br>        fixed4 color = <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv);<br><br>        fixed val = <span class="hljs-built_in">saturate</span>(<span class="hljs-built_in">luminance</span>(color) - <span class="hljs-built_in">luminance</span>(_colorThreshold));<br>        <span class="hljs-keyword">return</span> color * val;<br><br>        <span class="hljs-comment">// return saturate(color - _colorThreshold);</span><br>    &#125;<br><br>    <span class="hljs-function">v2f_blur <span class="hljs-title">vert_blur</span><span class="hljs-params">(appdata_img v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        v2f_blur o;<br>        _offsets *= _MainTex_TexelSize.xyxy;<br>        o.pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(v.vertex);<br>        o.uv = v.texcoord.xy;<br><br>        o.uv01 = v.texcoord.xyxy + _offsets.xyxy * <span class="hljs-built_in">float4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>);<br>        o.uv23 = v.texcoord.xyxy + _offsets.xyxy * <span class="hljs-built_in">float4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>) * <span class="hljs-number">2.0</span>;<br>        o.uv45 = v.texcoord.xyxy + _offsets.xyxy * <span class="hljs-built_in">float4</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>) * <span class="hljs-number">3.0</span>;<br><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-function">fixed4 <span class="hljs-title">frag_blur</span><span class="hljs-params">(v2f_blur i)</span> : SV_Target</span><br><span class="hljs-function">    &#123;</span><br>        fixed4 color = <span class="hljs-built_in">fixed4</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        color += <span class="hljs-number">0.40</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv);<br>        color += <span class="hljs-number">0.15</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv01.xy);<br>        color += <span class="hljs-number">0.15</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv01.zw);<br>        color += <span class="hljs-number">0.10</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv23.xy);<br>        color += <span class="hljs-number">0.10</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv23.zw);<br>        color += <span class="hljs-number">0.05</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv45.xy);<br>        color += <span class="hljs-number">0.05</span> * <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv45.zw);<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-function">v2f_bloom <span class="hljs-title">vert_bloom</span><span class="hljs-params">(appdata_img v)</span></span><br><span class="hljs-function">    </span>&#123;<br>        v2f_bloom o;<br>        o.pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(v.vertex);<br><br>        o.uv.xy = v.texcoord.xy;<br>        o.uv1.xy = o.uv.xy;<br>        <span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_UV_STARTS_AT_TOP</span><br>        <span class="hljs-keyword">if</span> (_MainTex_TexelSize.y &lt; <span class="hljs-number">0</span>)<br>            o.uv.y = <span class="hljs-number">1</span> - o.uv.y;<br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-function">fixed4 <span class="hljs-title">frag_bloom</span><span class="hljs-params">(v2f_bloom i)</span> : SV_Target</span><br><span class="hljs-function">    &#123;</span><br>        fixed4 ori = <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv1);<br>        fixed4 blur = <span class="hljs-built_in">tex2D</span>(_BlurTex, i.uv);<br><br>        fixed4 <span class="hljs-keyword">final</span> = ori + _bloomFactor * blur * _bloomColor;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">final</span>;<br>    &#125;<br>    ENDCG<br><br>    SubShader<br>    &#123;<br>        <span class="hljs-comment">//pass 0: 提取高亮部分</span><br>        Pass<br>        &#123;<br>            ZTest Off<br>            Cull Off<br>            ZWrite Off<br>            Fog<br>            &#123;<br>                Mode Off<br>            &#125;<br><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vert_threshold</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment frag_threshold</span><br>            ENDCG<br>        &#125;<br><br>        <span class="hljs-comment">//pass 1: 高斯模糊</span><br>        Pass<br>        &#123;<br>            ZTest Off<br>            Cull Off<br>            ZWrite Off<br>            Fog<br>            &#123;<br>                Mode Off<br>            &#125;<br><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vert_blur</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment frag_blur</span><br>            ENDCG<br>        &#125;<br><br>        <span class="hljs-comment">//pass 2: Bloom效果</span><br>        Pass<br>        &#123;<br><br>            ZTest Off<br>            Cull Off<br>            ZWrite Off<br>            Fog<br>            &#123;<br>                Mode Off<br>            &#125;<br><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vert_bloom</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment frag_bloom</span><br>            ENDCG<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>PostBloom.cs<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">ImageEffectAllowedInSceneView</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(Camera))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PostBloom</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> Shader shader;<br>    <span class="hljs-keyword">private</span> Material m_material;<br><br>    [<span class="hljs-meta">Range(0.0f, 1.0f)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> bloomFactor = <span class="hljs-number">0.5f</span>;<br>    [<span class="hljs-meta">Range(0, 4)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> downSample = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> samplerScale = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> Color colorThreshold = Color.gray;<br>    <span class="hljs-keyword">public</span> Color bloomColor = Color.white;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        m_material = <span class="hljs-keyword">new</span> Material(shader);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (shader)<br>            m_material = <span class="hljs-keyword">new</span> Material(shader);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnRenderImage</span>(<span class="hljs-params">RenderTexture source, RenderTexture destination</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_material)<br>        &#123;<br>            RenderTexture temp1 = RenderTexture.GetTemporary(source.width &gt;&gt; downSample, source.height &gt;&gt; downSample, <span class="hljs-number">0</span>,<br>                source.format);<br>            RenderTexture temp2 = RenderTexture.GetTemporary(source.width &gt;&gt; downSample, source.height &gt;&gt; downSample, <span class="hljs-number">0</span>,<br>                source.format);<br><br>            Graphics.Blit(source, temp1);<br><br>            m_material.SetVector(<span class="hljs-string">&quot;_colorThreshold&quot;</span>, colorThreshold);<br>            Graphics.Blit(temp1, temp2, m_material, <span class="hljs-number">0</span>);<br><br>            m_material.SetVector(<span class="hljs-string">&quot;_offsets&quot;</span>, <span class="hljs-keyword">new</span> Vector4(<span class="hljs-number">0</span>, samplerScale, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>            Graphics.Blit(temp2, temp1, m_material, <span class="hljs-number">1</span>);<br>            m_material.SetVector(<span class="hljs-string">&quot;_offsets&quot;</span>, <span class="hljs-keyword">new</span> Vector4(samplerScale, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>            Graphics.Blit(temp1, temp2, m_material, <span class="hljs-number">1</span>);<br><br>            m_material.SetTexture(<span class="hljs-string">&quot;_BlurTex&quot;</span>, temp2);<br>            m_material.SetVector(<span class="hljs-string">&quot;_bloomColor&quot;</span>, bloomColor);<br>            m_material.SetFloat(<span class="hljs-string">&quot;_bloomFactor&quot;</span>, bloomFactor);<br><br>            Graphics.Blit(source, destination, m_material, <span class="hljs-number">2</span>);<br><br>            RenderTexture.ReleaseTemporary(temp1);<br>            RenderTexture.ReleaseTemporary(temp2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Shader</tag>
      
      <tag>Image Process</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shader后期处理-高斯模糊</title>
    <link href="/wild/2021/06/17/lab/S_Unity_Post_Blur/"/>
    <url>/wild/2021/06/17/lab/S_Unity_Post_Blur/</url>
    
    <content type="html"><![CDATA[<h3 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/105909416">游戏中的后处理（一）高斯模糊</a><ul><li>将计算出的高斯模糊的kernal，表示成两个向量的外积，然后分别进行处理</li><li>两次 spatial filter分别在水平和垂直方向上进行</li><li>尽管多使用了一个Pass，但是每个像素点需要的采样次数，从25降低到了10，在带宽开销上有了很大的降低</li><li>还可以通过双线性过滤的特性，来进一步降低采样次数</li><li><a href="https://zhuanlan.zhihu.com/p/367002139">横向模糊与纵向模糊分别在两个片元着色器中实现</a><br>  <img src="/wild/2021/06/17/lab/S_Unity_Post_Blur/image-1669713477936.png"></li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/125744132">高品质后处理：十种图像模糊算法的总结与实现</a><br>  <img src="/wild/2021/06/17/lab/S_Unity_Post_Blur/image-1669798944164.png"><br>  <img src="/wild/2021/06/17/lab/S_Unity_Post_Blur/image-1669800149313.png"></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>双Pass横向、纵向分开模糊</li><li>Post_GaussianBlurPlus.shader<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c++">Shader <span class="hljs-string">&quot;Post/Post_GaussianBlurPlus&quot;</span><br>&#123;<br>    Properties<br>    &#123;<br>        _MainTex (<span class="hljs-string">&quot;Base (RGB)&quot;</span>, <span class="hljs-number">2</span>D) = <span class="hljs-string">&quot;white&quot;</span> &#123;&#125;<br>        _BlurSize (<span class="hljs-string">&quot;Blur Size&quot;</span>, Float) = <span class="hljs-number">1.0</span><br>    &#125;<br>    SubShader<br>    &#123;<br>        CGINCLUDE<br>        <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;UnityCG.cginc&quot;</span></span><br><br>        sampler2D _MainTex;<br>        half4 _MainTex_TexelSize;<br>        <span class="hljs-type">float</span> _BlurSize;<br><br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">v2f</span><br>        &#123;<br>            float4 pos : SV_POSITION;<br>            half2 uv[<span class="hljs-number">5</span>]: TEXCOORD0;<br>        &#125;;<br><br>        <span class="hljs-function">v2f <span class="hljs-title">vertBlurVertical</span><span class="hljs-params">(appdata_img v)</span></span><br><span class="hljs-function">        </span>&#123;<br>            v2f o;<br>            o.pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(v.vertex);<br><br>            half2 uv = v.texcoord;<br><br>            o.uv[<span class="hljs-number">0</span>] = uv;<br>            o.uv[<span class="hljs-number">1</span>] = uv + <span class="hljs-built_in">float2</span>(<span class="hljs-number">0.0</span>, _MainTex_TexelSize.y * <span class="hljs-number">1.0</span> * _BlurSize);<br>            o.uv[<span class="hljs-number">2</span>] = uv - <span class="hljs-built_in">float2</span>(<span class="hljs-number">0.0</span>, _MainTex_TexelSize.y * <span class="hljs-number">1.0</span> * _BlurSize);<br>            o.uv[<span class="hljs-number">3</span>] = uv + <span class="hljs-built_in">float2</span>(<span class="hljs-number">0.0</span>, _MainTex_TexelSize.y * <span class="hljs-number">2.0</span> * _BlurSize);<br>            o.uv[<span class="hljs-number">4</span>] = uv - <span class="hljs-built_in">float2</span>(<span class="hljs-number">0.0</span>, _MainTex_TexelSize.y * <span class="hljs-number">2.0</span> * _BlurSize);<br><br>            <span class="hljs-keyword">return</span> o;<br>        &#125;<br><br>        <span class="hljs-function">v2f <span class="hljs-title">vertBlurHorizontal</span><span class="hljs-params">(appdata_img v)</span></span><br><span class="hljs-function">        </span>&#123;<br>            v2f o;<br>            o.pos = <span class="hljs-built_in">UnityObjectToClipPos</span>(v.vertex);<br><br>            half2 uv = v.texcoord;<br><br>            o.uv[<span class="hljs-number">0</span>] = uv;<br>            o.uv[<span class="hljs-number">1</span>] = uv + <span class="hljs-built_in">float2</span>(_MainTex_TexelSize.x * <span class="hljs-number">1.0</span> * _BlurSize, <span class="hljs-number">0.0</span>);<br>            o.uv[<span class="hljs-number">2</span>] = uv - <span class="hljs-built_in">float2</span>(_MainTex_TexelSize.x * <span class="hljs-number">1.0</span> * _BlurSize, <span class="hljs-number">0.0</span>);<br>            o.uv[<span class="hljs-number">3</span>] = uv + <span class="hljs-built_in">float2</span>(_MainTex_TexelSize.x * <span class="hljs-number">2.0</span> * _BlurSize, <span class="hljs-number">0.0</span>);<br>            o.uv[<span class="hljs-number">4</span>] = uv - <span class="hljs-built_in">float2</span>(_MainTex_TexelSize.x * <span class="hljs-number">2.0</span> * _BlurSize, <span class="hljs-number">0.0</span>);<br><br>            <span class="hljs-keyword">return</span> o;<br>        &#125;<br><br>        <span class="hljs-function">fixed4 <span class="hljs-title">fragBlur</span><span class="hljs-params">(v2f i)</span> : SV_Target</span><br><span class="hljs-function">        &#123;</span><br>            <span class="hljs-type">const</span> <span class="hljs-type">float</span> weight[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0.4026</span>, <span class="hljs-number">0.2442</span>, <span class="hljs-number">0.0545</span>&#125;;<br><br>            fixed3 sum = <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv[<span class="hljs-number">0</span>]).rgb * weight[<span class="hljs-number">0</span>];<br><br>            <span class="hljs-function">UNITY_UNROLL</span><br><span class="hljs-function">            <span class="hljs-title">for</span> <span class="hljs-params">(<span class="hljs-type">int</span> it = <span class="hljs-number">1</span>; it &lt; <span class="hljs-number">3</span>; it++)</span></span><br><span class="hljs-function">            </span>&#123;<br>                sum += <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv[it * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>]).rgb * weight[it];<br>                sum += <span class="hljs-built_in">tex2D</span>(_MainTex, i.uv[it * <span class="hljs-number">2</span>]).rgb * weight[it];<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">fixed4</span>(sum, <span class="hljs-number">1.0</span>);<br>        &#125;<br>        ENDCG<br><br>        ZTest Always Cull Off ZWrite Off<br><br>        Pass<br>        &#123;<br>            <span class="hljs-comment">// Pass0 纵向模糊</span><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vertBlurVertical</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment fragBlur</span><br>            ENDCG<br>        &#125;<br><br>        Pass<br>        &#123;<br>            <span class="hljs-comment">// Pass1 横向模糊</span><br>            CGPROGRAM<br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> vertex vertBlurHorizontal</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">pragma</span> fragment fragBlur</span><br>            ENDCG<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>GaussianBlur.cs<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">ExecuteInEditMode</span>]<br>[<span class="hljs-meta">ImageEffectAllowedInSceneView</span>]<br>[<span class="hljs-meta">RequireComponent(typeof(Camera))</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GaussianBlur</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    [<span class="hljs-meta">SerializeField</span>] <span class="hljs-keyword">private</span> Shader shader;<br>    [<span class="hljs-meta">SerializeField</span>] [Range(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)] <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> iterations = <span class="hljs-number">3</span>;<br>    [<span class="hljs-meta">SerializeField</span>] [Range(<span class="hljs-number">0.2f</span>, <span class="hljs-number">3.0f</span>)] <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> blurSpread = <span class="hljs-number">1.0f</span>;<br>    [<span class="hljs-meta">SerializeField</span>] [Range(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)] <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> downSample = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">private</span> Material m_material;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_blurSizeID;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        m_material = <span class="hljs-keyword">new</span> Material(shader);<br>        m_blurSizeID = Shader.PropertyToID(<span class="hljs-string">&quot;_BlurSize&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (shader)<br>            m_material = <span class="hljs-keyword">new</span> Material(shader);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnRenderImage</span>(<span class="hljs-params">RenderTexture source, RenderTexture destination</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_material != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-built_in">int</span> iWidth = source.width / downSample;<br>            <span class="hljs-built_in">int</span> iHeight = source.height / downSample;<br><br>            RenderTexture buffer0 = RenderTexture.GetTemporary(iWidth, iHeight, <span class="hljs-number">0</span>);<br>            Graphics.Blit(source, buffer0);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; iterations; i++)<br>            &#123;<br>                m_material.SetFloat(m_blurSizeID, <span class="hljs-number">1.0f</span> + blurSpread);<br>                RenderTexture buffer1 = RenderTexture.GetTemporary(iWidth, iHeight, <span class="hljs-number">0</span>);<br><br>                Graphics.Blit(buffer0, buffer1, m_material, <span class="hljs-number">0</span>);<br><br>                RenderTexture.ReleaseTemporary(buffer0);<br>                buffer0 = buffer1;<br><br>                buffer1 = RenderTexture.GetTemporary(iWidth, iHeight, <span class="hljs-number">0</span>);<br>                Graphics.Blit(buffer0, buffer1, m_material, <span class="hljs-number">1</span>);<br><br>                RenderTexture.ReleaseTemporary(buffer0);<br>                buffer0 = buffer1;<br>            &#125;<br><br>            Graphics.Blit(buffer0, destination);<br>            RenderTexture.ReleaseTemporary(buffer0);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Graphics.Blit(source, destination);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单Pass横纵一体化模糊<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">fixed4 <span class="hljs-title">GaussianBlur</span><span class="hljs-params">(float2 uv, <span class="hljs-type">float</span> blur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">float</span> offset = blur * <span class="hljs-number">0.0625f</span>;<br>    fixed4 color = <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x - offset, uv.y - offset)) * <span class="hljs-number">0.0947416f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x, uv.y - offset)) * <span class="hljs-number">0.118318f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x + offset, uv.y + offset)) * <span class="hljs-number">0.0947416f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x - offset, uv.y)) * <span class="hljs-number">0.118318f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x, uv.y)) * <span class="hljs-number">0.147761f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x + offset, uv.y)) * <span class="hljs-number">0.118318f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x - offset, uv.y + offset)) * <span class="hljs-number">0.0947416f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x, uv.y + offset)) * <span class="hljs-number">0.118318f</span>;<br>    color += <span class="hljs-built_in">tex2D</span>(_MainTex, <span class="hljs-built_in">float2</span>(uv.x + offset, uv.y - offset)) * <span class="hljs-number">0.0947416f</span>;<br><br>    <span class="hljs-keyword">return</span> color;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h3><h4 id="纹理过滤"><a href="#纹理过滤" class="headerlink" title="纹理过滤"></a>纹理过滤</h4><ul><li>最近点采样<ul><li>直接取最接近的纹素进行采样</li></ul></li><li>双线性过滤（Bilinear filtering）<ul><li>效果上比较平滑</li><li>在X和Y方向分别进行一次线性插值, 采样点的权重与和插值点的距离负相关</li><li><a href="https://cloud.tencent.com/developer/article/1821913">https://cloud.tencent.com/developer/article/1821913</a><br>  <img src="/wild/2021/06/17/lab/S_Unity_Post_Blur/image-1669713906110.png"></li></ul></li><li>三线性过滤<ul><li>三线性过滤以双线性过滤为基础</li><li>对像素大小于纹素大小最接近的两层MipMap Level分别进行双线性过滤，然后再对两层得到的结果生成线性插值</li><li>在各向同性的情况下，三线性过滤能获得很不错的效果。</li><li><a href="https://www.cnblogs.com/anesu/p/15765137.html">https://www.cnblogs.com/anesu/p/15765137.html</a></li></ul></li><li>各向异性过滤（Anisotropic Filtering）<ul><li>按比例在各方向上采样不同数量的点来计算最终的结果</li></ul></li><li>立方卷积插值（Bicubic）<ul><li>取周围邻近的16个纹素的像素，然后做插值计算</li><li>不过并非是线性插值而是每次用4个做一个三次的插值。</li></ul></li><li>光滑曲线插值（Quilez）<ul><li>在立方卷积插值和双线性过滤的一个折中效果</li><li>将纹理坐标带入到双线性插值前额外做了一步处理。</li></ul></li></ul><h4 id="Texture-size"><a href="#Texture-size" class="headerlink" title="Texture size"></a>Texture size</h4><ul><li>_TexelSize<ul><li>x 1.0&#x2F;width</li><li>y 1.0&#x2F;height</li><li>z width</li><li>w height</li></ul></li><li><a href="https://docs.unity3d.com/Manual/SL-PropertiesInPrograms.html">https://docs.unity3d.com/Manual/SL-PropertiesInPrograms.html</a></li><li>Direct3D平台下，如果我们开启了抗锯齿，则xxx_TexelSize.y 会变成负值<ul><li><a href="https://blog.csdn.net/WPAPA/article/details/72721185">https://blog.csdn.net/WPAPA/article/details/72721185</a></li><li><a href="https://www.jianshu.com/p/f2b2d504c212">https://www.jianshu.com/p/f2b2d504c212</a></li></ul></li><li>UNITY_UV_STARTS_AT_TOP<ul><li>Direct3D类似平台使用1；OpenGL类似平台使用0</li></ul></li></ul><h4 id="HDR-Color"><a href="#HDR-Color" class="headerlink" title="HDR Color"></a>HDR Color</h4><ul><li>_HDR<ul><li>DecodeHDR</li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/85210935">https://zhuanlan.zhihu.com/p/85210935</a><br><a href="https://www.jianshu.com/p/e88193000d81">https://www.jianshu.com/p/e88193000d81</a><br><a href="https://www.jianshu.com/p/e1cdb129b73e">https://www.jianshu.com/p/e1cdb129b73e</a></p>]]></content>
    
    
    <categories>
      
      <category>Shader</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Shader</tag>
      
      <tag>Image Process</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Art and Tech</title>
    <link href="/wild/2010/11/22/log/A_Art/"/>
    <url>/wild/2010/11/22/log/A_Art/</url>
    
    <content type="html"><![CDATA[<h3 id="Art-Design"><a href="#Art-Design" class="headerlink" title="Art Design"></a>Art Design</h3><p><img src="/wild/2010/11/22/log/A_Art/Art.png"></p>]]></content>
    
    
    <categories>
      
      <category>Wild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>问题的问题</title>
    <link href="/wild/2010/06/30/log/A_Problem/"/>
    <url>/wild/2010/06/30/log/A_Problem/</url>
    
    <content type="html"><![CDATA[<h3 id="（一）问题的问题"><a href="#（一）问题的问题" class="headerlink" title="（一）问题的问题"></a>（一）问题的问题</h3><h4 id="（1）放开视野，厘清问题"><a href="#（1）放开视野，厘清问题" class="headerlink" title="（1）放开视野，厘清问题"></a>（1）放开视野，厘清问题</h4><ul><li>对于疑惑，提出合理的问题，合理的认知，才能为解决问题提供思路</li><li>收集同类型的问题，综合各种情况、条件，做总体的定位、评估</li><li>综合各种不同的条件变量，探究问题的演化，求解对应的答案</li><li>调查，审题，评估对象</li></ul><h4 id="（2）收集方案，重复造轮子"><a href="#（2）收集方案，重复造轮子" class="headerlink" title="（2）收集方案，重复造轮子"></a>（2）收集方案，重复造轮子</h4><ul><li>搜索已有的前人研究，同行研究</li><li>重现解决问题实现的过程</li></ul><h4 id="（3）方案的优化"><a href="#（3）方案的优化" class="headerlink" title="（3）方案的优化"></a>（3）方案的优化</h4><ul><li>优化是价值的体现，是品质的主要差异</li><li>不管是价值的提炼，还是效率与品质的提升，都是无数遍的思考和精心打磨</li></ul><h4 id="（4）团体的构造"><a href="#（4）团体的构造" class="headerlink" title="（4）团体的构造"></a>（4）团体的构造</h4><ul><li>核心的能力，价值观</li><li>同行的竞争，合理的价格，合理的人才代谢</li></ul><h3 id="（二）认知的复杂"><a href="#（二）认知的复杂" class="headerlink" title="（二）认知的复杂"></a>（二）认知的复杂</h3><h4 id="（1）降低难度"><a href="#（1）降低难度" class="headerlink" title="（1）降低难度"></a>（1）降低难度</h4><ul><li>对于一个复杂的东西<ul><li>先学会使用</li><li>认识每个模块、Feature</li><li>再去深究原理，背后的算法</li></ul></li></ul><h4 id="（2）Debug模式"><a href="#（2）Debug模式" class="headerlink" title="（2）Debug模式"></a>（2）Debug模式</h4><ul><li>对于一个复杂的问题</li><li>优先将所有信息展开、铺陈</li><li>用统一的视角观察</li></ul><h4 id="（3）微元法"><a href="#（3）微元法" class="headerlink" title="（3）微元法"></a>（3）微元法</h4><ul><li>拆分组件 : 组件之和 &#x3D; 整体</li></ul>]]></content>
    
    
    <categories>
      
      <category>Wild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wild</tag>
      
      <tag>Problem</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
